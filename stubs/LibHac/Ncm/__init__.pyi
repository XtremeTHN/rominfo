import typing, clr, abc
from System import IEquatable_1, IComparable, IComparable_1, ReadOnlySpan_1, Span_1
from LibHac.Common import Id128
from LibHac import Result
from LibHac.Fs import RightsId

class ApplicationContentMetaKey:
    def __init__(self) -> None: ...
    @property
    def Key(self) -> ContentMetaKey: ...
    @Key.setter
    def Key(self, value: ContentMetaKey) -> ContentMetaKey: ...
    @property
    def TitleId(self) -> int: ...
    @TitleId.setter
    def TitleId(self, value: int) -> int: ...


class ApplicationId(IEquatable_1[ApplicationId]):
    def __init__(self, value: int) -> None: ...
    Value : int
    @classmethod
    @property
    def End(cls) -> ApplicationId: ...
    @classmethod
    @property
    def InvalidId(cls) -> ApplicationId: ...
    @classmethod
    @property
    def Start(cls) -> ApplicationId: ...
    def GetHashCode(self) -> int: ...
    @staticmethod
    def IsApplicationId(programId: ProgramId) -> bool: ...
    def __eq__(self, left: ApplicationId, right: ApplicationId) -> bool: ...
    # Operator not supported op_Implicit(id: ApplicationId)
    def __ne__(self, left: ApplicationId, right: ApplicationId) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: ApplicationId) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class ContentId(IComparable, IComparable_1[ContentId], IEquatable_1[ContentId]):
    @typing.overload
    def __init__(self, high: int, low: int) -> None: ...
    @typing.overload
    def __init__(self, uid: ReadOnlySpan_1[int]) -> None: ...
    Id : Id128
    def AsBytes(self) -> ReadOnlySpan_1[int]: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: ContentId, right: ContentId) -> bool: ...
    def __gt__(self, left: ContentId, right: ContentId) -> bool: ...
    def __ge__(self, left: ContentId, right: ContentId) -> bool: ...
    def __ne__(self, left: ContentId, right: ContentId) -> bool: ...
    def __lt__(self, left: ContentId, right: ContentId) -> bool: ...
    def __le__(self, left: ContentId, right: ContentId) -> bool: ...
    def ToBytes(self, output: Span_1[int]) -> None: ...
    def ToString(self) -> str: ...
    # Skipped CompareTo due to it being static, abstract and generic.

    CompareTo : CompareTo_MethodGroup
    class CompareTo_MethodGroup:
        @typing.overload
        def __call__(self, other: ContentId) -> int:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> int:...

    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: ContentId) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class ContentInfo:
    contentId : ContentId
    size1 : int
    size2 : int


class ContentMetaAttribute(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ContentMetaAttribute # 0
    IncludesExFatDriver : ContentMetaAttribute # 1
    Rebootless : ContentMetaAttribute # 2
    Compacted : ContentMetaAttribute # 4


class ContentMetaKey(IEquatable_1[ContentMetaKey], IComparable, IComparable_1[ContentMetaKey]):
    def __init__(self) -> None: ...
    @property
    def Attributes(self) -> ContentMetaAttribute: ...
    @Attributes.setter
    def Attributes(self, value: ContentMetaAttribute) -> ContentMetaAttribute: ...
    @property
    def ExportSize(self) -> int: ...
    @property
    def TitleId(self) -> int: ...
    @TitleId.setter
    def TitleId(self, value: int) -> int: ...
    @property
    def Type(self) -> ContentMetaType: ...
    @Type.setter
    def Type(self, value: ContentMetaType) -> ContentMetaType: ...
    @property
    def Version(self) -> int: ...
    @Version.setter
    def Version(self, value: int) -> int: ...
    def Freeze(self) -> None: ...
    def FromBytes(self, input: ReadOnlySpan_1[int]) -> None: ...
    def GetHashCode(self) -> int: ...
    def ToBytes(self, output: Span_1[int]) -> None: ...
    # Skipped CompareTo due to it being static, abstract and generic.

    CompareTo : CompareTo_MethodGroup
    class CompareTo_MethodGroup:
        @typing.overload
        def __call__(self, other: ContentMetaKey) -> int:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> int:...

    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: ContentMetaKey) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class ContentMetaType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SystemProgram : ContentMetaType # 1
    SystemData : ContentMetaType # 2
    SystemUpdate : ContentMetaType # 3
    BootImagePackage : ContentMetaType # 4
    BootImagePackageSafe : ContentMetaType # 5
    Application : ContentMetaType # 128
    Patch : ContentMetaType # 129
    AddOnContent : ContentMetaType # 130
    Delta : ContentMetaType # 131


class ContentType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Meta : ContentType # 0
    Program : ContentType # 1
    Data : ContentType # 2
    Control : ContentType # 3
    HtmlDocument : ContentType # 4
    LegalInformation : ContentType # 5
    DeltaFragment : ContentType # 6


class DataId(IComparable_1[DataId], IEquatable_1[DataId]):
    def __init__(self, value: int) -> None: ...
    Value : int
    @classmethod
    @property
    def InvalidId(cls) -> DataId: ...
    def CompareTo(self, other: DataId) -> int: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: DataId, right: DataId) -> bool: ...
    def __gt__(self, left: DataId, right: DataId) -> bool: ...
    def __ge__(self, left: DataId, right: DataId) -> bool: ...
    def __ne__(self, left: DataId, right: DataId) -> bool: ...
    def __lt__(self, left: DataId, right: DataId) -> bool: ...
    def __le__(self, left: DataId, right: DataId) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: DataId) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class DeltaId:
    def __init__(self, value: int) -> None: ...
    Value : int
    # Operator not supported op_Implicit(id: DeltaId)


class IContentMetaDatabase(typing.Protocol):
    @abc.abstractmethod
    def Commit(self) -> Result: ...
    @abc.abstractmethod
    def DisableForcibly(self) -> Result: ...
    @abc.abstractmethod
    def Get(self, valueSize: clr.Reference[int], key: ContentMetaKey, valueBuffer: Span_1[int]) -> Result: ...
    @abc.abstractmethod
    def GetAttributes(self, attributes: clr.Reference[ContentMetaAttribute], key: ContentMetaKey) -> Result: ...
    @abc.abstractmethod
    def GetContentIdByType(self, contentId: clr.Reference[ContentId], key: ContentMetaKey, type: ContentType) -> Result: ...
    @abc.abstractmethod
    def GetLatestContentMetaKey(self, key: clr.Reference[ContentMetaKey], titleId: int) -> Result: ...
    @abc.abstractmethod
    def GetPatchId(self, titleId: clr.Reference[int], key: ContentMetaKey) -> Result: ...
    @abc.abstractmethod
    def GetRequiredApplicationVersion(self, version: clr.Reference[int], key: ContentMetaKey) -> Result: ...
    @abc.abstractmethod
    def GetRequiredSystemVersion(self, version: clr.Reference[int], key: ContentMetaKey) -> Result: ...
    @abc.abstractmethod
    def GetSize(self, size: clr.Reference[int], key: ContentMetaKey) -> Result: ...
    @abc.abstractmethod
    def Has(self, hasKey: clr.Reference[bool], key: ContentMetaKey) -> Result: ...
    @abc.abstractmethod
    def HasAll(self, hasAllKeys: clr.Reference[bool], key: ReadOnlySpan_1[ContentMetaKey]) -> Result: ...
    @abc.abstractmethod
    def HasContent(self, hasContent: clr.Reference[bool], key: ContentMetaKey, contentId: ContentId) -> Result: ...
    @abc.abstractmethod
    def List(self, totalEntryCount: clr.Reference[int], matchedEntryCount: clr.Reference[int], keys: Span_1[ContentMetaKey], type: ContentMetaType, applicationTitleId: int, minTitleId: int, maxTitleId: int, attributes: ContentMetaAttribute) -> Result: ...
    @abc.abstractmethod
    def ListApplication(self, totalEntryCount: clr.Reference[int], matchedEntryCount: clr.Reference[int], keys: Span_1[ApplicationContentMetaKey], type: ContentMetaType) -> Result: ...
    @abc.abstractmethod
    def ListContentInfo(self, count: clr.Reference[int], outInfo: Span_1[ContentInfo], key: ContentMetaKey, startIndex: int) -> Result: ...
    @abc.abstractmethod
    def ListContentMetaInfo(self, entryCount: clr.Reference[int], outInfo: Span_1[ContentMetaKey], key: ContentMetaKey, startIndex: int) -> Result: ...
    @abc.abstractmethod
    def LookupOrphanContent(self, outOrphaned: Span_1[bool], contentIds: ReadOnlySpan_1[ContentId]) -> Result: ...
    @abc.abstractmethod
    def Remove(self, key: ContentMetaKey) -> Result: ...
    @abc.abstractmethod
    def Set(self, key: ContentMetaKey, value: ReadOnlySpan_1[int]) -> Result: ...


class IContentStorage(typing.Protocol):
    @abc.abstractmethod
    def CleanupAllPlaceHolder(self) -> Result: ...
    @abc.abstractmethod
    def CreatePlaceHolder(self, placeHolderId: PlaceHolderId, contentId: ContentId, fileSize: int) -> Result: ...
    @abc.abstractmethod
    def Delete(self, contentId: ContentId) -> Result: ...
    @abc.abstractmethod
    def DeletePlaceHolder(self, placeHolderId: PlaceHolderId) -> Result: ...
    @abc.abstractmethod
    def DisableForcibly(self) -> Result: ...
    @abc.abstractmethod
    def FlushPlaceHolder(self) -> Result: ...
    @abc.abstractmethod
    def GeneratePlaceHolderId(self, placeHolderId: clr.Reference[PlaceHolderId]) -> Result: ...
    @abc.abstractmethod
    def GetContentCount(self, count: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def GetFreeSpaceSize(self, size: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def GetPath(self, outPath: Span_1[int], contentId: ContentId) -> Result: ...
    @abc.abstractmethod
    def GetPlaceHolderPath(self, outPath: Span_1[int], placeHolderId: PlaceHolderId) -> Result: ...
    @abc.abstractmethod
    def GetRightsIdFromContentId(self, rightsId: clr.Reference[RightsId], keyGeneration: clr.Reference[int], contentId: ContentId) -> Result: ...
    @abc.abstractmethod
    def GetRightsIdFromPlaceHolderId(self, rightsId: clr.Reference[RightsId], keyGeneration: clr.Reference[int], placeHolderId: PlaceHolderId) -> Result: ...
    @abc.abstractmethod
    def GetSizeFromContentId(self, size: clr.Reference[int], contentId: ContentId) -> Result: ...
    @abc.abstractmethod
    def GetTotalSpaceSize(self, size: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def Has(self, hasContent: clr.Reference[bool], contentId: ContentId) -> Result: ...
    @abc.abstractmethod
    def HasPlaceHolder(self, hasPlaceHolder: clr.Reference[bool], placeHolderId: PlaceHolderId) -> Result: ...
    @abc.abstractmethod
    def ListContentId(self, count: clr.Reference[int], contentIds: Span_1[ContentId], startOffset: int) -> Result: ...
    @abc.abstractmethod
    def ListPlaceHolder(self, count: clr.Reference[int], placeHolderIds: Span_1[PlaceHolderId]) -> Result: ...
    @abc.abstractmethod
    def ReadContentIdFile(self, buffer: Span_1[int], size: int, contentId: ContentId, offset: int) -> Result: ...
    @abc.abstractmethod
    def Register(self, placeHolderId: PlaceHolderId, contentId: ContentId) -> Result: ...
    @abc.abstractmethod
    def RevertToPlaceHolder(self, placeHolderId: PlaceHolderId, oldContentId: ContentId, newContentId: ContentId) -> Result: ...
    @abc.abstractmethod
    def SetPlaceHolderSize(self, placeHolderId: PlaceHolderId, size: int) -> Result: ...
    @abc.abstractmethod
    def WriteContentForDebug(self, contentId: ContentId, offset: int, buffer: ReadOnlySpan_1[int]) -> Result: ...
    @abc.abstractmethod
    def WritePlaceHolder(self, placeHolderId: PlaceHolderId, offset: int, buffer: ReadOnlySpan_1[int]) -> Result: ...


class LibraryAppletId:
    def __init__(self, value: int) -> None: ...
    Value : int
    @classmethod
    @property
    def Auth(cls) -> LibraryAppletId: ...
    @classmethod
    @property
    def Controller(cls) -> LibraryAppletId: ...
    @classmethod
    @property
    def Error(cls) -> LibraryAppletId: ...
    @classmethod
    @property
    def LoginShare(cls) -> LibraryAppletId: ...
    @classmethod
    @property
    def MyPage(cls) -> LibraryAppletId: ...
    @classmethod
    @property
    def OfflineWeb(cls) -> LibraryAppletId: ...
    @classmethod
    @property
    def PhotoViewer(cls) -> LibraryAppletId: ...
    @classmethod
    @property
    def PlayerSelect(cls) -> LibraryAppletId: ...
    @classmethod
    @property
    def Shop(cls) -> LibraryAppletId: ...
    @classmethod
    @property
    def Swkbd(cls) -> LibraryAppletId: ...
    @classmethod
    @property
    def Web(cls) -> LibraryAppletId: ...
    @classmethod
    @property
    def WifiWebAuth(cls) -> LibraryAppletId: ...
    # Operator not supported op_Implicit(id: LibraryAppletId)
    # Operator not supported op_Implicit(id: LibraryAppletId)
    # Skipped IsLibraryAppletId due to it being static, abstract and generic.

    IsLibraryAppletId : IsLibraryAppletId_MethodGroup
    class IsLibraryAppletId_MethodGroup:
        @typing.overload
        def __call__(self, id: LibraryAppletId) -> bool:...
        @typing.overload
        def __call__(self, programId: ProgramId) -> bool:...



class PatchId:
    def __init__(self, value: int) -> None: ...
    Value : int
    # Operator not supported op_Implicit(id: PatchId)


class PlaceHolderId(IComparable, IComparable_1[PlaceHolderId], IEquatable_1[PlaceHolderId]):
    @typing.overload
    def __init__(self, high: int, low: int) -> None: ...
    @typing.overload
    def __init__(self, uid: ReadOnlySpan_1[int]) -> None: ...
    Id : Id128
    def AsBytes(self) -> ReadOnlySpan_1[int]: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: PlaceHolderId, right: PlaceHolderId) -> bool: ...
    def __gt__(self, left: PlaceHolderId, right: PlaceHolderId) -> bool: ...
    def __ge__(self, left: PlaceHolderId, right: PlaceHolderId) -> bool: ...
    def __ne__(self, left: PlaceHolderId, right: PlaceHolderId) -> bool: ...
    def __lt__(self, left: PlaceHolderId, right: PlaceHolderId) -> bool: ...
    def __le__(self, left: PlaceHolderId, right: PlaceHolderId) -> bool: ...
    def ToBytes(self, output: Span_1[int]) -> None: ...
    def ToString(self) -> str: ...
    # Skipped CompareTo due to it being static, abstract and generic.

    CompareTo : CompareTo_MethodGroup
    class CompareTo_MethodGroup:
        @typing.overload
        def __call__(self, other: PlaceHolderId) -> int:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> int:...

    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: PlaceHolderId) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class ProgramId(IComparable_1[ProgramId], IEquatable_1[ProgramId]):
    def __init__(self, value: int) -> None: ...
    Value : int
    @classmethod
    @property
    def InvalidId(cls) -> ProgramId: ...
    def CompareTo(self, other: ProgramId) -> int: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: ProgramId, right: ProgramId) -> bool: ...
    def __gt__(self, left: ProgramId, right: ProgramId) -> bool: ...
    def __ge__(self, left: ProgramId, right: ProgramId) -> bool: ...
    def __ne__(self, left: ProgramId, right: ProgramId) -> bool: ...
    def __lt__(self, left: ProgramId, right: ProgramId) -> bool: ...
    def __le__(self, left: ProgramId, right: ProgramId) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: ProgramId) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class ProgramLocation:
    def __init__(self, programId: ProgramId, storageId: StorageId) -> None: ...
    ProgramId : ProgramId
    StorageId : StorageId


class ResultNcm(abc.ABC):
    ModuleNcm : int
    @classmethod
    @property
    def AllocationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def BufferInsufficient(cls) -> Result.Base: ...
    @classmethod
    @property
    def BuiltInSystemContentMetaDatabaseNotActive(cls) -> Result.Base: ...
    @classmethod
    @property
    def BuiltInSystemContentStorageNotActive(cls) -> Result.Base: ...
    @classmethod
    @property
    def BuiltInUserContentMetaDatabaseNotActive(cls) -> Result.Base: ...
    @classmethod
    @property
    def BuiltInUserContentStorageNotActive(cls) -> Result.Base: ...
    @classmethod
    @property
    def ContentAlreadyExists(cls) -> Result.Base: ...
    @classmethod
    @property
    def ContentInfoNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def ContentMetaDatabaseNotActive(cls) -> Result.Base: ...
    @classmethod
    @property
    def ContentMetaNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def ContentNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def ContentStorageBaseNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def ContentStorageNotActive(cls) -> Result.Base: ...
    @classmethod
    @property
    def CreatePlaceHolderCancelled(cls) -> Result.Base: ...
    @classmethod
    @property
    def DeltaNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardContentMetaDatabaseNotActive(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardContentStorageNotActive(cls) -> Result.Base: ...
    @classmethod
    @property
    def IgnorableInstallTicketFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def InstallTaskCancelled(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidArgument(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidContentHash(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidContentMetaDatabase(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidContentMetaKey(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidContentStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidContentStorageBase(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidFirmwareVariation(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidInstallTaskState(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidPackageFormat(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidPlaceHolderFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def ListPartiallyNotCommitted(cls) -> Result.Base: ...
    @classmethod
    @property
    def NotEnoughInstallSpace(cls) -> Result.Base: ...
    @classmethod
    @property
    def PlaceHolderAlreadyExists(cls) -> Result.Base: ...
    @classmethod
    @property
    def PlaceHolderNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def SdCardContentMetaDatabaseNotActive(cls) -> Result.Base: ...
    @classmethod
    @property
    def SdCardContentStorageNotActive(cls) -> Result.Base: ...
    @classmethod
    @property
    def SystemUpdateNotFoundInPackage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedContentMetaPrepared(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnknownContentMetaDatabaseNotActive(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnknownContentStorageNotActive(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnknownStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def WritePlaceHolderCancelled(cls) -> Result.Base: ...
    @classmethod
    @property
    def WriteToReadOnlyContentStorage(cls) -> Result.Base: ...


class StorageId(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : StorageId # 0
    Host : StorageId # 1
    GameCard : StorageId # 2
    BuiltInSystem : StorageId # 3
    BuiltInUser : StorageId # 4
    SdCard : StorageId # 5


class SystemAppletId:
    def __init__(self, value: int) -> None: ...
    Value : int
    @classmethod
    @property
    def Auth(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def Cabinet(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def Controller(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def DataErase(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def DummyShop(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def Encounter(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def End(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def Error(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def Gift(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def LoginShare(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def MaintenanceMenu(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def MiiEdit(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def MyPage(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def NetConnect(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def OfflineWeb(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def OverlayDisp(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def PhotoViewer(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def PlayerSelect(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def PlayReport(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def Qlaunch(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def Set(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def Shop(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def Start(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def Starter(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def Story(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def Swkbd(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def UserMigration(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def Web(cls) -> SystemAppletId: ...
    @classmethod
    @property
    def WifiWebAuth(cls) -> SystemAppletId: ...
    # Operator not supported op_Implicit(id: SystemAppletId)
    # Skipped IsSystemAppletId due to it being static, abstract and generic.

    IsSystemAppletId : IsSystemAppletId_MethodGroup
    class IsSystemAppletId_MethodGroup:
        @typing.overload
        def __call__(self, id: SystemAppletId) -> bool:...
        @typing.overload
        def __call__(self, programId: ProgramId) -> bool:...



class SystemApplicationId:
    def __init__(self, value: int) -> None: ...
    Value : int
    # Operator not supported op_Implicit(id: SystemApplicationId)


class SystemDataId:
    def __init__(self, value: int) -> None: ...
    Value : int
    @classmethod
    @property
    def ApplicationBlackList(cls) -> SystemDataId: ...
    @classmethod
    @property
    def AvatarImage(cls) -> SystemDataId: ...
    @classmethod
    @property
    def BootImagePackage(cls) -> SystemDataId: ...
    @classmethod
    @property
    def BootImagePackageExFat(cls) -> SystemDataId: ...
    @classmethod
    @property
    def BootImagePackageExFatSafe(cls) -> SystemDataId: ...
    @classmethod
    @property
    def BootImagePackageSafe(cls) -> SystemDataId: ...
    @classmethod
    @property
    def BrowserDll(cls) -> SystemDataId: ...
    @classmethod
    @property
    def CertStore(cls) -> SystemDataId: ...
    @classmethod
    @property
    def CertStoreCruiser(cls) -> SystemDataId: ...
    @classmethod
    @property
    def ContentActionTable(cls) -> SystemDataId: ...
    @classmethod
    @property
    def ControllerFirmware(cls) -> SystemDataId: ...
    @classmethod
    @property
    def ControllerIcon(cls) -> SystemDataId: ...
    @classmethod
    @property
    def Dictionary(cls) -> SystemDataId: ...
    @classmethod
    @property
    def End(cls) -> SystemDataId: ...
    @classmethod
    @property
    def ErrorMessage(cls) -> SystemDataId: ...
    @classmethod
    @property
    def Eula(cls) -> SystemDataId: ...
    @classmethod
    @property
    def FatalMessage(cls) -> SystemDataId: ...
    @classmethod
    @property
    def FirmwareDebugSettings(cls) -> SystemDataId: ...
    @classmethod
    @property
    def FontBfcpx(cls) -> SystemDataId: ...
    @classmethod
    @property
    def FontChineseSimple(cls) -> SystemDataId: ...
    @classmethod
    @property
    def FontChineseTraditional(cls) -> SystemDataId: ...
    @classmethod
    @property
    def FontKorean(cls) -> SystemDataId: ...
    @classmethod
    @property
    def FontNintendoExtension(cls) -> SystemDataId: ...
    @classmethod
    @property
    def FontStandard(cls) -> SystemDataId: ...
    @classmethod
    @property
    def Help(cls) -> SystemDataId: ...
    @classmethod
    @property
    def LocalNews(cls) -> SystemDataId: ...
    @classmethod
    @property
    def MiiModel(cls) -> SystemDataId: ...
    @classmethod
    @property
    def NgWord(cls) -> SystemDataId: ...
    @classmethod
    @property
    def NgWord2(cls) -> SystemDataId: ...
    @classmethod
    @property
    def PlatformConfigCopper(cls) -> SystemDataId: ...
    @classmethod
    @property
    def PlatformConfigHoag(cls) -> SystemDataId: ...
    @classmethod
    @property
    def PlatformConfigIcosa(cls) -> SystemDataId: ...
    @classmethod
    @property
    def PlatformConfigIcosaMariko(cls) -> SystemDataId: ...
    @classmethod
    @property
    def RebootlessSystemUpdateVersion(cls) -> SystemDataId: ...
    @classmethod
    @property
    def SharedFont(cls) -> SystemDataId: ...
    @classmethod
    @property
    def SsidList(cls) -> SystemDataId: ...
    @classmethod
    @property
    def Start(cls) -> SystemDataId: ...
    @classmethod
    @property
    def SystemUpdate(cls) -> SystemDataId: ...
    @classmethod
    @property
    def SystemVersion(cls) -> SystemDataId: ...
    @classmethod
    @property
    def TimeZoneBinar(cls) -> SystemDataId: ...
    @classmethod
    @property
    def UrlBlackList(cls) -> SystemDataId: ...
    # Operator not supported op_Implicit(id: SystemDataId)
    # Skipped IsSystemDataId due to it being static, abstract and generic.

    IsSystemDataId : IsSystemDataId_MethodGroup
    class IsSystemDataId_MethodGroup:
        @typing.overload
        def __call__(self, dataId: DataId) -> bool:...
        @typing.overload
        def __call__(self, id: SystemDataId) -> bool:...



class SystemDebugAppletId:
    def __init__(self, value: int) -> None: ...
    Value : int
    @classmethod
    @property
    def End(cls) -> SystemDebugAppletId: ...
    @classmethod
    @property
    def SnapShotDumper(cls) -> SystemDebugAppletId: ...
    @classmethod
    @property
    def Start(cls) -> SystemDebugAppletId: ...
    # Operator not supported op_Implicit(id: SystemDebugAppletId)
    # Skipped IsSystemDebugAppletId due to it being static, abstract and generic.

    IsSystemDebugAppletId : IsSystemDebugAppletId_MethodGroup
    class IsSystemDebugAppletId_MethodGroup:
        @typing.overload
        def __call__(self, id: SystemDebugAppletId) -> bool:...
        @typing.overload
        def __call__(self, programId: ProgramId) -> bool:...



class SystemProgramId:
    def __init__(self, value: int) -> None: ...
    Value : int
    @classmethod
    @property
    def Account(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Am(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Arp(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Audio(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Bcat(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Bluetooth(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Boot(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Boot2(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def BsdSockets(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Btm(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Bus(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def CapSrv(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Cec(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Creport(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Cs(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Dmnt(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Dt(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Eclct(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def End(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Erpt(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Es(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Eupld(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Fatal(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Friends(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Fs(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Glue(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Grc(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Hid(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Jit(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def JpegDec(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Lbl(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Ldn(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Loader(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def LogManager(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Migration(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Ncm(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Nd(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Nfc(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Ngct(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Nifm(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Nim(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Npns(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Ns(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def NvnFlinger(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def NvServices(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Olsc(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Pcie(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Pctl(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Pcv(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Pgl(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Pm(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Ppc(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Profiler(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Psc(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Ptm(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Ro(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def SafeMode(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Sdb(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Settings(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Shell(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Sm(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Spl(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Ssl(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Start(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Time(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Tma(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Tspm(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Usb(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Vi(cls) -> SystemProgramId: ...
    @classmethod
    @property
    def Wlan(cls) -> SystemProgramId: ...
    # Operator not supported op_Implicit(id: SystemProgramId)
    # Skipped IsSystemProgramId due to it being static, abstract and generic.

    IsSystemProgramId : IsSystemProgramId_MethodGroup
    class IsSystemProgramId_MethodGroup:
        @typing.overload
        def __call__(self, id: SystemProgramId) -> bool:...
        @typing.overload
        def __call__(self, programId: ProgramId) -> bool:...



class SystemUpdateId:
    def __init__(self, value: int) -> None: ...
    Value : int
    # Operator not supported op_Implicit(id: SystemUpdateId)


class UpdateType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ApplyAsDelta : UpdateType # 0
    Overwrite : UpdateType # 1
    Create : UpdateType # 2


class WebAppletId:
    def __init__(self, value: int) -> None: ...
    Value : int
    @classmethod
    @property
    def LoginShare(cls) -> WebAppletId: ...
    @classmethod
    @property
    def OfflineWeb(cls) -> WebAppletId: ...
    @classmethod
    @property
    def Shop(cls) -> WebAppletId: ...
    @classmethod
    @property
    def Web(cls) -> WebAppletId: ...
    @classmethod
    @property
    def WifiWebAuth(cls) -> WebAppletId: ...
    # Operator not supported op_Implicit(id: WebAppletId)
    # Operator not supported op_Implicit(id: WebAppletId)
    # Operator not supported op_Implicit(id: WebAppletId)
    # Skipped IsWebAppletId due to it being static, abstract and generic.

    IsWebAppletId : IsWebAppletId_MethodGroup
    class IsWebAppletId_MethodGroup:
        @typing.overload
        def __call__(self, id: WebAppletId) -> bool:...
        @typing.overload
        def __call__(self, programId: ProgramId) -> bool:...


