import typing
from System import IEquatable_1, IComparable_1
from LibHac import TimeSpan

class PosixTime(IEquatable_1[PosixTime], IComparable_1[PosixTime]):
    def __init__(self, value: int) -> None: ...
    Value : int
    def CompareTo(self, other: PosixTime) -> int: ...
    def GetHashCode(self) -> int: ...
    def __add__(self, left: PosixTime, right: TimeSpan) -> PosixTime: ...
    def __eq__(self, left: PosixTime, right: PosixTime) -> bool: ...
    def __gt__(self, left: PosixTime, right: PosixTime) -> bool: ...
    def __ge__(self, left: PosixTime, right: PosixTime) -> bool: ...
    def __ne__(self, left: PosixTime, right: PosixTime) -> bool: ...
    def __lt__(self, left: PosixTime, right: PosixTime) -> bool: ...
    def __le__(self, left: PosixTime, right: PosixTime) -> bool: ...
    @typing.overload
    def __sub__(self, left: PosixTime, right: TimeSpan) -> PosixTime: ...
    @typing.overload
    def __sub__(self, left: PosixTime, right: PosixTime) -> TimeSpan: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: PosixTime) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...


