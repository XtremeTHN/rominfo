import typing, clr, abc
from LibHac.Common import SharedRef_1, UniqueRef_1
from LibHac.Fs.Fsa import IFileSystem, IFile, IDirectory
from LibHac import Result, MemoryResource
from LibHac.Fs import BisPartitionId, GameCardPartition, IStorage, EncryptionSeed, Path, SaveDataSpaceId, OpenMode, IBufferManager, SaveDataExtraData
from LibHac.FsSrv import EmulatedGameCard, EmulatedSdCard, FileSystemServer
from System import IDisposable, Memory_1, ReadOnlySpan_1
from LibHac.Common.Keys import KeySet
from LibHac.Fat import FatAttribute, FatFormatParam, FatError, FatReportInfo
from LibHac.FsSystem import ISaveDataFileSystem, ISaveDataCommitTimeStampGetter, ISaveDataExtraDataAccessor, RandomDataGenerator, IResultConvertDirectory, IResultConvertFile, IResultConvertFileSystem_1, ISaveDataExtraDataAccessorObserver
from LibHac.Tools.FsSystem.NcaUtils import NcaFsHeader, Nca

class EmulatedBisFileSystemCreator(IBuiltInStorageFileSystemCreator):
    @typing.overload
    def __init__(self, config: EmulatedBisFileSystemCreatorConfig) -> None: ...
    @typing.overload
    def __init__(self, rootFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> None: ...
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], partitionId: BisPartitionId, caseSensitive: bool) -> Result: ...
    def SetBisRoot(self, partitionId: BisPartitionId, rootPath: str) -> Result: ...


class EmulatedBisFileSystemCreatorConfig:
    def __init__(self) -> None: ...
    def SetFileSystem(self, fileSystem: clr.Reference[UniqueRef_1[IFileSystem]], partitionId: BisPartitionId) -> Result: ...
    def SetPath(self, path: str, partitionId: BisPartitionId) -> Result: ...
    def SetRootFileSystem(self, fileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> Result: ...
    def TryGetFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], partitionId: BisPartitionId) -> bool: ...
    def TryGetPartitionPath(self, path: clr.Reference[str], partitionId: BisPartitionId) -> bool: ...
    def TryGetRootFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> bool: ...


class EmulatedGameCardFsCreator(IGameCardFileSystemCreator):
    def __init__(self, storageCreator: EmulatedGameCardStorageCreator, gameCard: EmulatedGameCard) -> None: ...
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], handle: int, partitionType: GameCardPartition) -> Result: ...


class EmulatedGameCardStorageCreator(IGameCardStorageCreator):
    def __init__(self, gameCard: EmulatedGameCard) -> None: ...
    def CreateReadOnly(self, handle: int, outStorage: clr.Reference[SharedRef_1[IStorage]]) -> Result: ...
    def CreateSecureReadOnly(self, handle: int, outStorage: clr.Reference[SharedRef_1[IStorage]]) -> Result: ...
    def CreateWriteOnly(self, handle: int, outStorage: clr.Reference[SharedRef_1[IStorage]]) -> Result: ...


class EmulatedSdCardFileSystemCreator(IDisposable, ISdCardProxyFileSystemCreator):
    @typing.overload
    def __init__(self, sdCard: EmulatedSdCard, rootFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> None: ...
    @typing.overload
    def __init__(self, sdCard: EmulatedSdCard, rootFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: str) -> None: ...
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], openCaseSensitive: bool) -> Result: ...
    def Dispose(self) -> None: ...
    # Skipped Format due to it being static, abstract and generic.

    Format : Format_MethodGroup
    class Format_MethodGroup:
        @typing.overload
        def __call__(self) -> Result:...
        @typing.overload
        def __call__(self, removeFromFatFsCache: bool) -> Result:...



class EncryptedFileSystemCreator(IEncryptedFileSystemCreator):
    def __init__(self, keySet: KeySet) -> None: ...
    def Create(self, outEncryptedFileSystem: clr.Reference[SharedRef_1[IFileSystem]], baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]], idIndex: IEncryptedFileSystemCreator.KeyId, encryptionSeed: clr.Reference[EncryptionSeed]) -> Result: ...


class FatFileSystemCreator(IFatFileSystemCreator):
    def __init__(self, allocator: MemoryResource) -> None: ...
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], baseStorage: clr.Reference[SharedRef_1[IStorage]], attribute: FatAttribute, driveId: int, invalidFatFormatResult: Result, usableSpaceNotEnoughResult: Result) -> Result: ...
    def Format(self, partitionStorage: clr.Reference[SharedRef_1[IStorage]], attribute: FatAttribute, formatParam: FatFormatParam, driveId: int, invalidFatFormatResult: Result, usableSpaceNotEnoughResult: Result) -> Result: ...
    def GetAndClearFatFsError(self, outFatError: clr.Reference[FatError]) -> None: ...
    def GetAndClearFatReportInfo(self, outBisSystemFatReportInfo: clr.Reference[FatReportInfo], outBisUserFatReportInfo: clr.Reference[FatReportInfo], outSdCardFatReportInfo: clr.Reference[FatReportInfo]) -> None: ...


class FileSystemCreatorInterfaces:
    def __init__(self) -> None: ...
    @property
    def BuiltInStorageCreator(self) -> IBuiltInStorageCreator: ...
    @BuiltInStorageCreator.setter
    def BuiltInStorageCreator(self, value: IBuiltInStorageCreator) -> IBuiltInStorageCreator: ...
    @property
    def BuiltInStorageFileSystemCreator(self) -> IBuiltInStorageFileSystemCreator: ...
    @BuiltInStorageFileSystemCreator.setter
    def BuiltInStorageFileSystemCreator(self, value: IBuiltInStorageFileSystemCreator) -> IBuiltInStorageFileSystemCreator: ...
    @property
    def EncryptedFileSystemCreator(self) -> IEncryptedFileSystemCreator: ...
    @EncryptedFileSystemCreator.setter
    def EncryptedFileSystemCreator(self, value: IEncryptedFileSystemCreator) -> IEncryptedFileSystemCreator: ...
    @property
    def FatFileSystemCreator(self) -> IFatFileSystemCreator: ...
    @FatFileSystemCreator.setter
    def FatFileSystemCreator(self, value: IFatFileSystemCreator) -> IFatFileSystemCreator: ...
    @property
    def GameCardFileSystemCreator(self) -> IGameCardFileSystemCreator: ...
    @GameCardFileSystemCreator.setter
    def GameCardFileSystemCreator(self, value: IGameCardFileSystemCreator) -> IGameCardFileSystemCreator: ...
    @property
    def GameCardStorageCreator(self) -> IGameCardStorageCreator: ...
    @GameCardStorageCreator.setter
    def GameCardStorageCreator(self, value: IGameCardStorageCreator) -> IGameCardStorageCreator: ...
    @property
    def LocalFileSystemCreator(self) -> ILocalFileSystemCreator: ...
    @LocalFileSystemCreator.setter
    def LocalFileSystemCreator(self, value: ILocalFileSystemCreator) -> ILocalFileSystemCreator: ...
    @property
    def MemoryStorageCreator(self) -> IMemoryStorageCreator: ...
    @MemoryStorageCreator.setter
    def MemoryStorageCreator(self, value: IMemoryStorageCreator) -> IMemoryStorageCreator: ...
    @property
    def PartitionFileSystemCreator(self) -> IPartitionFileSystemCreator: ...
    @PartitionFileSystemCreator.setter
    def PartitionFileSystemCreator(self, value: IPartitionFileSystemCreator) -> IPartitionFileSystemCreator: ...
    @property
    def RomFileSystemCreator(self) -> IRomFileSystemCreator: ...
    @RomFileSystemCreator.setter
    def RomFileSystemCreator(self, value: IRomFileSystemCreator) -> IRomFileSystemCreator: ...
    @property
    def SaveDataFileSystemCreator(self) -> ISaveDataFileSystemCreator: ...
    @SaveDataFileSystemCreator.setter
    def SaveDataFileSystemCreator(self, value: ISaveDataFileSystemCreator) -> ISaveDataFileSystemCreator: ...
    @property
    def SdCardFileSystemCreator(self) -> ISdCardProxyFileSystemCreator: ...
    @SdCardFileSystemCreator.setter
    def SdCardFileSystemCreator(self, value: ISdCardProxyFileSystemCreator) -> ISdCardProxyFileSystemCreator: ...
    @property
    def SdStorageCreator(self) -> ISdStorageCreator: ...
    @SdStorageCreator.setter
    def SdStorageCreator(self, value: ISdStorageCreator) -> ISdStorageCreator: ...
    @property
    def StorageOnNcaCreator(self) -> IStorageOnNcaCreator: ...
    @StorageOnNcaCreator.setter
    def StorageOnNcaCreator(self, value: IStorageOnNcaCreator) -> IStorageOnNcaCreator: ...
    @property
    def SubDirectoryFileSystemCreator(self) -> ISubDirectoryFileSystemCreator: ...
    @SubDirectoryFileSystemCreator.setter
    def SubDirectoryFileSystemCreator(self, value: ISubDirectoryFileSystemCreator) -> ISubDirectoryFileSystemCreator: ...
    @property
    def TargetManagerFileSystemCreator(self) -> ITargetManagerFileSystemCreator: ...
    @TargetManagerFileSystemCreator.setter
    def TargetManagerFileSystemCreator(self, value: ITargetManagerFileSystemCreator) -> ITargetManagerFileSystemCreator: ...


class IBuiltInStorageCreator(typing.Protocol):
    @abc.abstractmethod
    def Create(self, outStorage: clr.Reference[SharedRef_1[IStorage]], partitionId: BisPartitionId) -> Result: ...
    @abc.abstractmethod
    def InvalidateCache(self) -> Result: ...


class IBuiltInStorageFileSystemCreator(typing.Protocol):
    @abc.abstractmethod
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], partitionId: BisPartitionId, caseSensitive: bool) -> Result: ...


class IEncryptedFileSystemCreator(typing.Protocol):
    @abc.abstractmethod
    def Create(self, outEncryptedFileSystem: clr.Reference[SharedRef_1[IFileSystem]], baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]], idIndex: IEncryptedFileSystemCreator.KeyId, encryptionSeed: clr.Reference[EncryptionSeed]) -> Result: ...

    class KeyId(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Save : IEncryptedFileSystemCreator.KeyId # 0
        Content : IEncryptedFileSystemCreator.KeyId # 1
        CustomStorage : IEncryptedFileSystemCreator.KeyId # 2



class IFatFileSystemCreator(typing.Protocol):
    @abc.abstractmethod
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], baseStorage: clr.Reference[SharedRef_1[IStorage]], attribute: FatAttribute, driveId: int, invalidFatFormatResult: Result, usableSpaceNotEnoughResult: Result) -> Result: ...
    @abc.abstractmethod
    def Format(self, partitionStorage: clr.Reference[SharedRef_1[IStorage]], attribute: FatAttribute, formatParam: FatFormatParam, driveId: int, invalidFatFormatResult: Result, usableSpaceNotEnoughResult: Result) -> Result: ...


class IGameCardFileSystemCreator(typing.Protocol):
    @abc.abstractmethod
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], handle: int, partitionType: GameCardPartition) -> Result: ...


class IGameCardStorageCreator(typing.Protocol):
    @abc.abstractmethod
    def CreateReadOnly(self, handle: int, outStorage: clr.Reference[SharedRef_1[IStorage]]) -> Result: ...
    @abc.abstractmethod
    def CreateSecureReadOnly(self, handle: int, outStorage: clr.Reference[SharedRef_1[IStorage]]) -> Result: ...
    @abc.abstractmethod
    def CreateWriteOnly(self, handle: int, outStorage: clr.Reference[SharedRef_1[IStorage]]) -> Result: ...


class ILocalFileSystemCreator(typing.Protocol):
    @abc.abstractmethod
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], rootPath: clr.Reference[Path], openCaseSensitive: bool, ensureRootPathExists: bool, pathNotFoundResult: Result) -> Result: ...


class IMemoryStorageCreator(typing.Protocol):
    @abc.abstractmethod
    def Create(self, storage: clr.Reference[IStorage], buffer: clr.Reference[Memory_1[int]], storageId: int) -> Result: ...
    @abc.abstractmethod
    def RegisterBuffer(self, storageId: int, buffer: Memory_1[int]) -> Result: ...


class IPartitionFileSystemCreator(typing.Protocol):
    @abc.abstractmethod
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], baseStorage: clr.Reference[SharedRef_1[IStorage]]) -> Result: ...


class IRomFileSystemCreator(typing.Protocol):
    @abc.abstractmethod
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], romFsStorage: clr.Reference[SharedRef_1[IStorage]]) -> Result: ...


class ISaveDataFileSystemCreator(typing.Protocol):
    @abc.abstractmethod
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[ISaveDataFileSystem]], baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, saveDataId: int, allowDirectorySaveData: bool, isDeviceUniqueMac: bool, isJournalingSupported: bool, isMultiCommitSupported: bool, openReadOnly: bool, openShared: bool, timeStampGetter: ISaveDataCommitTimeStampGetter, isReconstructible: bool) -> Result: ...
    @abc.abstractmethod
    def CreateExtraDataAccessor(self, outExtraDataAccessor: clr.Reference[SharedRef_1[ISaveDataExtraDataAccessor]], baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> Result: ...
    @abc.abstractmethod
    def CreateFile(self, file: clr.Reference[IFile], sourceFileSystem: IFileSystem, saveDataId: int, openMode: OpenMode) -> Result: ...
    @abc.abstractmethod
    def IsDataEncrypted(self, isEncrypted: clr.Reference[bool], baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]], saveDataId: int, bufferManager: IBufferManager, isDeviceUniqueMac: bool, isReconstructible: bool) -> Result: ...
    @abc.abstractmethod
    def SetMacGenerationSeed(self, seed: ReadOnlySpan_1[int]) -> None: ...


class ISdCardProxyFileSystemCreator(typing.Protocol):
    @abc.abstractmethod
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], openCaseSensitive: bool) -> Result: ...
    # Skipped Format due to it being static, abstract and generic.

    Format : Format_MethodGroup
    class Format_MethodGroup:
        @typing.overload
        def __call__(self) -> Result:...
        @typing.overload
        def __call__(self, removeFromFatFsCache: bool) -> Result:...



class ISdStorageCreator(typing.Protocol):
    @abc.abstractmethod
    def Create(self, storage: clr.Reference[IStorage]) -> Result: ...


class IStorageOnNcaCreator(typing.Protocol):
    @abc.abstractmethod
    def Create(self, outStorage: clr.Reference[SharedRef_1[IStorage]], fsHeader: clr.Reference[NcaFsHeader], nca: Nca, fsIndex: int, isCodeFs: bool) -> Result: ...
    @abc.abstractmethod
    def CreateWithPatch(self, outStorage: clr.Reference[SharedRef_1[IStorage]], fsHeader: clr.Reference[NcaFsHeader], baseNca: Nca, patchNca: Nca, fsIndex: int, isCodeFs: bool) -> Result: ...
    @abc.abstractmethod
    def OpenNca(self, nca: clr.Reference[Nca], ncaStorage: IStorage) -> Result: ...
    @abc.abstractmethod
    def VerifyAcidSignature(self, codeFileSystem: IFileSystem, nca: Nca) -> Result: ...


class ISubDirectoryFileSystemCreator(typing.Protocol):
    @abc.abstractmethod
    def Create(self, outSubDirFileSystem: clr.Reference[SharedRef_1[IFileSystem]], baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[Path]) -> Result: ...


class ITargetManagerFileSystemCreator(typing.Protocol):
    @abc.abstractmethod
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], rootPath: clr.Reference[Path], openCaseSensitive: bool, ensureRootPathExists: bool, pathNotFoundResult: Result) -> Result: ...
    @abc.abstractmethod
    def NormalizeCaseOfPath(self, isSupported: clr.Reference[bool], path: clr.Reference[Path]) -> Result: ...


class PartitionFileSystemCreator(IPartitionFileSystemCreator):
    def __init__(self) -> None: ...
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], baseStorage: clr.Reference[SharedRef_1[IStorage]]) -> Result: ...


class RomFileSystemCreator(IRomFileSystemCreator):
    def __init__(self) -> None: ...
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], romFsStorage: clr.Reference[SharedRef_1[IStorage]]) -> Result: ...


class SaveDataFileSystemCreator(ISaveDataFileSystemCreator):
    def __init__(self, fsServer: FileSystemServer, keySet: KeySet, bufferManager: IBufferManager, randomGenerator: RandomDataGenerator) -> None: ...
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[ISaveDataFileSystem]], baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, saveDataId: int, allowDirectorySaveData: bool, isDeviceUniqueMac: bool, isJournalingSupported: bool, isMultiCommitSupported: bool, openReadOnly: bool, openShared: bool, timeStampGetter: ISaveDataCommitTimeStampGetter, isReconstructible: bool) -> Result: ...
    def CreateExtraDataAccessor(self, outExtraDataAccessor: clr.Reference[SharedRef_1[ISaveDataExtraDataAccessor]], baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> Result: ...
    def CreateFile(self, file: clr.Reference[IFile], sourceFileSystem: IFileSystem, saveDataId: int, openMode: OpenMode) -> Result: ...
    def IsDataEncrypted(self, isEncrypted: clr.Reference[bool], baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]], saveDataId: int, bufferManager: IBufferManager, isDeviceUniqueMac: bool, isReconstructible: bool) -> Result: ...
    def SetMacGenerationSeed(self, seed: ReadOnlySpan_1[int]) -> None: ...


class SaveDataResultConvertDirectory(IResultConvertDirectory):
    def __init__(self, baseDirectory: clr.Reference[UniqueRef_1[IDirectory]], isReconstructible: bool) -> None: ...


class SaveDataResultConverter(abc.ABC):
    @staticmethod
    def ConvertSaveDataFsResult(result: Result, isReconstructible: bool) -> Result: ...


class SaveDataResultConvertFile(IResultConvertFile):
    def __init__(self, baseFile: clr.Reference[UniqueRef_1[IFile]], isReconstructible: bool) -> None: ...


class SaveDataResultConvertFileSystem(IResultConvertFileSystem_1[ISaveDataFileSystem]):
    def __init__(self, baseFileSystem: clr.Reference[SharedRef_1[ISaveDataFileSystem]], isReconstructible: bool) -> None: ...
    def CommitExtraData(self, updateTimeStamp: bool) -> Result: ...
    def IsSaveDataFileSystemCacheEnabled(self) -> bool: ...
    def ReadExtraData(self, extraData: clr.Reference[SaveDataExtraData]) -> Result: ...
    def RegisterExtraDataAccessorObserver(self, observer: ISaveDataExtraDataAccessorObserver, spaceId: SaveDataSpaceId, saveDataId: int) -> None: ...
    def RollbackOnlyModified(self) -> Result: ...
    def WriteExtraData(self, extraData: clr.Reference[SaveDataExtraData]) -> Result: ...


class StorageOnNcaCreator(IStorageOnNcaCreator):
    def __init__(self, keySet: KeySet) -> None: ...
    def Create(self, outStorage: clr.Reference[SharedRef_1[IStorage]], fsHeader: clr.Reference[NcaFsHeader], nca: Nca, fsIndex: int, isCodeFs: bool) -> Result: ...
    def CreateWithPatch(self, outStorage: clr.Reference[SharedRef_1[IStorage]], fsHeader: clr.Reference[NcaFsHeader], baseNca: Nca, patchNca: Nca, fsIndex: int, isCodeFs: bool) -> Result: ...
    def OpenNca(self, nca: clr.Reference[Nca], ncaStorage: IStorage) -> Result: ...
    def VerifyAcidSignature(self, codeFileSystem: IFileSystem, nca: Nca) -> Result: ...


class SubDirectoryFileSystemCreator(ISubDirectoryFileSystemCreator):
    def __init__(self) -> None: ...
    def Create(self, outSubDirFileSystem: clr.Reference[SharedRef_1[IFileSystem]], baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[Path]) -> Result: ...


class TargetManagerFileSystemCreator(ITargetManagerFileSystemCreator):
    def __init__(self) -> None: ...
    def Create(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], rootPath: clr.Reference[Path], openCaseSensitive: bool, ensureRootPathExists: bool, pathNotFoundResult: Result) -> Result: ...
    def NormalizeCaseOfPath(self, isSupported: clr.Reference[bool], path: clr.Reference[Path]) -> Result: ...

