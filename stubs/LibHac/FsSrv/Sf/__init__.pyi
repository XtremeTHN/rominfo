import typing, clr, abc
import LibHac.Fs.Fsa
from System import ReadOnlySpan_1, IDisposable
from LibHac import Result
from LibHac.Sf import OutBuffer, InBuffer, NativeHandle
from LibHac.Fs import StorageErrorInfo, GameCardErrorInfo, GameCardErrorReportInfo, QueryRangeInfo, ReadOption, WriteOption, FileTimeStampRaw, SaveDataSpaceId, SaveDataAttribute, SaveDataCreationInfo, SaveDataMetaInfo, SaveDataCreationInfo2, HashSalt, SaveDataFilter, BaseFileSystemId, FileSystemProxyErrorInfo, MemoryReportInfo, FsStackUsageThreadType, GlobalAccessLogMode, RightsId, BisPartitionId, CloudBackupWorkStorageId, ContentStorageId, CustomStorageId, FileSystemProxyType, GameCardPartition, GameCardPartitionRaw, MountHostOption, ImageDirectoryId, SaveDataMetaType, ApplicationInfo, EncryptionSeed, SdmmcPort, SimulatingDeviceDetectionMode, CodeVerificationData, SaveDataInfo, UserId, RsaEncryptedKey, AesKey
from LibHac.Common import SharedRef_1
from LibHac.Ncm import ProgramId, StorageId, DataId, ApplicationId
from LibHac.Spl import AccessKey
from LibHac.Fs.Impl import InitialDataAad, InitialDataMac, KeySeed, ExportReportInfo, ImportReportInfo

class FspPath:
    @property
    def Str(self) -> ReadOnlySpan_1[int]: ...
    @staticmethod
    def CreateEmpty(fspPath: clr.Reference[FspPath]) -> None: ...
    @staticmethod
    def FromSpan(fspPath: clr.Reference[FspPath], path: ReadOnlySpan_1[int]) -> Result: ...
    # Operator not supported op_Implicit(value: FspPath&)
    def ToString(self) -> str: ...


class IDeviceOperator(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def ChallengeCardExistence(self, outResponseBuffer: OutBuffer, challengeSeedBuffer: InBuffer, challengeValueBuffer: InBuffer, handle: int) -> Result: ...
    @abc.abstractmethod
    def ClearDeviceSimulationEvent(self, port: int) -> Result: ...
    @abc.abstractmethod
    def EraseAndWriteParamDirectly(self, inBuffer: InBuffer, inBufferSize: int) -> Result: ...
    @abc.abstractmethod
    def EraseGameCard(self, gameCardSize: int, romAreaStartPageAddress: int) -> Result: ...
    @abc.abstractmethod
    def EraseMmc(self, partitionId: int) -> Result: ...
    @abc.abstractmethod
    def FinalizeGameCardDriver(self) -> Result: ...
    @abc.abstractmethod
    def ForceEraseGameCard(self) -> Result: ...
    @abc.abstractmethod
    def GetAndClearMmcErrorInfo(self, outStorageErrorInfo: clr.Reference[StorageErrorInfo], outLogSize: clr.Reference[int], logBuffer: OutBuffer, logBufferSize: int) -> Result: ...
    @abc.abstractmethod
    def GetAndClearSdCardErrorInfo(self, outStorageErrorInfo: clr.Reference[StorageErrorInfo], outLogSize: clr.Reference[int], logBuffer: OutBuffer, logBufferSize: int) -> Result: ...
    @abc.abstractmethod
    def GetGameCardAsicInfo(self, outRmaInfoBuffer: OutBuffer, rmaInfoBufferSize: int, asicFirmwareBuffer: InBuffer, asicFirmwareBufferSize: int) -> Result: ...
    @abc.abstractmethod
    def GetGameCardAttribute(self, outAttribute: clr.Reference[int], handle: int) -> Result: ...
    @abc.abstractmethod
    def GetGameCardCompatibilityType(self, outCompatibilityType: clr.Reference[int], handle: int) -> Result: ...
    @abc.abstractmethod
    def GetGameCardDeviceCertificate(self, outBuffer: OutBuffer, outBufferSize: int, handle: int) -> Result: ...
    @abc.abstractmethod
    def GetGameCardDeviceId(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    @abc.abstractmethod
    def GetGameCardDeviceIdForProdCard(self, outBuffer: OutBuffer, outBufferSize: int, devHeaderBuffer: InBuffer, devHeaderBufferSize: int) -> Result: ...
    @abc.abstractmethod
    def GetGameCardErrorInfo(self, outErrorInfo: clr.Reference[GameCardErrorInfo]) -> Result: ...
    @abc.abstractmethod
    def GetGameCardErrorReportInfo(self, outErrorInfo: clr.Reference[GameCardErrorReportInfo]) -> Result: ...
    @abc.abstractmethod
    def GetGameCardHandle(self, outHandle: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def GetGameCardIdSet(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    @abc.abstractmethod
    def GetGameCardImageHash(self, outBuffer: OutBuffer, outBufferSize: int, handle: int) -> Result: ...
    @abc.abstractmethod
    def GetGameCardUpdatePartitionInfo(self, outCupVersion: clr.Reference[int], outCupId: clr.Reference[int], handle: int) -> Result: ...
    @abc.abstractmethod
    def GetMmcCid(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    @abc.abstractmethod
    def GetMmcExtendedCsd(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    @abc.abstractmethod
    def GetMmcPartitionSize(self, outSize: clr.Reference[int], partitionId: int) -> Result: ...
    @abc.abstractmethod
    def GetMmcPatrolCount(self, outCount: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def GetMmcSpeedMode(self, outSpeedMode: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def GetSdCardCid(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    @abc.abstractmethod
    def GetSdCardProtectedAreaSize(self, outSize: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def GetSdCardSpeedMode(self, outSpeedMode: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def GetSdCardUserAreaSize(self, outSize: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def GetSdmmcConnectionStatus(self, outSpeedMode: clr.Reference[int], outBusWidth: clr.Reference[int], port: int) -> Result: ...
    @abc.abstractmethod
    def GetSpeedEmulationMode(self, outMode: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def IsGameCardInserted(self, outIsInserted: clr.Reference[bool]) -> Result: ...
    @abc.abstractmethod
    def IsSdCardInserted(self, outIsInserted: clr.Reference[bool]) -> Result: ...
    @abc.abstractmethod
    def ReadParamDirectly(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    @abc.abstractmethod
    def ResumeMmcPatrol(self) -> Result: ...
    @abc.abstractmethod
    def ResumeSdmmcControl(self) -> Result: ...
    @abc.abstractmethod
    def SetDeviceSimulationEvent(self, port: int, simulatedOperationType: int, simulatedFailureType: int, failureResult: int, autoClearEvent: bool) -> Result: ...
    @abc.abstractmethod
    def SetSpeedEmulationMode(self, mode: int) -> Result: ...
    @abc.abstractmethod
    def SetVerifyWriteEnableFlag(self, isEnabled: bool) -> Result: ...
    @abc.abstractmethod
    def SuspendMmcPatrol(self) -> Result: ...
    @abc.abstractmethod
    def SuspendSdmmcControl(self) -> Result: ...
    @abc.abstractmethod
    def WriteToGameCardDirectly(self, offset: int, buffer: OutBuffer, bufferSize: int) -> Result: ...


class IDirectory(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def GetEntryCount(self, entryCount: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def Read(self, entriesRead: clr.Reference[int], entryBuffer: OutBuffer) -> Result: ...


class IEventNotifier(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def GetEventHandle(self, handle: clr.Reference[NativeHandle]) -> Result: ...


class IFile(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def Flush(self) -> Result: ...
    @abc.abstractmethod
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def OperateRange(self, rangeInfo: clr.Reference[QueryRangeInfo], operationId: int, offset: int, size: int) -> Result: ...
    @abc.abstractmethod
    def OperateRangeWithBuffer(self, outBuffer: OutBuffer, inBuffer: InBuffer, operationId: int, offset: int, size: int) -> Result: ...
    @abc.abstractmethod
    def Read(self, bytesRead: clr.Reference[int], offset: int, destination: OutBuffer, size: int, option: ReadOption) -> Result: ...
    @abc.abstractmethod
    def SetSize(self, size: int) -> Result: ...
    @abc.abstractmethod
    def Write(self, offset: int, source: InBuffer, size: int, option: WriteOption) -> Result: ...


class IFileSystem(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def CleanDirectoryRecursively(self, path: clr.Reference[Path]) -> Result: ...
    @abc.abstractmethod
    def Commit(self) -> Result: ...
    @abc.abstractmethod
    def CreateDirectory(self, path: clr.Reference[Path]) -> Result: ...
    @abc.abstractmethod
    def CreateFile(self, path: clr.Reference[Path], size: int, option: int) -> Result: ...
    @abc.abstractmethod
    def DeleteDirectory(self, path: clr.Reference[Path]) -> Result: ...
    @abc.abstractmethod
    def DeleteDirectoryRecursively(self, path: clr.Reference[Path]) -> Result: ...
    @abc.abstractmethod
    def DeleteFile(self, path: clr.Reference[Path]) -> Result: ...
    @abc.abstractmethod
    def GetEntryType(self, entryType: clr.Reference[int], path: clr.Reference[Path]) -> Result: ...
    @abc.abstractmethod
    def GetFileTimeStampRaw(self, timeStamp: clr.Reference[FileTimeStampRaw], path: clr.Reference[Path]) -> Result: ...
    @abc.abstractmethod
    def GetFreeSpaceSize(self, freeSpace: clr.Reference[int], path: clr.Reference[Path]) -> Result: ...
    @abc.abstractmethod
    def GetImpl(self, fileSystem: clr.Reference[SharedRef_1[LibHac.Fs.Fsa.IFileSystem]]) -> Result: ...
    @abc.abstractmethod
    def GetTotalSpaceSize(self, totalSpace: clr.Reference[int], path: clr.Reference[Path]) -> Result: ...
    @abc.abstractmethod
    def OpenDirectory(self, outDirectory: clr.Reference[SharedRef_1[IDirectory]], path: clr.Reference[Path], mode: int) -> Result: ...
    @abc.abstractmethod
    def OpenFile(self, outFile: clr.Reference[SharedRef_1[IFile]], path: clr.Reference[Path], mode: int) -> Result: ...
    @abc.abstractmethod
    def QueryEntry(self, outBuffer: OutBuffer, inBuffer: InBuffer, queryId: int, path: clr.Reference[Path]) -> Result: ...
    @abc.abstractmethod
    def RenameDirectory(self, currentPath: clr.Reference[Path], newPath: clr.Reference[Path]) -> Result: ...
    @abc.abstractmethod
    def RenameFile(self, currentPath: clr.Reference[Path], newPath: clr.Reference[Path]) -> Result: ...


class IFileSystemProxy(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def AbandonAccessFailure(self, processId: int) -> Result: ...
    @abc.abstractmethod
    def CorruptSaveDataFileSystem(self, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def CorruptSaveDataFileSystemByOffset(self, spaceId: SaveDataSpaceId, saveDataId: int, offset: int) -> Result: ...
    @abc.abstractmethod
    def CorruptSaveDataFileSystemBySaveDataSpaceId(self, spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def CreatePaddingFile(self, size: int) -> Result: ...
    @abc.abstractmethod
    def CreateSaveDataFileSystem(self, attribute: clr.Reference[SaveDataAttribute], creationInfo: clr.Reference[SaveDataCreationInfo], metaInfo: clr.Reference[SaveDataMetaInfo]) -> Result: ...
    @abc.abstractmethod
    def CreateSaveDataFileSystemBySystemSaveDataId(self, attribute: clr.Reference[SaveDataAttribute], creationInfo: clr.Reference[SaveDataCreationInfo]) -> Result: ...
    @abc.abstractmethod
    def CreateSaveDataFileSystemWithCreationInfo2(self, creationInfo: clr.Reference[SaveDataCreationInfo2]) -> Result: ...
    @abc.abstractmethod
    def CreateSaveDataFileSystemWithHashSalt(self, attribute: clr.Reference[SaveDataAttribute], creationInfo: clr.Reference[SaveDataCreationInfo], metaInfo: clr.Reference[SaveDataMetaInfo], hashSalt: clr.Reference[HashSalt]) -> Result: ...
    @abc.abstractmethod
    def DeleteAllPaddingFiles(self) -> Result: ...
    @abc.abstractmethod
    def DeleteCacheStorage(self, index: int) -> Result: ...
    @abc.abstractmethod
    def DeleteSaveDataFileSystem(self, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def DeleteSaveDataFileSystemBySaveDataAttribute(self, spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute]) -> Result: ...
    @abc.abstractmethod
    def DeleteSaveDataFileSystemBySaveDataSpaceId(self, spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def DisableAutoSaveDataCreation(self) -> Result: ...
    @abc.abstractmethod
    def ExtendSaveDataFileSystem(self, spaceId: SaveDataSpaceId, saveDataId: int, dataSize: int, journalSize: int) -> Result: ...
    @abc.abstractmethod
    def FindSaveDataWithFilter(self, count: clr.Reference[int], saveDataInfoBuffer: OutBuffer, spaceId: SaveDataSpaceId, filter: clr.Reference[SaveDataFilter]) -> Result: ...
    @abc.abstractmethod
    def FlushAccessLogOnSdCard(self) -> Result: ...
    @abc.abstractmethod
    def FormatBaseFileSystem(self, fileSystemId: BaseFileSystemId) -> Result: ...
    @abc.abstractmethod
    def FormatSdCardDryRun(self) -> Result: ...
    @abc.abstractmethod
    def FormatSdCardFileSystem(self) -> Result: ...
    @abc.abstractmethod
    def GetAccessFailureDetectionEvent(self, eventHandle: clr.Reference[NativeHandle]) -> Result: ...
    @abc.abstractmethod
    def GetAndClearErrorInfo(self, errorInfo: clr.Reference[FileSystemProxyErrorInfo]) -> Result: ...
    @abc.abstractmethod
    def GetAndClearMemoryReportInfo(self, reportInfo: clr.Reference[MemoryReportInfo]) -> Result: ...
    @abc.abstractmethod
    def GetCacheStorageSize(self, dataSize: clr.Reference[int], journalSize: clr.Reference[int], index: int) -> Result: ...
    @abc.abstractmethod
    def GetFreeSpaceSizeForSaveData(self, freeSpaceSize: clr.Reference[int], spaceId: SaveDataSpaceId) -> Result: ...
    @abc.abstractmethod
    def GetFsStackUsage(self, stackUsage: clr.Reference[int], threadType: FsStackUsageThreadType) -> Result: ...
    @abc.abstractmethod
    def GetGlobalAccessLogMode(self, mode: clr.Reference[GlobalAccessLogMode]) -> Result: ...
    @abc.abstractmethod
    def GetProgramIndexForAccessLog(self, programIndex: clr.Reference[int], programCount: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def GetRightsId(self, rightsId: clr.Reference[RightsId], programId: ProgramId, storageId: StorageId) -> Result: ...
    @abc.abstractmethod
    def GetRightsIdAndKeyGenerationByPath(self, rightsId: clr.Reference[RightsId], keyGeneration: clr.Reference[int], path: clr.Reference[FspPath]) -> Result: ...
    @abc.abstractmethod
    def GetRightsIdByPath(self, rightsId: clr.Reference[RightsId], path: clr.Reference[FspPath]) -> Result: ...
    @abc.abstractmethod
    def GetSaveDataCommitId(self, commitId: clr.Reference[int], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def InvalidateBisCache(self) -> Result: ...
    @abc.abstractmethod
    def IsAccessFailureDetected(self, isDetected: clr.Reference[bool], processId: int) -> Result: ...
    @abc.abstractmethod
    def IsExFatSupported(self, isSupported: clr.Reference[bool]) -> Result: ...
    @abc.abstractmethod
    def IsSdCardAccessible(self, isAccessible: clr.Reference[bool]) -> Result: ...
    @abc.abstractmethod
    def ListAccessibleSaveDataOwnerId(self, readCount: clr.Reference[int], idBuffer: OutBuffer, programId: ProgramId, startIndex: int, bufferIdCount: int) -> Result: ...
    @abc.abstractmethod
    def NotifySystemDataUpdateEvent(self) -> Result: ...
    @abc.abstractmethod
    def OpenAccessFailureDetectionEventNotifier(self, outEventNotifier: clr.Reference[SharedRef_1[IEventNotifier]], processId: int, notifyOnDeepRetry: bool) -> Result: ...
    @abc.abstractmethod
    def OpenBaseFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], fileSystemId: BaseFileSystemId) -> Result: ...
    @abc.abstractmethod
    def OpenBisFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], rootPath: clr.Reference[FspPath], partitionId: BisPartitionId) -> Result: ...
    @abc.abstractmethod
    def OpenBisStorage(self, outStorage: clr.Reference[SharedRef_1[IStorage]], partitionId: BisPartitionId) -> Result: ...
    @abc.abstractmethod
    def OpenBisWiper(self, outBisWiper: clr.Reference[SharedRef_1[IWiper]], transferMemoryHandle: NativeHandle, transferMemorySize: int) -> Result: ...
    @abc.abstractmethod
    def OpenCloudBackupWorkStorageFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], storageId: CloudBackupWorkStorageId) -> Result: ...
    @abc.abstractmethod
    def OpenContentStorageFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], storageId: ContentStorageId) -> Result: ...
    @abc.abstractmethod
    def OpenCustomStorageFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], storageId: CustomStorageId) -> Result: ...
    @abc.abstractmethod
    def OpenDataFileSystemByCurrentProcess(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> Result: ...
    @abc.abstractmethod
    def OpenDataFileSystemByProgramId(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], programId: ProgramId) -> Result: ...
    @abc.abstractmethod
    def OpenDataFileSystemWithProgramIndex(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], programIndex: int) -> Result: ...
    @abc.abstractmethod
    def OpenDataStorageByCurrentProcess(self, outStorage: clr.Reference[SharedRef_1[IStorage]]) -> Result: ...
    @abc.abstractmethod
    def OpenDataStorageByDataId(self, outStorage: clr.Reference[SharedRef_1[IStorage]], dataId: DataId, storageId: StorageId) -> Result: ...
    @abc.abstractmethod
    def OpenDataStorageByPath(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[FspPath], fsType: FileSystemProxyType) -> Result: ...
    @abc.abstractmethod
    def OpenDataStorageByProgramId(self, outStorage: clr.Reference[SharedRef_1[IStorage]], programId: ProgramId) -> Result: ...
    @abc.abstractmethod
    def OpenDataStorageWithProgramIndex(self, outStorage: clr.Reference[SharedRef_1[IStorage]], programIndex: int) -> Result: ...
    @abc.abstractmethod
    def OpenDeviceOperator(self, outDeviceOperator: clr.Reference[SharedRef_1[IDeviceOperator]]) -> Result: ...
    @abc.abstractmethod
    def OpenFileSystemWithId(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[FspPath], id: int, fsType: FileSystemProxyType) -> Result: ...
    @abc.abstractmethod
    def OpenFileSystemWithPatch(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], programId: ProgramId, fsType: FileSystemProxyType) -> Result: ...
    @abc.abstractmethod
    def OpenGameCardDetectionEventNotifier(self, outEventNotifier: clr.Reference[SharedRef_1[IEventNotifier]]) -> Result: ...
    @abc.abstractmethod
    def OpenGameCardFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], handle: int, partitionId: GameCardPartition) -> Result: ...
    @abc.abstractmethod
    def OpenGameCardStorage(self, outStorage: clr.Reference[SharedRef_1[IStorage]], handle: int, partitionId: GameCardPartitionRaw) -> Result: ...
    @abc.abstractmethod
    def OpenHostFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[FspPath]) -> Result: ...
    @abc.abstractmethod
    def OpenHostFileSystemWithOption(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[FspPath], option: MountHostOption) -> Result: ...
    @abc.abstractmethod
    def OpenImageDirectoryFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], directoryId: ImageDirectoryId) -> Result: ...
    @abc.abstractmethod
    def OpenMultiCommitManager(self, outCommitManager: clr.Reference[SharedRef_1[IMultiCommitManager]]) -> Result: ...
    @abc.abstractmethod
    def OpenPatchDataStorageByCurrentProcess(self, outStorage: clr.Reference[SharedRef_1[IStorage]]) -> Result: ...
    @abc.abstractmethod
    def OpenReadOnlySaveDataFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute]) -> Result: ...
    @abc.abstractmethod
    def OpenRegisteredUpdatePartition(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute]) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataFileSystemBySystemSaveDataId(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute]) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataInfoReader(self, outInfoReader: clr.Reference[SharedRef_1[ISaveDataInfoReader]]) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataInfoReaderBySaveDataSpaceId(self, outInfoReader: clr.Reference[SharedRef_1[ISaveDataInfoReader]], spaceId: SaveDataSpaceId) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataInfoReaderOnlyCacheStorage(self, outInfoReader: clr.Reference[SharedRef_1[ISaveDataInfoReader]]) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataInfoReaderWithFilter(self, outInfoReader: clr.Reference[SharedRef_1[ISaveDataInfoReader]], spaceId: SaveDataSpaceId, filter: clr.Reference[SaveDataFilter]) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataInternalStorageFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataMetaFile(self, outFile: clr.Reference[SharedRef_1[IFile]], spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute], type: SaveDataMetaType) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataMover(self, outSaveDataMover: clr.Reference[SharedRef_1[ISaveDataMover]], sourceSpaceId: SaveDataSpaceId, destinationSpaceId: SaveDataSpaceId, workBufferHandle: NativeHandle, workBufferSize: int) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataTransferManager(self, outTransferManager: clr.Reference[SharedRef_1[ISaveDataTransferManager]]) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataTransferManagerForRepair(self, outTransferManager: clr.Reference[SharedRef_1[ISaveDataTransferManagerForRepair]]) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataTransferManagerForSaveDataRepair(self, outTransferManager: clr.Reference[SharedRef_1[ISaveDataTransferManagerForSaveDataRepair]]) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataTransferManagerVersion2(self, outTransferManager: clr.Reference[SharedRef_1[ISaveDataTransferManagerWithDivision]]) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataTransferProhibiter(self, outProhibiter: clr.Reference[SharedRef_1[ISaveDataTransferProhibiter]], applicationId: ApplicationId) -> Result: ...
    @abc.abstractmethod
    def OpenSdCardDetectionEventNotifier(self, outEventNotifier: clr.Reference[SharedRef_1[IEventNotifier]]) -> Result: ...
    @abc.abstractmethod
    def OpenSdCardFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> Result: ...
    @abc.abstractmethod
    def OpenSystemDataUpdateEventNotifier(self, outEventNotifier: clr.Reference[SharedRef_1[IEventNotifier]]) -> Result: ...
    @abc.abstractmethod
    def OutputAccessLogToSdCard(self, textBuffer: InBuffer) -> Result: ...
    @abc.abstractmethod
    def OutputApplicationInfoAccessLog(self, applicationInfo: clr.Reference[ApplicationInfo]) -> Result: ...
    @abc.abstractmethod
    def OutputMultiProgramTagAccessLog(self) -> Result: ...
    @abc.abstractmethod
    def OverrideSaveDataTransferTokenSignVerificationKey(self, key: InBuffer) -> Result: ...
    @abc.abstractmethod
    def QuerySaveDataInternalStorageTotalSize(self, size: clr.Reference[int], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def QuerySaveDataTotalSize(self, totalSize: clr.Reference[int], dataSize: int, journalSize: int) -> Result: ...
    @abc.abstractmethod
    def ReadSaveDataFileSystemExtraData(self, extraDataBuffer: OutBuffer, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def ReadSaveDataFileSystemExtraDataBySaveDataAttribute(self, extraDataBuffer: OutBuffer, spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute]) -> Result: ...
    @abc.abstractmethod
    def ReadSaveDataFileSystemExtraDataBySaveDataSpaceId(self, extraDataBuffer: OutBuffer, spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def ReadSaveDataFileSystemExtraDataWithMaskBySaveDataAttribute(self, extraDataBuffer: OutBuffer, spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute], maskBuffer: InBuffer) -> Result: ...
    @abc.abstractmethod
    def RegisterDebugConfiguration(self, key: int, value: int) -> Result: ...
    @abc.abstractmethod
    def RegisterExternalKey(self, rightsId: clr.Reference[RightsId], externalKey: clr.Reference[AccessKey]) -> Result: ...
    @abc.abstractmethod
    def RegisterProgramIndexMapInfo(self, programIndexMapInfoBuffer: InBuffer, programCount: int) -> Result: ...
    @abc.abstractmethod
    def RegisterSaveDataFileSystemAtomicDeletion(self, saveDataIds: InBuffer) -> Result: ...
    @abc.abstractmethod
    def RegisterUpdatePartition(self) -> Result: ...
    @abc.abstractmethod
    def ResolveAccessFailure(self, processId: int) -> Result: ...
    @abc.abstractmethod
    def SetBisRootForHost(self, partitionId: BisPartitionId, path: clr.Reference[FspPath]) -> Result: ...
    @abc.abstractmethod
    def SetCurrentPosixTimeWithTimeDifference(self, currentTime: int, timeDifference: int) -> Result: ...
    @abc.abstractmethod
    def SetCurrentProcess(self, processId: int) -> Result: ...
    @abc.abstractmethod
    def SetGlobalAccessLogMode(self, mode: GlobalAccessLogMode) -> Result: ...
    @abc.abstractmethod
    def SetSaveDataRootPath(self, path: clr.Reference[FspPath]) -> Result: ...
    @abc.abstractmethod
    def SetSaveDataSize(self, saveDataSize: int, saveDataJournalSize: int) -> Result: ...
    @abc.abstractmethod
    def SetSdCardAccessibility(self, isAccessible: bool) -> Result: ...
    @abc.abstractmethod
    def SetSdCardEncryptionSeed(self, seed: clr.Reference[EncryptionSeed]) -> Result: ...
    @abc.abstractmethod
    def SimulateDeviceDetectionEvent(self, port: SdmmcPort, mode: SimulatingDeviceDetectionMode, signalEvent: bool) -> Result: ...
    @abc.abstractmethod
    def UnregisterAllExternalKey(self) -> Result: ...
    @abc.abstractmethod
    def UnregisterDebugConfiguration(self, key: int) -> Result: ...
    @abc.abstractmethod
    def UnregisterExternalKey(self, rightsId: clr.Reference[RightsId]) -> Result: ...
    @abc.abstractmethod
    def UnsetSaveDataRootPath(self) -> Result: ...
    @abc.abstractmethod
    def UpdateSaveDataMacForDebug(self, spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def VerifySaveDataFileSystem(self, saveDataId: int, readBuffer: OutBuffer) -> Result: ...
    @abc.abstractmethod
    def VerifySaveDataFileSystemBySaveDataSpaceId(self, spaceId: SaveDataSpaceId, saveDataId: int, readBuffer: OutBuffer) -> Result: ...
    @abc.abstractmethod
    def WriteSaveDataFileSystemExtraData(self, saveDataId: int, spaceId: SaveDataSpaceId, extraDataBuffer: InBuffer) -> Result: ...
    @abc.abstractmethod
    def WriteSaveDataFileSystemExtraDataWithMask(self, saveDataId: int, spaceId: SaveDataSpaceId, extraDataBuffer: InBuffer, maskBuffer: InBuffer) -> Result: ...
    @abc.abstractmethod
    def WriteSaveDataFileSystemExtraDataWithMaskBySaveDataAttribute(self, attribute: clr.Reference[SaveDataAttribute], spaceId: SaveDataSpaceId, extraDataBuffer: InBuffer, maskBuffer: InBuffer) -> Result: ...


class IFileSystemProxyForLoader(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def IsArchivedProgram(self, isArchived: clr.Reference[bool], processId: int) -> Result: ...
    @abc.abstractmethod
    def OpenCodeFileSystem(self, fileSystem: clr.Reference[SharedRef_1[IFileSystem]], verificationData: clr.Reference[CodeVerificationData], path: clr.Reference[FspPath], programId: ProgramId) -> Result: ...
    @abc.abstractmethod
    def SetCurrentProcess(self, processId: int) -> Result: ...


class IMultiCommitManager(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def Add(self, fileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> Result: ...
    @abc.abstractmethod
    def Commit(self) -> Result: ...


class IProgramRegistry(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def RegisterProgram(self, processId: int, programId: ProgramId, storageId: StorageId, accessControlData: InBuffer, accessControlDataSize: int, accessControlDescriptor: InBuffer, accessControlDescriptorSize: int) -> Result: ...
    @abc.abstractmethod
    def SetCurrentProcess(self, processId: int) -> Result: ...
    @abc.abstractmethod
    def UnregisterProgram(self, processId: int) -> Result: ...


class ISaveDataChunkExporter(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def GetRestRawDataSize(self, remainingSize: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def Pull(self, bytesRead: clr.Reference[int], buffer: OutBuffer, size: int) -> Result: ...


class ISaveDataChunkImporter(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def Push(self, buffer: InBuffer, size: int) -> Result: ...


class ISaveDataChunkIterator(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def GetId(self, chunkId: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def IsEnd(self, isEnd: clr.Reference[bool]) -> Result: ...
    @abc.abstractmethod
    def Next(self) -> Result: ...


class ISaveDataDivisionExporter(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def CancelExport(self) -> Result: ...
    @abc.abstractmethod
    def FinalizeExport(self) -> Result: ...
    @abc.abstractmethod
    def GetImportInitialDataAad(self, initialDataAad: clr.Reference[InitialDataAad]) -> Result: ...
    @abc.abstractmethod
    def GetInitialDataMac(self, initialDataMac: clr.Reference[InitialDataMac]) -> Result: ...
    @abc.abstractmethod
    def GetInitialDataMacKeyGeneration(self, keyGeneration: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def GetKeySeed(self, keySeed: clr.Reference[KeySeed]) -> Result: ...
    @abc.abstractmethod
    def GetReportInfo(self, reportInfo: clr.Reference[ExportReportInfo]) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataChunkExporter(self, outExporter: clr.Reference[SharedRef_1[ISaveDataChunkExporter]], chunkId: int) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataDiffChunkIterator(self, outIterator: clr.Reference[SharedRef_1[ISaveDataChunkIterator]]) -> Result: ...
    @abc.abstractmethod
    def ReadSaveDataExtraData(self, extraData: OutBuffer) -> Result: ...
    @abc.abstractmethod
    def SetDivisionCount(self, divisionCount: int) -> Result: ...
    @abc.abstractmethod
    def SetExportInitialDataAad(self, initialDataAad: clr.Reference[InitialDataAad]) -> Result: ...
    @abc.abstractmethod
    def SuspendExport(self, exportContext: OutBuffer) -> Result: ...


class ISaveDataDivisionImporter(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def CancelImport(self) -> Result: ...
    @abc.abstractmethod
    def FinalizeImport(self) -> Result: ...
    @abc.abstractmethod
    def FinalizeImportWithoutSwap(self) -> Result: ...
    @abc.abstractmethod
    def GetImportContext(self, context: OutBuffer) -> Result: ...
    @abc.abstractmethod
    def GetImportInitialDataAad(self, initialDataAad: clr.Reference[InitialDataAad]) -> Result: ...
    @abc.abstractmethod
    def GetReportInfo(self, reportInfo: clr.Reference[ImportReportInfo]) -> Result: ...
    @abc.abstractmethod
    def InitializeImport(self, remaining: clr.Reference[int], sizeToProcess: int) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataChunkImporter(self, outImporter: clr.Reference[SharedRef_1[ISaveDataChunkImporter]], chunkId: int) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataDiffChunkIterator(self, outIterator: clr.Reference[SharedRef_1[ISaveDataChunkIterator]]) -> Result: ...
    @abc.abstractmethod
    def ReadSaveDataExtraData(self, extraData: OutBuffer) -> Result: ...
    @abc.abstractmethod
    def SuspendImport(self) -> Result: ...


class ISaveDataExporter(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def GetRestSize(self, remainingSize: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def GetSaveDataInfo(self, info: clr.Reference[SaveDataInfo]) -> Result: ...
    @abc.abstractmethod
    def Pull(self, bytesRead: clr.Reference[int], buffer: OutBuffer) -> Result: ...
    @abc.abstractmethod
    def PullInitialData(self, initialData: OutBuffer) -> Result: ...


class ISaveDataImporter(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def FinalizeImport(self) -> Result: ...
    @abc.abstractmethod
    def GetRestSize(self, remainingSize: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def GetSaveDataInfo(self, info: clr.Reference[SaveDataInfo]) -> Result: ...
    @abc.abstractmethod
    def Push(self, buffer: InBuffer) -> Result: ...


class ISaveDataInfoReader(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def Read(self, readCount: clr.Reference[int], saveDataInfoBuffer: OutBuffer) -> Result: ...


class ISaveDataMover(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def Cancel(self) -> Result: ...
    @abc.abstractmethod
    def Process(self, remainingSize: clr.Reference[int], sizeToProcess: int) -> Result: ...
    @abc.abstractmethod
    def Register(self, saveDataId: int) -> Result: ...


class ISaveDataTransferManager(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def GetChallenge(self, challenge: OutBuffer) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataExporter(self, outExporter: clr.Reference[SharedRef_1[ISaveDataExporter]], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataImporter(self, outImporter: clr.Reference[SharedRef_1[ISaveDataImporter]], requiredSize: clr.Reference[int], initialData: InBuffer, userId: clr.Reference[UserId], spaceId: SaveDataSpaceId) -> Result: ...
    @abc.abstractmethod
    def SetToken(self, token: InBuffer) -> Result: ...


class ISaveDataTransferManagerForRepair(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def OpenSaveDataExporter(self, outExporter: clr.Reference[SharedRef_1[ISaveDataDivisionExporter]], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataImporter(self, outImporter: clr.Reference[SharedRef_1[ISaveDataDivisionImporter]], initialData: InBuffer, spaceId: SaveDataSpaceId) -> Result: ...


class ISaveDataTransferManagerForSaveDataRepair(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def GetChallenge(self, challenge: OutBuffer) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataExporterAndGetEncryptedKey(self, outExporter: clr.Reference[SharedRef_1[ISaveDataDivisionExporter]], key: clr.Reference[RsaEncryptedKey], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataExporterWithKey(self, outExporter: clr.Reference[SharedRef_1[ISaveDataDivisionExporter]], key: clr.Reference[AesKey], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataImporterForSaveDataAfterRepair(self, outImporter: clr.Reference[SharedRef_1[ISaveDataDivisionImporter]], initialDataBeforeRepair: InBuffer, initialDataAfterRepair: InBuffer, userId: UserId, spaceId: SaveDataSpaceId) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataImporterForSaveDataBeforeRepair(self, outImporter: clr.Reference[SharedRef_1[ISaveDataDivisionImporter]], initialData: InBuffer, userId: UserId, spaceId: SaveDataSpaceId) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataImporterWithKey(self, outImporter: clr.Reference[SharedRef_1[ISaveDataDivisionImporter]], key: clr.Reference[AesKey], initialData: InBuffer, userId: UserId, saveDataSpaceId: int) -> Result: ...
    @abc.abstractmethod
    def PrepareOpenSaveDataImporter(self, key: clr.Reference[RsaEncryptedKey]) -> Result: ...
    @abc.abstractmethod
    def SetKeyPackage(self, keyPackage: InBuffer) -> Result: ...


class ISaveDataTransferManagerWithDivision(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def CancelSuspendingImport(self, applicationId: ApplicationId, userId: clr.Reference[UserId]) -> Result: ...
    @abc.abstractmethod
    def CancelSuspendingImportByAttribute(self, attribute: clr.Reference[SaveDataAttribute]) -> Result: ...
    @abc.abstractmethod
    def GetChallenge(self, challenge: OutBuffer) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataExporter(self, outExporter: clr.Reference[SharedRef_1[ISaveDataDivisionExporter]], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataExporterByContext(self, outExporter: clr.Reference[SharedRef_1[ISaveDataDivisionExporter]], exportContext: InBuffer) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataExporterForDiffExport(self, outExporter: clr.Reference[SharedRef_1[ISaveDataDivisionExporter]], initialData: InBuffer, spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataImporter(self, outImporter: clr.Reference[SharedRef_1[ISaveDataDivisionImporter]], initialData: InBuffer, userId: clr.Reference[UserId], spaceId: SaveDataSpaceId, useSwap: bool) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataImporterByContext(self, outImporter: clr.Reference[SharedRef_1[ISaveDataDivisionImporter]], importContext: InBuffer) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataImporterDeprecated(self, outImporter: clr.Reference[SharedRef_1[ISaveDataDivisionImporter]], initialData: InBuffer, userId: clr.Reference[UserId], spaceId: SaveDataSpaceId) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataImporterForDiffImport(self, outImporter: clr.Reference[SharedRef_1[ISaveDataDivisionImporter]], initialData: InBuffer, spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataImporterForDuplicateDiffImport(self, outImporter: clr.Reference[SharedRef_1[ISaveDataDivisionImporter]], initialData: InBuffer, spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def SetKeySeedPackage(self, keySeedPackage: InBuffer) -> Result: ...
    @abc.abstractmethod
    def SwapSecondary(self, attribute: clr.Reference[SaveDataAttribute], doSwap: bool, primaryCommitId: int) -> Result: ...


class ISaveDataTransferProhibiter(IDisposable, typing.Protocol):
    pass


class IStorage(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def Flush(self) -> Result: ...
    @abc.abstractmethod
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def OperateRange(self, rangeInfo: clr.Reference[QueryRangeInfo], operationId: int, offset: int, size: int) -> Result: ...
    @abc.abstractmethod
    def Read(self, offset: int, destination: OutBuffer, size: int) -> Result: ...
    @abc.abstractmethod
    def SetSize(self, size: int) -> Result: ...
    @abc.abstractmethod
    def Write(self, offset: int, source: InBuffer, size: int) -> Result: ...


class IWiper(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def Process(self, remainingSpaceToWipe: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def Startup(self, spaceToWipe: clr.Reference[int]) -> Result: ...


class Path:
    @property
    def Str(self) -> ReadOnlySpan_1[int]: ...

