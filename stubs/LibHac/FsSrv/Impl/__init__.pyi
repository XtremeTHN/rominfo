import typing, clr, abc
from LibHac.FsSrv import FileSystemServer, FileSystemServerImpl, SaveDataIndexerAccessor
from System import ReadOnlySpan_1, Span_1, IDisposable
from LibHac.Ncm import ApplicationId, StorageId, ProgramId
from LibHac import Result, ApplicationId
from LibHac.Common import UniqueRef_1, SharedRef_1
from LibHac.FsSrv.Sf import IEventNotifier, IDeviceOperator, IDirectory, IFile, IFileSystem, Path, IFileSystemProxyForLoader, IFileSystemProxy, IProgramRegistry, IStorage
from LibHac.Svc import Handle
from LibHac.FsSystem import ForwardingFileSystem, IUniqueLock, Hash, ISaveDataExtraDataAccessorObserver, ISaveDataExtraDataAccessor, ISaveDataFileSystem
from LibHac.Fs.Fsa import IFileSystem, IDirectory, IFile
from LibHac.Sf import OutBuffer, InBuffer
from LibHac.Fs import StorageErrorInfo, GameCardErrorInfo, GameCardErrorReportInfo, QueryRangeInfo, ReadOption, WriteOption, FileTimeStampRaw, PathFlags, SimulatingDeviceAccessFailureEventType, SimulatingDeviceTargetOperation, SimulatingDeviceDetectionMode, IStorage, SaveDataInfo, SaveDataSpaceId, SaveDataAttribute, SaveDataCreationInfo, SaveDataMetaInfo, HashSalt, OpenMode, SaveDataMetaType, SaveDataExtraData, SaveDataRank, SaveDataState, SaveDataType, ProgramIndexMapInfo, SaveDataFormatType
from LibHac.Os import OsState, UniqueLock_1, SdkMutex, UniqueLockRef_1, SdkRecursiveMutexType
from LibHac.Util import Optional_1

class AccessControl:
    @typing.overload
    def __init__(self, fsServer: FileSystemServer, accessControlData: ReadOnlySpan_1[int], accessControlDescriptor: ReadOnlySpan_1[int]) -> None: ...
    @typing.overload
    def __init__(self, fsServer: FileSystemServer, accessControlData: ReadOnlySpan_1[int], accessControlDescriptor: ReadOnlySpan_1[int], accessFlagMask: int) -> None: ...
    def CanCall(self, operation: OperationType) -> bool: ...
    def GetAccessibilityFor(self, type: AccessibilityType) -> Accessibility: ...
    def GetAccessibilitySaveDataOwnedBy(self, ownerId: int) -> Accessibility: ...
    def HasContentOwnerId(self, ownerId: int) -> bool: ...
    def ListSaveDataOwnedId(self, outCount: clr.Reference[int], outIds: Span_1[ApplicationId], startIndex: int) -> None: ...


class AccessControlBits:
    def __init__(self, value: int) -> None: ...
    Value : int
    def CanAbandonAccessFailure(self) -> bool: ...
    def CanChallengeCardExistence(self) -> bool: ...
    def CanControlMmcPatrol(self) -> bool: ...
    def CanCorruptSaveData(self) -> bool: ...
    def CanCorruptSystemSaveData(self) -> bool: ...
    def CanCreateOthersSystemSaveData(self) -> bool: ...
    def CanCreateOwnSaveData(self) -> bool: ...
    def CanCreateSaveData(self) -> bool: ...
    def CanCreateSaveDataWithHashSalt(self) -> bool: ...
    def CanCreateSystemSaveData(self) -> bool: ...
    def CanDebugSaveData(self) -> bool: ...
    def CanDeleteOwnSaveData(self) -> bool: ...
    def CanDeleteSaveData(self) -> bool: ...
    def CanDeleteSystemSaveData(self) -> bool: ...
    def CanEraseMmc(self) -> bool: ...
    def CanExtendOthersSystemSaveData(self) -> bool: ...
    def CanExtendOwnSaveData(self) -> bool: ...
    def CanExtendSaveData(self) -> bool: ...
    def CanExtendSystemSaveData(self) -> bool: ...
    def CanFillBis(self) -> bool: ...
    def CanFinalizeGameCardDriver(self) -> bool: ...
    def CanFindOwnSaveDataWithFilter(self) -> bool: ...
    def CanFormatSdCard(self) -> bool: ...
    def CanGetAccessFailureDetectionEvent(self) -> bool: ...
    def CanGetGameCardAsicInfo(self) -> bool: ...
    def CanGetGameCardDeviceCertificate(self) -> bool: ...
    def CanGetGameCardIdSet(self) -> bool: ...
    def CanGetRightsId(self) -> bool: ...
    def CanGetSaveDataCommitId(self) -> bool: ...
    def CanInvalidateBisCache(self) -> bool: ...
    def CanIsAccessFailureDetected(self) -> bool: ...
    def CanListAccessibleSaveDataOwnerId(self) -> bool: ...
    def CanMountAllBaseFileSystemRead(self) -> bool: ...
    def CanMountAllBaseFileSystemWrite(self) -> bool: ...
    def CanMountApplicationPackageRead(self) -> bool: ...
    def CanMountBisCalibrationFileRead(self) -> bool: ...
    def CanMountBisCalibrationFileWrite(self) -> bool: ...
    def CanMountBisSafeModeRead(self) -> bool: ...
    def CanMountBisSafeModeWrite(self) -> bool: ...
    def CanMountBisSystemProperEncryptionRead(self) -> bool: ...
    def CanMountBisSystemProperEncryptionWrite(self) -> bool: ...
    def CanMountBisSystemProperPartitionRead(self) -> bool: ...
    def CanMountBisSystemProperPartitionWrite(self) -> bool: ...
    def CanMountBisSystemRead(self) -> bool: ...
    def CanMountBisSystemWrite(self) -> bool: ...
    def CanMountBisUserRead(self) -> bool: ...
    def CanMountBisUserWrite(self) -> bool: ...
    def CanMountCloudBackupWorkStorageRead(self) -> bool: ...
    def CanMountCloudBackupWorkStorageWrite(self) -> bool: ...
    def CanMountContentControlRead(self) -> bool: ...
    def CanMountContentDataRead(self) -> bool: ...
    def CanMountContentManualRead(self) -> bool: ...
    def CanMountContentMetaRead(self) -> bool: ...
    def CanMountContentStorageRead(self) -> bool: ...
    def CanMountContentStorageWrite(self) -> bool: ...
    def CanMountCustomStorage0Read(self) -> bool: ...
    def CanMountCustomStorage0Write(self) -> bool: ...
    def CanMountDeviceSaveDataRead(self) -> bool: ...
    def CanMountDeviceSaveDataWrite(self) -> bool: ...
    def CanMountGameCardRead(self) -> bool: ...
    def CanMountHostRead(self) -> bool: ...
    def CanMountHostWrite(self) -> bool: ...
    def CanMountImageAndVideoStorageRead(self) -> bool: ...
    def CanMountImageAndVideoStorageWrite(self) -> bool: ...
    def CanMountLogoRead(self) -> bool: ...
    def CanMountOthersSaveDataRead(self) -> bool: ...
    def CanMountOthersSaveDataWrite(self) -> bool: ...
    def CanMountOthersSystemSaveDataRead(self) -> bool: ...
    def CanMountOthersSystemSaveDataWrite(self) -> bool: ...
    def CanMountRegisteredUpdatePartitionRead(self) -> bool: ...
    def CanMountSaveDataStorageRead(self) -> bool: ...
    def CanMountSaveDataStorageWrite(self) -> bool: ...
    def CanMountSdCardRead(self) -> bool: ...
    def CanMountSdCardWrite(self) -> bool: ...
    def CanMountSystemDataPrivateRead(self) -> bool: ...
    def CanMountSystemSaveDataRead(self) -> bool: ...
    def CanMountSystemSaveDataWrite(self) -> bool: ...
    def CanMountTemporaryDirectoryRead(self) -> bool: ...
    def CanMountTemporaryDirectoryWrite(self) -> bool: ...
    def CanNotifySystemDataUpdateEvent(self) -> bool: ...
    def CanOpenAccessFailureDetectionEventNotifier(self) -> bool: ...
    def CanOpenBisPartitionBootConfigAndPackage2Part1Read(self) -> bool: ...
    def CanOpenBisPartitionBootConfigAndPackage2Part1Write(self) -> bool: ...
    def CanOpenBisPartitionBootConfigAndPackage2Part2Read(self) -> bool: ...
    def CanOpenBisPartitionBootConfigAndPackage2Part2Write(self) -> bool: ...
    def CanOpenBisPartitionBootConfigAndPackage2Part3Read(self) -> bool: ...
    def CanOpenBisPartitionBootConfigAndPackage2Part3Write(self) -> bool: ...
    def CanOpenBisPartitionBootConfigAndPackage2Part4Read(self) -> bool: ...
    def CanOpenBisPartitionBootConfigAndPackage2Part4Write(self) -> bool: ...
    def CanOpenBisPartitionBootConfigAndPackage2Part5Read(self) -> bool: ...
    def CanOpenBisPartitionBootConfigAndPackage2Part5Write(self) -> bool: ...
    def CanOpenBisPartitionBootConfigAndPackage2Part6Read(self) -> bool: ...
    def CanOpenBisPartitionBootConfigAndPackage2Part6Write(self) -> bool: ...
    def CanOpenBisPartitionBootPartition1RootRead(self) -> bool: ...
    def CanOpenBisPartitionBootPartition1RootWrite(self) -> bool: ...
    def CanOpenBisPartitionBootPartition2RootRead(self) -> bool: ...
    def CanOpenBisPartitionBootPartition2RootWrite(self) -> bool: ...
    def CanOpenBisPartitionCalibrationBinaryRead(self) -> bool: ...
    def CanOpenBisPartitionCalibrationBinaryWrite(self) -> bool: ...
    def CanOpenBisPartitionCalibrationFileRead(self) -> bool: ...
    def CanOpenBisPartitionCalibrationFileWrite(self) -> bool: ...
    def CanOpenBisPartitionSafeModeRead(self) -> bool: ...
    def CanOpenBisPartitionSafeModeWrite(self) -> bool: ...
    def CanOpenBisPartitionSystemProperEncryptionRead(self) -> bool: ...
    def CanOpenBisPartitionSystemProperEncryptionWrite(self) -> bool: ...
    def CanOpenBisPartitionSystemProperPartitionRead(self) -> bool: ...
    def CanOpenBisPartitionSystemProperPartitionWrite(self) -> bool: ...
    def CanOpenBisPartitionSystemRead(self) -> bool: ...
    def CanOpenBisPartitionSystemWrite(self) -> bool: ...
    def CanOpenBisPartitionUserDataRootRead(self) -> bool: ...
    def CanOpenBisPartitionUserDataRootWrite(self) -> bool: ...
    def CanOpenBisPartitionUserRead(self) -> bool: ...
    def CanOpenBisPartitionUserWrite(self) -> bool: ...
    def CanOpenBisWiper(self) -> bool: ...
    def CanOpenDataStorageByPath(self) -> bool: ...
    def CanOpenGameCardDetectionEventNotifier(self) -> bool: ...
    def CanOpenGameCardStorageRead(self) -> bool: ...
    def CanOpenGameCardStorageWrite(self) -> bool: ...
    def CanOpenOwnSaveDataTransferProhibiter(self) -> bool: ...
    def CanOpenSaveDataInfoReader(self) -> bool: ...
    def CanOpenSaveDataInfoReaderForInternal(self) -> bool: ...
    def CanOpenSaveDataInfoReaderForSystem(self) -> bool: ...
    def CanOpenSaveDataInternalStorageRead(self) -> bool: ...
    def CanOpenSaveDataInternalStorageWrite(self) -> bool: ...
    def CanOpenSaveDataMetaFile(self) -> bool: ...
    def CanOpenSaveDataMover(self) -> bool: ...
    def CanOpenSaveDataTransferManager(self) -> bool: ...
    def CanOpenSaveDataTransferManagerForRepair(self) -> bool: ...
    def CanOpenSaveDataTransferManagerForSaveDataRepair(self) -> bool: ...
    def CanOpenSaveDataTransferManagerForSaveDataRepairTool(self) -> bool: ...
    def CanOpenSaveDataTransferManagerVersion2(self) -> bool: ...
    def CanOpenSaveDataTransferProhibiter(self) -> bool: ...
    def CanOpenSdCardDetectionEventNotifier(self) -> bool: ...
    def CanOpenSdCardStorageRead(self) -> bool: ...
    def CanOpenSdCardStorageWrite(self) -> bool: ...
    def CanOpenSystemDataUpdateEventNotifier(self) -> bool: ...
    def CanOverrideSaveDataTransferTokenSignVerificationKey(self) -> bool: ...
    def CanQuerySaveDataInternalStorageTotalSize(self) -> bool: ...
    def CanReadOwnSaveDataFileSystemExtraData(self) -> bool: ...
    def CanReadSaveDataFileSystemExtraData(self) -> bool: ...
    def CanRegisterExternalKey(self) -> bool: ...
    def CanRegisterProgramIndexMapInfo(self) -> bool: ...
    def CanRegisterUpdatePartition(self) -> bool: ...
    def CanResolveAccessFailure(self) -> bool: ...
    def CanSetCurrentPosixTime(self) -> bool: ...
    def CanSetDebugConfiguration(self) -> bool: ...
    def CanSetEncryptionSeed(self) -> bool: ...
    def CanSetGlobalAccessLogMode(self) -> bool: ...
    def CanSetSdCardAccessibility(self) -> bool: ...
    def CanSetSpeedEmulationMode(self) -> bool: ...
    def CanSimulateDevice(self) -> bool: ...
    def CanVerifySaveData(self) -> bool: ...
    def CanWriteSaveDataFileSystemExtraDataAll(self) -> bool: ...
    def CanWriteSaveDataFileSystemExtraDataCommitId(self) -> bool: ...
    def CanWriteSaveDataFileSystemExtraDataFlags(self) -> bool: ...
    def CanWriteSaveDataFileSystemExtraDataTimeStamp(self) -> bool: ...

    class Bits(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        None_ : AccessControlBits.Bits # 0
        ApplicationInfo : AccessControlBits.Bits # 1
        BootModeControl : AccessControlBits.Bits # 2
        Calibration : AccessControlBits.Bits # 4
        SystemSaveData : AccessControlBits.Bits # 8
        GameCard : AccessControlBits.Bits # 16
        SaveDataBackUp : AccessControlBits.Bits # 32
        SaveDataManagement : AccessControlBits.Bits # 64
        BisAllRaw : AccessControlBits.Bits # 128
        GameCardRaw : AccessControlBits.Bits # 256
        GameCardPrivate : AccessControlBits.Bits # 512
        SetTime : AccessControlBits.Bits # 1024
        ContentManager : AccessControlBits.Bits # 2048
        ImageManager : AccessControlBits.Bits # 4096
        CreateSaveData : AccessControlBits.Bits # 8192
        SystemSaveDataManagement : AccessControlBits.Bits # 16384
        BisFileSystem : AccessControlBits.Bits # 32768
        SystemUpdate : AccessControlBits.Bits # 65536
        SaveDataMeta : AccessControlBits.Bits # 131072
        DeviceSaveData : AccessControlBits.Bits # 262144
        SettingsControl : AccessControlBits.Bits # 524288
        SystemData : AccessControlBits.Bits # 1048576
        SdCard : AccessControlBits.Bits # 2097152
        Host : AccessControlBits.Bits # 4194304
        FillBis : AccessControlBits.Bits # 8388608
        CorruptSaveData : AccessControlBits.Bits # 16777216
        SaveDataForDebug : AccessControlBits.Bits # 33554432
        FormatSdCard : AccessControlBits.Bits # 67108864
        GetRightsId : AccessControlBits.Bits # 134217728
        RegisterExternalKey : AccessControlBits.Bits # 268435456
        RegisterUpdatePartition : AccessControlBits.Bits # 536870912
        SaveDataTransfer : AccessControlBits.Bits # 1073741824
        DeviceDetection : AccessControlBits.Bits # 2147483648
        AccessFailureResolution : AccessControlBits.Bits # 4294967296
        SaveDataTransferVersion2 : AccessControlBits.Bits # 8589934592
        RegisterProgramIndexMapInfo : AccessControlBits.Bits # 17179869184
        CreateOwnSaveData : AccessControlBits.Bits # 34359738368
        MoveCacheStorage : AccessControlBits.Bits # 68719476736
        Debug : AccessControlBits.Bits # 4611686018427387904
        FullPermission : AccessControlBits.Bits # 9223372036854775808



class AccessControlGlobalMethods(abc.ABC):
    @staticmethod
    def SetDebugFlagEnabled(fsSrv: FileSystemServer, isEnabled: bool) -> None: ...


class AccessFailureDetectionEventManager:
    def __init__(self) -> None: ...
    def CreateNotifier(self, notifier: clr.Reference[UniqueRef_1[IEventNotifier]], processId: int, notifyOnDeepRetry: bool) -> Result: ...
    def DisableAccessFailureDetection(self, processId: int) -> None: ...
    def GetEvent(self) -> Handle: ...
    def IsAccessFailureDetectionNotified(self, processId: int) -> bool: ...
    def NotifyAccessFailureDetection(self, processId: int) -> None: ...
    def ResetAccessFailureDetection(self, processId: int) -> None: ...


class Accessibility:
    def __init__(self, canRead: bool, canWrite: bool) -> None: ...
    @property
    def CanRead(self) -> bool: ...
    @property
    def CanWrite(self) -> bool: ...


class AccessibilityType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    MountLogo : AccessibilityType # 0
    MountContentMeta : AccessibilityType # 1
    MountContentControl : AccessibilityType # 2
    MountContentManual : AccessibilityType # 3
    MountContentData : AccessibilityType # 4
    MountApplicationPackage : AccessibilityType # 5
    MountSaveDataStorage : AccessibilityType # 6
    MountContentStorage : AccessibilityType # 7
    MountImageAndVideoStorage : AccessibilityType # 8
    MountCloudBackupWorkStorage : AccessibilityType # 9
    MountCustomStorage : AccessibilityType # 10
    MountBisCalibrationFile : AccessibilityType # 11
    MountBisSafeMode : AccessibilityType # 12
    MountBisUser : AccessibilityType # 13
    MountBisSystem : AccessibilityType # 14
    MountBisSystemProperEncryption : AccessibilityType # 15
    MountBisSystemProperPartition : AccessibilityType # 16
    MountSdCard : AccessibilityType # 17
    MountGameCard : AccessibilityType # 18
    MountDeviceSaveData : AccessibilityType # 19
    MountSystemSaveData : AccessibilityType # 20
    MountOthersSaveData : AccessibilityType # 21
    MountOthersSystemSaveData : AccessibilityType # 22
    OpenBisPartitionBootPartition1Root : AccessibilityType # 23
    OpenBisPartitionBootPartition2Root : AccessibilityType # 24
    OpenBisPartitionUserDataRoot : AccessibilityType # 25
    OpenBisPartitionBootConfigAndPackage2Part1 : AccessibilityType # 26
    OpenBisPartitionBootConfigAndPackage2Part2 : AccessibilityType # 27
    OpenBisPartitionBootConfigAndPackage2Part3 : AccessibilityType # 28
    OpenBisPartitionBootConfigAndPackage2Part4 : AccessibilityType # 29
    OpenBisPartitionBootConfigAndPackage2Part5 : AccessibilityType # 30
    OpenBisPartitionBootConfigAndPackage2Part6 : AccessibilityType # 31
    OpenBisPartitionCalibrationBinary : AccessibilityType # 32
    OpenBisPartitionCalibrationFile : AccessibilityType # 33
    OpenBisPartitionSafeMode : AccessibilityType # 34
    OpenBisPartitionUser : AccessibilityType # 35
    OpenBisPartitionSystem : AccessibilityType # 36
    OpenBisPartitionSystemProperEncryption : AccessibilityType # 37
    OpenBisPartitionSystemProperPartition : AccessibilityType # 38
    OpenSdCardStorage : AccessibilityType # 39
    OpenGameCardStorage : AccessibilityType # 40
    MountSystemDataPrivate : AccessibilityType # 41
    MountHost : AccessibilityType # 42
    MountRegisteredUpdatePartition : AccessibilityType # 43
    MountSaveDataInternalStorage : AccessibilityType # 44
    MountTemporaryDirectory : AccessibilityType # 45
    MountAllBaseFileSystem : AccessibilityType # 46
    NotMount : AccessibilityType # 47


class AsynchronousAccessFileSystem(ForwardingFileSystem):
    def __init__(self, baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> None: ...


class DeepRetryFileSystem(ForwardingFileSystem):
    @staticmethod
    def CreateShared(baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]], accessFailureManager: clr.Reference[SharedRef_1[IRomFileSystemAccessFailureManager]]) -> SharedRef_1[IFileSystem]: ...
    def Dispose(self) -> None: ...


class DeviceOperator(IDeviceOperator):
    def __init__(self, fsServer: FileSystemServer, accessControl: AccessControl, processId: int) -> None: ...
    def ChallengeCardExistence(self, outResponseBuffer: OutBuffer, challengeSeedBuffer: InBuffer, challengeValueBuffer: InBuffer, handle: int) -> Result: ...
    def ClearDeviceSimulationEvent(self, port: int) -> Result: ...
    def Dispose(self) -> None: ...
    def EraseAndWriteParamDirectly(self, inBuffer: InBuffer, inBufferSize: int) -> Result: ...
    def EraseGameCard(self, gameCardSize: int, romAreaStartPageAddress: int) -> Result: ...
    def EraseMmc(self, partitionId: int) -> Result: ...
    def FinalizeGameCardDriver(self) -> Result: ...
    def ForceEraseGameCard(self) -> Result: ...
    def GetAndClearMmcErrorInfo(self, outStorageErrorInfo: clr.Reference[StorageErrorInfo], outLogSize: clr.Reference[int], logBuffer: OutBuffer, logBufferSize: int) -> Result: ...
    def GetAndClearSdCardErrorInfo(self, outStorageErrorInfo: clr.Reference[StorageErrorInfo], outLogSize: clr.Reference[int], logBuffer: OutBuffer, logBufferSize: int) -> Result: ...
    def GetGameCardAsicInfo(self, outRmaInfoBuffer: OutBuffer, rmaInfoBufferSize: int, asicFirmwareBuffer: InBuffer, asicFirmwareBufferSize: int) -> Result: ...
    def GetGameCardAttribute(self, outAttribute: clr.Reference[int], handle: int) -> Result: ...
    def GetGameCardCompatibilityType(self, outCompatibilityType: clr.Reference[int], handle: int) -> Result: ...
    def GetGameCardDeviceCertificate(self, outBuffer: OutBuffer, outBufferSize: int, handle: int) -> Result: ...
    def GetGameCardDeviceId(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    def GetGameCardDeviceIdForProdCard(self, outBuffer: OutBuffer, outBufferSize: int, devHeaderBuffer: InBuffer, devHeaderBufferSize: int) -> Result: ...
    def GetGameCardErrorInfo(self, outErrorInfo: clr.Reference[GameCardErrorInfo]) -> Result: ...
    def GetGameCardErrorReportInfo(self, outErrorInfo: clr.Reference[GameCardErrorReportInfo]) -> Result: ...
    def GetGameCardHandle(self, outHandle: clr.Reference[int]) -> Result: ...
    def GetGameCardIdSet(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    def GetGameCardImageHash(self, outBuffer: OutBuffer, outBufferSize: int, handle: int) -> Result: ...
    def GetGameCardUpdatePartitionInfo(self, outCupVersion: clr.Reference[int], outCupId: clr.Reference[int], handle: int) -> Result: ...
    def GetMmcCid(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    def GetMmcExtendedCsd(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    def GetMmcPartitionSize(self, outSize: clr.Reference[int], partitionId: int) -> Result: ...
    def GetMmcPatrolCount(self, outCount: clr.Reference[int]) -> Result: ...
    def GetMmcSpeedMode(self, outSpeedMode: clr.Reference[int]) -> Result: ...
    def GetSdCardCid(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    def GetSdCardProtectedAreaSize(self, outSize: clr.Reference[int]) -> Result: ...
    def GetSdCardSpeedMode(self, outSpeedMode: clr.Reference[int]) -> Result: ...
    def GetSdCardUserAreaSize(self, outSize: clr.Reference[int]) -> Result: ...
    def GetSdmmcConnectionStatus(self, outSpeedMode: clr.Reference[int], outBusWidth: clr.Reference[int], port: int) -> Result: ...
    def GetSpeedEmulationMode(self, outMode: clr.Reference[int]) -> Result: ...
    def IsGameCardInserted(self, outIsInserted: clr.Reference[bool]) -> Result: ...
    def IsSdCardInserted(self, outIsInserted: clr.Reference[bool]) -> Result: ...
    def ReadParamDirectly(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    def ResumeMmcPatrol(self) -> Result: ...
    def ResumeSdmmcControl(self) -> Result: ...
    def SetDeviceSimulationEvent(self, port: int, simulatedOperationType: int, simulatedFailureType: int, failureResult: int, autoClearEvent: bool) -> Result: ...
    def SetSpeedEmulationMode(self, mode: int) -> Result: ...
    def SetVerifyWriteEnableFlag(self, isEnabled: bool) -> Result: ...
    def SuspendMmcPatrol(self) -> Result: ...
    def SuspendSdmmcControl(self) -> Result: ...
    def WriteToGameCardDirectly(self, offset: int, buffer: OutBuffer, bufferSize: int) -> Result: ...


class DirectoryInterfaceAdapter(IDirectory):
    def __init__(self, baseDirectory: clr.Reference[UniqueRef_1[IDirectory]], parentFileSystem: clr.Reference[SharedRef_1[FileSystemInterfaceAdapter]]) -> None: ...
    def Dispose(self) -> None: ...
    def GetEntryCount(self, entryCount: clr.Reference[int]) -> Result: ...
    def Read(self, entriesRead: clr.Reference[int], entryBuffer: OutBuffer) -> Result: ...


class FileInterfaceAdapter(IFile):
    def __init__(self, baseFile: clr.Reference[UniqueRef_1[IFile]], parentFileSystem: clr.Reference[SharedRef_1[FileSystemInterfaceAdapter]], allowAllOperations: bool) -> None: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> Result: ...
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    def OperateRange(self, rangeInfo: clr.Reference[QueryRangeInfo], operationId: int, offset: int, size: int) -> Result: ...
    def OperateRangeWithBuffer(self, outBuffer: OutBuffer, inBuffer: InBuffer, operationId: int, offset: int, size: int) -> Result: ...
    def Read(self, bytesRead: clr.Reference[int], offset: int, destination: OutBuffer, size: int, option: ReadOption) -> Result: ...
    def SetSize(self, size: int) -> Result: ...
    def Write(self, offset: int, source: InBuffer, size: int, option: WriteOption) -> Result: ...


class FileSystemInterfaceAdapter(IFileSystem):
    def CleanDirectoryRecursively(self, path: clr.Reference[Path]) -> Result: ...
    def Commit(self) -> Result: ...
    def CreateDirectory(self, path: clr.Reference[Path]) -> Result: ...
    def CreateFile(self, path: clr.Reference[Path], size: int, option: int) -> Result: ...
    def DeleteDirectory(self, path: clr.Reference[Path]) -> Result: ...
    def DeleteDirectoryRecursively(self, path: clr.Reference[Path]) -> Result: ...
    def DeleteFile(self, path: clr.Reference[Path]) -> Result: ...
    def Dispose(self) -> None: ...
    def GetEntryType(self, entryType: clr.Reference[int], path: clr.Reference[Path]) -> Result: ...
    def GetFileTimeStampRaw(self, timeStamp: clr.Reference[FileTimeStampRaw], path: clr.Reference[Path]) -> Result: ...
    def GetFreeSpaceSize(self, freeSpace: clr.Reference[int], path: clr.Reference[Path]) -> Result: ...
    def GetImpl(self, fileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> Result: ...
    def GetTotalSpaceSize(self, totalSpace: clr.Reference[int], path: clr.Reference[Path]) -> Result: ...
    def OpenDirectory(self, outDirectory: clr.Reference[SharedRef_1[IDirectory]], path: clr.Reference[Path], mode: int) -> Result: ...
    def OpenFile(self, outFile: clr.Reference[SharedRef_1[IFile]], path: clr.Reference[Path], mode: int) -> Result: ...
    def QueryEntry(self, outBuffer: OutBuffer, inBuffer: InBuffer, queryId: int, path: clr.Reference[Path]) -> Result: ...
    def RenameDirectory(self, currentPath: clr.Reference[Path], newPath: clr.Reference[Path]) -> Result: ...
    def RenameFile(self, currentPath: clr.Reference[Path], newPath: clr.Reference[Path]) -> Result: ...
    # Skipped CreateShared due to it being static, abstract and generic.

    CreateShared : CreateShared_MethodGroup
    class CreateShared_MethodGroup:
        @typing.overload
        def __call__(self, baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]], allowAllOperations: bool) -> SharedRef_1[IFileSystem]:...
        @typing.overload
        def __call__(self, baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]], flags: PathFlags, allowAllOperations: bool) -> SharedRef_1[IFileSystem]:...



class FileSystemProxyServiceObject(abc.ABC):
    @staticmethod
    def GetFileSystemProxyForLoaderServiceObject(fsSrv: FileSystemServerImpl) -> SharedRef_1[IFileSystemProxyForLoader]: ...
    @staticmethod
    def GetFileSystemProxyServiceObject(fsSrv: FileSystemServerImpl) -> SharedRef_1[IFileSystemProxy]: ...
    @staticmethod
    def GetInvalidFileSystemProxyForLoaderServiceObject(fsSrv: FileSystemServerImpl) -> SharedRef_1[IFileSystemProxyForLoader]: ...
    @staticmethod
    def GetInvalidProgramRegistryServiceObject(fsSrv: FileSystemServerImpl) -> SharedRef_1[IProgramRegistry]: ...
    @staticmethod
    def GetProgramRegistryServiceObject(fsSrv: FileSystemServerImpl) -> SharedRef_1[IProgramRegistry]: ...


class GameCardEventSimulator(IDeviceEventSimulator):
    def __init__(self, os: OsState) -> None: ...
    def GetCorrespondingResult(self, eventType: SimulatingDeviceAccessFailureEventType) -> Result: ...


class IDeviceEventSimulator(abc.ABC):
    def __init__(self, os: OsState, timeoutMs: int) -> None: ...
    def CheckSimulatedAccessFailureEvent(self, operation: SimulatingDeviceTargetOperation) -> Result: ...
    def ClearDetectionSimulationMode(self) -> None: ...
    def ClearDeviceEvent(self) -> None: ...
    def FilterDetectionState(self, actualState: bool) -> bool: ...
    def GetCorrespondingResult(self, eventType: SimulatingDeviceAccessFailureEventType) -> Result: ...
    def SetDetectionSimulationMode(self, mode: SimulatingDeviceDetectionMode) -> None: ...
    def SetDeviceEvent(self, operation: SimulatingDeviceTargetOperation, failureType: SimulatingDeviceAccessFailureEventType, failureResult: Result, isRecurringEvent: bool) -> None: ...


class IEntryOpenCountSemaphoreManager(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def TryAcquireEntryOpenCountSemaphore(self, outSemaphore: clr.Reference[UniqueRef_1[IUniqueLock]]) -> Result: ...


class IRomFileSystemAccessFailureManager(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def HandleResolubleAccessFailure(self, wasDeferred: clr.Reference[bool], resultForNoFailureDetected: Result) -> Result: ...
    @abc.abstractmethod
    def IncrementRomFsRecoveredByInvalidateCacheCount(self) -> None: ...
    @abc.abstractmethod
    def IncrementRomFsRemountForDataCorruptionCount(self) -> None: ...
    @abc.abstractmethod
    def IncrementRomFsUnrecoverableDataCorruptionByRemountCount(self) -> None: ...
    @abc.abstractmethod
    def OpenDataStorageCore(self, outStorage: clr.Reference[SharedRef_1[IStorage]], ncaHeaderDigest: clr.Reference[Hash], id: int, storageId: StorageId) -> Result: ...


class ISaveDataMultiCommitCoreInterface(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def IsProvisionallyCommittedSaveData(self, isProvisionallyCommitted: clr.Reference[bool], saveInfo: clr.Reference[SaveDataInfo]) -> Result: ...
    @abc.abstractmethod
    def OpenMultiCommitContext(self, contextFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> Result: ...
    @abc.abstractmethod
    def RecoverMultiCommit(self) -> Result: ...
    @abc.abstractmethod
    def RecoverProvisionallyCommittedSaveData(self, saveInfo: clr.Reference[SaveDataInfo], doRollback: bool) -> Result: ...


class ISaveDataTransferCoreInterface(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def CancelSaveDataCreation(self, saveDataId: int, spaceId: SaveDataSpaceId) -> Result: ...
    @abc.abstractmethod
    def CheckSaveDataFile(self, saveDataId: int, spaceId: SaveDataSpaceId) -> Result: ...
    @abc.abstractmethod
    def CreateSaveDataFileSystemCore(self, attribute: clr.Reference[SaveDataAttribute], creationInfo: clr.Reference[SaveDataCreationInfo], metaInfo: clr.Reference[SaveDataMetaInfo], hashSalt: clr.Reference[Optional_1[HashSalt]], leaveUnfinalized: bool) -> Result: ...
    @abc.abstractmethod
    def DeleteSaveDataFileSystemBySaveDataSpaceId(self, spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def ExtendSaveDataFileSystem(self, spaceId: SaveDataSpaceId, saveDataId: int, dataSize: int, journalSize: int) -> Result: ...
    @abc.abstractmethod
    def FinalizeSaveDataCreation(self, saveDataId: int, spaceId: SaveDataSpaceId) -> Result: ...
    @abc.abstractmethod
    def GetFreeSpaceSizeForSaveData(self, outFreeSpaceSize: clr.Reference[int], spaceId: SaveDataSpaceId) -> Result: ...
    @abc.abstractmethod
    def GetSaveDataInfo(self, saveInfo: clr.Reference[SaveDataInfo], spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute]) -> Result: ...
    @abc.abstractmethod
    def IsProhibited(self, outLock: clr.Reference[UniqueLock_1[SdkMutex]], applicationId: ApplicationId) -> bool: ...
    @abc.abstractmethod
    def OpenSaveDataFile(self, oufFile: clr.Reference[SharedRef_1[IFile]], spaceId: SaveDataSpaceId, saveDataId: int, mode: OpenMode) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataFileSystemCore(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], outSaveDataId: clr.Reference[int], spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute], openReadOnly: bool, cacheExtraData: bool) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataIndexerAccessor(self, outAccessor: clr.Reference[UniqueRef_1[SaveDataIndexerAccessor]], spaceId: SaveDataSpaceId) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataInternalStorageFileSystemCore(self, fileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, saveDataId: int, useSecondMacKey: bool) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataMetaFileRaw(self, outFile: clr.Reference[SharedRef_1[IFile]], spaceId: SaveDataSpaceId, saveDataId: int, metaType: SaveDataMetaType, mode: OpenMode) -> Result: ...
    @abc.abstractmethod
    def QuerySaveDataTotalSize(self, outTotalSize: clr.Reference[int], dataSize: int, journalSize: int) -> Result: ...
    @abc.abstractmethod
    def ReadSaveDataFileSystemExtraDataCore(self, extraData: clr.Reference[SaveDataExtraData], spaceId: SaveDataSpaceId, saveDataId: int, isTemporarySaveData: bool) -> Result: ...
    @abc.abstractmethod
    def SetSaveDataRank(self, spaceId: SaveDataSpaceId, saveDataId: int, rank: SaveDataRank) -> Result: ...
    @abc.abstractmethod
    def SetSaveDataState(self, spaceId: SaveDataSpaceId, saveDataId: int, state: SaveDataState) -> Result: ...
    @abc.abstractmethod
    def SwapSaveDataKeyAndState(self, spaceId: SaveDataSpaceId, saveDataId1: int, saveDataId2: int) -> Result: ...
    @abc.abstractmethod
    def WriteSaveDataFileSystemExtraDataCore(self, spaceId: SaveDataSpaceId, saveDataId: int, extraData: clr.Reference[SaveDataExtraData], type: SaveDataType, updateTimeStamp: bool) -> Result: ...


class LocationResolverSetGlobalMethods(abc.ABC):
    @staticmethod
    def InitializeLocationResolverSet(fsSrv: FileSystemServer) -> None: ...


class OperationType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    InvalidateBisCache : OperationType # 0
    EraseMmc : OperationType # 1
    GetGameCardDeviceCertificate : OperationType # 2
    GetGameCardIdSet : OperationType # 3
    FinalizeGameCardDriver : OperationType # 4
    GetGameCardAsicInfo : OperationType # 5
    CreateSaveData : OperationType # 6
    DeleteSaveData : OperationType # 7
    CreateSystemSaveData : OperationType # 8
    CreateOthersSystemSaveData : OperationType # 9
    DeleteSystemSaveData : OperationType # 10
    OpenSaveDataInfoReader : OperationType # 11
    OpenSaveDataInfoReaderForSystem : OperationType # 12
    OpenSaveDataInfoReaderForInternal : OperationType # 13
    OpenSaveDataMetaFile : OperationType # 14
    SetCurrentPosixTime : OperationType # 15
    ReadSaveDataFileSystemExtraData : OperationType # 16
    SetGlobalAccessLogMode : OperationType # 17
    SetSpeedEmulationMode : OperationType # 18
    Debug : OperationType # 19
    FillBis : OperationType # 20
    CorruptSaveData : OperationType # 21
    CorruptSystemSaveData : OperationType # 22
    VerifySaveData : OperationType # 23
    DebugSaveData : OperationType # 24
    FormatSdCard : OperationType # 25
    GetRightsId : OperationType # 26
    RegisterExternalKey : OperationType # 27
    SetEncryptionSeed : OperationType # 28
    WriteSaveDataFileSystemExtraDataTimeStamp : OperationType # 29
    WriteSaveDataFileSystemExtraDataFlags : OperationType # 30
    WriteSaveDataFileSystemExtraDataCommitId : OperationType # 31
    WriteSaveDataFileSystemExtraDataAll : OperationType # 32
    ExtendSaveData : OperationType # 33
    ExtendSystemSaveData : OperationType # 34
    ExtendOthersSystemSaveData : OperationType # 35
    RegisterUpdatePartition : OperationType # 36
    OpenSaveDataTransferManager : OperationType # 37
    OpenSaveDataTransferManagerVersion2 : OperationType # 38
    OpenSaveDataTransferManagerForSaveDataRepair : OperationType # 39
    OpenSaveDataTransferManagerForSaveDataRepairTool : OperationType # 40
    OpenSaveDataTransferProhibiter : OperationType # 41
    OpenSaveDataMover : OperationType # 42
    OpenBisWiper : OperationType # 43
    ListAccessibleSaveDataOwnerId : OperationType # 44
    ControlMmcPatrol : OperationType # 45
    OverrideSaveDataTransferTokenSignVerificationKey : OperationType # 46
    OpenSdCardDetectionEventNotifier : OperationType # 47
    OpenGameCardDetectionEventNotifier : OperationType # 48
    OpenSystemDataUpdateEventNotifier : OperationType # 49
    NotifySystemDataUpdateEvent : OperationType # 50
    OpenAccessFailureDetectionEventNotifier : OperationType # 51
    GetAccessFailureDetectionEvent : OperationType # 52
    IsAccessFailureDetected : OperationType # 53
    ResolveAccessFailure : OperationType # 54
    AbandonAccessFailure : OperationType # 55
    QuerySaveDataInternalStorageTotalSize : OperationType # 56
    GetSaveDataCommitId : OperationType # 57
    SetSdCardAccessibility : OperationType # 58
    SimulateDevice : OperationType # 59
    CreateSaveDataWithHashSalt : OperationType # 60
    RegisterProgramIndexMapInfo : OperationType # 61
    ChallengeCardExistence : OperationType # 62
    CreateOwnSaveData : OperationType # 63
    DeleteOwnSaveData : OperationType # 64
    ReadOwnSaveDataFileSystemExtraData : OperationType # 65
    ExtendOwnSaveData : OperationType # 66
    OpenOwnSaveDataTransferProhibiter : OperationType # 67
    FindOwnSaveDataWithFilter : OperationType # 68
    OpenSaveDataTransferManagerForRepair : OperationType # 69
    SetDebugConfiguration : OperationType # 70
    OpenDataStorageByPath : OperationType # 71


class ProgramIndexMapInfoManager(IDisposable):
    def __init__(self) -> None: ...
    def Clear(self) -> None: ...
    def Dispose(self) -> None: ...
    def Get(self, programId: ProgramId) -> Optional_1[ProgramIndexMapInfo]: ...
    def GetProgramCount(self) -> int: ...
    def GetProgramId(self, programId: ProgramId, programIndex: int) -> ProgramId: ...
    def Reset(self, programIndexMapInfo: ReadOnlySpan_1[ProgramIndexMapInfo]) -> Result: ...


class ProgramInfo:
    def __init__(self, fsServer: FileSystemServer, processId: int, programId: ProgramId, storageId: StorageId, accessControlData: ReadOnlySpan_1[int], accessControlDescriptor: ReadOnlySpan_1[int]) -> None: ...
    @property
    def AccessControl(self) -> AccessControl: ...
    @property
    def ProgramId(self) -> ProgramId: ...
    @property
    def ProgramIdValue(self) -> int: ...
    @property
    def StorageId(self) -> StorageId: ...
    def Contains(self, processId: int) -> bool: ...
    @staticmethod
    def GetProgramInfoForInitialProcess(fsSrv: FileSystemServer) -> ProgramInfo: ...


class ProgramInfoGlobalMethods(abc.ABC):
    @staticmethod
    def IsCurrentProcess(fsSrv: FileSystemServer, processId: int) -> bool: ...
    @staticmethod
    def IsInitialProgram(fsSrv: FileSystemServer, processId: int) -> bool: ...


class SaveDataExtraDataAccessorCacheManager(ISaveDataExtraDataAccessorObserver):
    def __init__(self) -> None: ...
    def Dispose(self) -> None: ...
    def GetCache(self, outAccessor: clr.Reference[SharedRef_1[ISaveDataExtraDataAccessor]], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def GetScopedLock(self) -> UniqueLockRef_1[SdkRecursiveMutexType]: ...
    def Register(self, accessor: clr.Reference[SharedRef_1[ISaveDataExtraDataAccessor]], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def Unregister(self, spaceId: SaveDataSpaceId, saveDataId: int) -> None: ...


class SaveDataFileSystemCacheManager(IDisposable):
    def __init__(self) -> None: ...
    def Dispose(self) -> None: ...
    def GetCache(self, outFileSystem: clr.Reference[SharedRef_1[ISaveDataFileSystem]], spaceId: SaveDataSpaceId, saveDataId: int) -> bool: ...
    def GetScopedLock(self) -> UniqueLockRef_1[SdkRecursiveMutexType]: ...
    def Initialize(self, maxCacheCount: int) -> Result: ...
    def Register(self, fileSystem: clr.Reference[SharedRef_1[ISaveDataFileSystem]], spaceId: SaveDataSpaceId, saveDataId: int) -> None: ...
    def Unregister(self, spaceId: SaveDataSpaceId, saveDataId: int) -> None: ...


class SaveDataFileSystemCacheRegister(IFileSystem):
    def __init__(self, baseFileSystem: clr.Reference[SharedRef_1[ISaveDataFileSystem]], cacheManager: SaveDataFileSystemCacheManager, spaceId: SaveDataSpaceId, saveDataId: int) -> None: ...
    def Dispose(self) -> None: ...


class SaveDataProperties(abc.ABC):
    BcatSaveDataJournalSize : int
    DefaultSaveDataBlockSize : int
    @staticmethod
    def CanUseIndexerReservedArea(type: SaveDataType) -> bool: ...
    @staticmethod
    def IsMultiCommitSupported(type: SaveDataType) -> bool: ...
    @staticmethod
    def IsReconstructible(type: SaveDataType, spaceId: SaveDataSpaceId) -> bool: ...
    @staticmethod
    def IsSharedOpenNeeded(type: SaveDataType) -> bool: ...
    @staticmethod
    def IsSystemSaveData(type: SaveDataType) -> bool: ...
    # Skipped IsJournalingSupported due to it being static, abstract and generic.

    IsJournalingSupported : IsJournalingSupported_MethodGroup
    class IsJournalingSupported_MethodGroup:
        @typing.overload
        def __call__(self, type: SaveDataFormatType) -> bool:...
        @typing.overload
        def __call__(self, type: SaveDataType) -> bool:...



class SdCardEventSimulator(IDeviceEventSimulator):
    def __init__(self, os: OsState) -> None: ...
    def GetCorrespondingResult(self, eventType: SimulatingDeviceAccessFailureEventType) -> Result: ...


class StorageInterfaceAdapter(IStorage):
    def __init__(self, baseStorage: clr.Reference[SharedRef_1[IStorage]]) -> None: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> Result: ...
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    def OperateRange(self, rangeInfo: clr.Reference[QueryRangeInfo], operationId: int, offset: int, size: int) -> Result: ...
    def Read(self, offset: int, destination: OutBuffer, size: int) -> Result: ...
    def SetSize(self, size: int) -> Result: ...
    def Write(self, offset: int, source: InBuffer, size: int) -> Result: ...

