import typing, clr, abc
from LibHac import Result, HorizonClient, MemoryResource
from LibHac.Sf import NativeHandle, OutBuffer, InBuffer
from LibHac.Common import SharedRef_1, UniqueRef_1, U8Span
from LibHac.FsSrv.Sf import IEventNotifier, IFileSystem, FspPath, IWiper, IStorage, IDeviceOperator, IFileSystemProxyForLoader, IFileSystemProxy, IMultiCommitManager, ISaveDataInfoReader, IFile, ISaveDataMover, ISaveDataTransferManager, ISaveDataTransferManagerForRepair, ISaveDataTransferManagerForSaveDataRepair, ISaveDataTransferManagerWithDivision, ISaveDataTransferProhibiter, IProgramRegistry
from LibHac.Svc import Handle
from System import IDisposable, ReadOnlySpan_1, MulticastDelegate, IAsyncResult, AsyncCallback, Span_1, ValueTuple_2, Func_1
from LibHac.Fs import GlobalAccessLogMode, BaseFileSystemId, BisPartitionId, GameCardPartition, ImageDirectoryId, GameCardPartitionRaw, SdmmcPort, SimulatingDeviceDetectionMode, IStorage, StorageErrorInfo, GameCardErrorInfo, GameCardErrorReportInfo, RightsId, CloudBackupWorkStorageId, CustomStorageId, Path, EncryptionSeed, SaveDataSpaceId, SaveDataAttribute, SaveDataCreationInfo, SaveDataMetaInfo, SaveDataCreationInfo2, HashSalt, SaveDataFilter, FileSystemProxyErrorInfo, MemoryReportInfo, FsStackUsageThreadType, CodeVerificationData, ContentStorageId, FileSystemProxyType, MountHostOption, SaveDataMetaType, ApplicationInfo, SaveDataState, ProgramIndexMapInfo, OpenMode, SaveDataType, SaveDataInfo, SaveDataExtraData, IBufferManager, FileSystemClient, FileStorageBasedFileSystem, OperationId
from LibHac.Fs.Fsa import IFileSystem, IFile
from System.Reflection import MethodInfo
from LibHac.FsSrv.FsCreator import IBuiltInStorageFileSystemCreator, IGameCardFileSystemCreator, ISdCardProxyFileSystemCreator, IBuiltInStorageCreator, IGameCardStorageCreator, FileSystemCreatorInterfaces, IEncryptedFileSystemCreator, ILocalFileSystemCreator, IPartitionFileSystemCreator, IRomFileSystemCreator, IStorageOnNcaCreator, ISubDirectoryFileSystemCreator, ITargetManagerFileSystemCreator, ISaveDataFileSystemCreator, FatFileSystemCreator
from LibHac.Fs.Shim import DebugOptionKey
from LibHac.Common.Keys import KeySet
from LibHac.FsSystem import RandomDataGenerator, Hash
from LibHac.Spl import AccessKey
from System.Collections.Generic import List_1
from LibHac.Ncm import ProgramId, StorageId, DataId, ApplicationId
from LibHac.FsSrv.Storage import StorageDeviceHandle
from LibHac.FsSrv.Impl import ProgramInfo
from LibHac.Util import Optional_1
from LibHac.Os import UniqueLockRef_1, SdkMutexType, UniqueLock_1, SdkMutex
from LibHac.Common.FixedArrays import Array38_1

class AccessFailureManagementService:
    def __init__(self, serviceImpl: AccessFailureManagementServiceImpl, processId: int) -> None: ...
    def AbandonAccessFailure(self, processId: int) -> Result: ...
    def GetAccessFailureDetectionEvent(self, eventHandle: clr.Reference[NativeHandle]) -> Result: ...
    def IsAccessFailureDetected(self, isDetected: clr.Reference[bool], processId: int) -> Result: ...
    def OpenAccessFailureDetectionEventNotifier(self, outNotifier: clr.Reference[SharedRef_1[IEventNotifier]], processId: int, notifyOnDeepRetry: bool) -> Result: ...
    def ResolveAccessFailure(self, processId: int) -> Result: ...


class AccessFailureManagementServiceImpl:
    def __init__(self, configuration: clr.Reference[AccessFailureManagementServiceImpl.Configuration]) -> None: ...
    def CreateNotifier(self, notifier: clr.Reference[UniqueRef_1[IEventNotifier]], processId: int, notifyOnDeepRetry: bool) -> Result: ...
    def DisableAccessFailureDetection(self, processId: int) -> None: ...
    def GetEvent(self) -> Handle: ...
    def HandleResolubleAccessFailure(self, wasDeferred: clr.Reference[bool], nonDeferredResult: Result, processId: int) -> Result: ...
    def IsAccessFailureDetectionNotified(self, processId: int) -> bool: ...
    def NotifyAccessFailureDetection(self, processId: int) -> None: ...
    def ResetAccessFailureDetection(self, processId: int) -> None: ...

    class Configuration:
        FsServer : FileSystemServer



class AccessLogServiceImpl(IDisposable):
    def __init__(self, configuration: clr.Reference[AccessLogServiceImpl.Configuration]) -> None: ...
    def Dispose(self) -> None: ...
    def FinalizeAccessLogSdCardWriter(self) -> Result: ...
    def FlushAccessLogSdCardWriter(self) -> Result: ...
    def GetAccessLogMode(self) -> GlobalAccessLogMode: ...
    def SetAccessLogMode(self, mode: GlobalAccessLogMode) -> None: ...
    # Skipped OutputAccessLogToSdCard due to it being static, abstract and generic.

    OutputAccessLogToSdCard : OutputAccessLogToSdCard_MethodGroup
    class OutputAccessLogToSdCard_MethodGroup:
        @typing.overload
        def __call__(self, text: ReadOnlySpan_1[int], processId: int) -> Result:...
        @typing.overload
        def __call__(self, text: ReadOnlySpan_1[int], programId: int, processId: int) -> Result:...


    class Configuration:
        FsServer : FileSystemServer
        MinimumProgramIdForSdCardLog : int



class BaseFileSystemService:
    def __init__(self, serviceImpl: BaseFileSystemServiceImpl, processId: int) -> None: ...
    def CreatePaddingFile(self, size: int) -> Result: ...
    def DeleteAllPaddingFiles(self) -> Result: ...
    def FormatBaseFileSystem(self, fileSystemId: BaseFileSystemId) -> Result: ...
    def FormatSdCardDryRun(self) -> Result: ...
    def FormatSdCardFileSystem(self) -> Result: ...
    def IsExFatSupported(self, isSupported: clr.Reference[bool]) -> Result: ...
    def OpenBaseFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], fileSystemId: BaseFileSystemId) -> Result: ...
    def OpenBisFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], rootPath: clr.Reference[FspPath], partitionId: BisPartitionId) -> Result: ...
    def OpenBisWiper(self, outBisWiper: clr.Reference[SharedRef_1[IWiper]], transferMemoryHandle: NativeHandle, transferMemorySize: int) -> Result: ...
    def OpenGameCardFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], handle: int, partitionId: GameCardPartition) -> Result: ...
    def OpenImageDirectoryFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], directoryId: ImageDirectoryId) -> Result: ...
    def OpenSdCardFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> Result: ...
    def SetBisRootForHost(self, partitionId: BisPartitionId, path: clr.Reference[FspPath]) -> Result: ...


class BaseFileSystemServiceImpl:
    def __init__(self, configuration: clr.Reference[BaseFileSystemServiceImpl.Configuration]) -> None: ...
    def CreatePaddingFile(self, size: int) -> Result: ...
    def DeleteAllPaddingFiles(self) -> Result: ...
    def FormatBaseFileSystem(self, fileSystemId: BaseFileSystemId) -> Result: ...
    def FormatSdCardDryRun(self) -> Result: ...
    def FormatSdCardProxyFileSystem(self) -> Result: ...
    def IsExFatSupported(self) -> bool: ...
    def OpenBaseFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], fileSystemId: BaseFileSystemId) -> Result: ...
    def OpenBisWiper(self, outBisWiper: clr.Reference[UniqueRef_1[IWiper]], transferMemoryHandle: NativeHandle, transferMemorySize: int) -> Result: ...
    def OpenGameCardFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], handle: int, partitionId: GameCardPartition) -> Result: ...
    # Skipped OpenBisFileSystem due to it being static, abstract and generic.

    OpenBisFileSystem : OpenBisFileSystem_MethodGroup
    class OpenBisFileSystem_MethodGroup:
        @typing.overload
        def __call__(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], partitionId: BisPartitionId) -> Result:...
        @typing.overload
        def __call__(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], partitionId: BisPartitionId, caseSensitive: bool) -> Result:...

    # Skipped OpenSdCardProxyFileSystem due to it being static, abstract and generic.

    OpenSdCardProxyFileSystem : OpenSdCardProxyFileSystem_MethodGroup
    class OpenSdCardProxyFileSystem_MethodGroup:
        @typing.overload
        def __call__(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> Result:...
        @typing.overload
        def __call__(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], openCaseSensitive: bool) -> Result:...


    class BisWiperCreator(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, outWiper: clr.Reference[UniqueRef_1[IWiper]], transferMemoryHandle: NativeHandle, transferMemorySize: int, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, outWiper: clr.Reference[UniqueRef_1[IWiper]], result: IAsyncResult) -> Result: ...
        def Invoke(self, outWiper: clr.Reference[UniqueRef_1[IWiper]], transferMemoryHandle: NativeHandle, transferMemorySize: int) -> Result: ...


    class Configuration:
        BisFileSystemCreator : IBuiltInStorageFileSystemCreator
        BisWiperCreator : BaseFileSystemServiceImpl.BisWiperCreator
        FsServer : FileSystemServer
        GameCardFileSystemCreator : IGameCardFileSystemCreator
        SdCardFileSystemCreator : ISdCardProxyFileSystemCreator



class BaseStorageService:
    def __init__(self, serviceImpl: BaseStorageServiceImpl, processId: int) -> None: ...
    def InvalidateBisCache(self) -> Result: ...
    def OpenBisStorage(self, outStorage: clr.Reference[SharedRef_1[IStorage]], id: BisPartitionId) -> Result: ...
    def OpenDeviceOperator(self, outDeviceOperator: clr.Reference[SharedRef_1[IDeviceOperator]]) -> Result: ...
    def OpenGameCardDetectionEventNotifier(self, outEventNotifier: clr.Reference[SharedRef_1[IEventNotifier]]) -> Result: ...
    def OpenGameCardStorage(self, outStorage: clr.Reference[SharedRef_1[IStorage]], handle: int, partitionId: GameCardPartitionRaw) -> Result: ...
    def OpenSdCardDetectionEventNotifier(self, outEventNotifier: clr.Reference[SharedRef_1[IEventNotifier]]) -> Result: ...
    def SimulateDeviceDetectionEvent(self, port: SdmmcPort, mode: SimulatingDeviceDetectionMode, signalEvent: bool) -> Result: ...


class BaseStorageServiceImpl:
    def __init__(self, configuration: clr.Reference[BaseStorageServiceImpl.Configuration]) -> None: ...
    def InvalidateBisCache(self) -> Result: ...
    def OpenBisStorage(self, outStorage: clr.Reference[SharedRef_1[IStorage]], partitionId: BisPartitionId) -> Result: ...
    def OpenGameCardPartition(self, outStorage: clr.Reference[SharedRef_1[IStorage]], handle: int, partitionId: GameCardPartitionRaw) -> Result: ...

    class Configuration:
        BisStorageCreator : IBuiltInStorageCreator
        DeviceOperator : IDeviceOperator
        FsServer : FileSystemServer
        GameCardStorageCreator : IGameCardStorageCreator



class DebugConfigurationService:
    def __init__(self, fsServer: FileSystemServer, serviceImpl: DebugConfigurationServiceImpl, processId: int) -> None: ...
    def Register(self, key: int, value: int) -> Result: ...
    def Unregister(self, key: int) -> Result: ...


class DebugConfigurationServiceImpl(IDisposable):
    def __init__(self, config: clr.Reference[DebugConfigurationServiceImpl.Configuration]) -> None: ...
    def Dispose(self) -> None: ...
    def Get(self, key: DebugOptionKey, defaultValue: int) -> int: ...
    def Register(self, key: int, value: int) -> None: ...
    def Unregister(self, key: int) -> None: ...

    class Configuration:
        IsDisabled : bool



class DefaultFsServerObjects:
    def __init__(self) -> None: ...
    @property
    def DeviceOperator(self) -> IDeviceOperator: ...
    @DeviceOperator.setter
    def DeviceOperator(self, value: IDeviceOperator) -> IDeviceOperator: ...
    @property
    def FsCreators(self) -> FileSystemCreatorInterfaces: ...
    @FsCreators.setter
    def FsCreators(self, value: FileSystemCreatorInterfaces) -> FileSystemCreatorInterfaces: ...
    @property
    def GameCard(self) -> EmulatedGameCard: ...
    @GameCard.setter
    def GameCard(self, value: EmulatedGameCard) -> EmulatedGameCard: ...
    @property
    def SdCard(self) -> EmulatedSdCard: ...
    @SdCard.setter
    def SdCard(self, value: EmulatedSdCard) -> EmulatedSdCard: ...
    @staticmethod
    def GetDefaultEmulatedCreators(rootFileSystem: IFileSystem, keySet: KeySet, fsServer: FileSystemServer, randomGenerator: RandomDataGenerator) -> DefaultFsServerObjects: ...


class EmulatedDeviceOperator(IDeviceOperator):
    def __init__(self, gameCard: EmulatedGameCard, sdCard: EmulatedSdCard) -> None: ...
    def ChallengeCardExistence(self, outResponseBuffer: OutBuffer, challengeSeedBuffer: InBuffer, challengeValueBuffer: InBuffer, handle: int) -> Result: ...
    def ClearDeviceSimulationEvent(self, port: int) -> Result: ...
    def Dispose(self) -> None: ...
    def EraseAndWriteParamDirectly(self, inBuffer: InBuffer, inBufferSize: int) -> Result: ...
    def EraseGameCard(self, gameCardSize: int, romAreaStartPageAddress: int) -> Result: ...
    def EraseMmc(self, partitionId: int) -> Result: ...
    def FinalizeGameCardDriver(self) -> Result: ...
    def ForceEraseGameCard(self) -> Result: ...
    def GetAndClearMmcErrorInfo(self, outStorageErrorInfo: clr.Reference[StorageErrorInfo], outLogSize: clr.Reference[int], logBuffer: OutBuffer, logBufferSize: int) -> Result: ...
    def GetAndClearSdCardErrorInfo(self, outStorageErrorInfo: clr.Reference[StorageErrorInfo], outLogSize: clr.Reference[int], logBuffer: OutBuffer, logBufferSize: int) -> Result: ...
    def GetGameCardAsicInfo(self, outRmaInfoBuffer: OutBuffer, rmaInfoBufferSize: int, asicFirmwareBuffer: InBuffer, asicFirmwareBufferSize: int) -> Result: ...
    def GetGameCardAttribute(self, outAttribute: clr.Reference[int], handle: int) -> Result: ...
    def GetGameCardCompatibilityType(self, outCompatibilityType: clr.Reference[int], handle: int) -> Result: ...
    def GetGameCardDeviceCertificate(self, outBuffer: OutBuffer, outBufferSize: int, handle: int) -> Result: ...
    def GetGameCardDeviceId(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    def GetGameCardDeviceIdForProdCard(self, outBuffer: OutBuffer, outBufferSize: int, devHeaderBuffer: InBuffer, devHeaderBufferSize: int) -> Result: ...
    def GetGameCardErrorInfo(self, outErrorInfo: clr.Reference[GameCardErrorInfo]) -> Result: ...
    def GetGameCardErrorReportInfo(self, outErrorInfo: clr.Reference[GameCardErrorReportInfo]) -> Result: ...
    def GetGameCardHandle(self, handle: clr.Reference[int]) -> Result: ...
    def GetGameCardIdSet(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    def GetGameCardImageHash(self, outBuffer: OutBuffer, outBufferSize: int, handle: int) -> Result: ...
    def GetGameCardUpdatePartitionInfo(self, outCupVersion: clr.Reference[int], outCupId: clr.Reference[int], handle: int) -> Result: ...
    def GetMmcCid(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    def GetMmcExtendedCsd(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    def GetMmcPartitionSize(self, outSize: clr.Reference[int], partitionId: int) -> Result: ...
    def GetMmcPatrolCount(self, outCount: clr.Reference[int]) -> Result: ...
    def GetMmcSpeedMode(self, outSpeedMode: clr.Reference[int]) -> Result: ...
    def GetSdCardCid(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    def GetSdCardProtectedAreaSize(self, outSize: clr.Reference[int]) -> Result: ...
    def GetSdCardSpeedMode(self, outSpeedMode: clr.Reference[int]) -> Result: ...
    def GetSdCardUserAreaSize(self, outSize: clr.Reference[int]) -> Result: ...
    def GetSdmmcConnectionStatus(self, outSpeedMode: clr.Reference[int], outBusWidth: clr.Reference[int], port: int) -> Result: ...
    def GetSpeedEmulationMode(self, outMode: clr.Reference[int]) -> Result: ...
    def IsGameCardInserted(self, outIsInserted: clr.Reference[bool]) -> Result: ...
    def IsSdCardInserted(self, outIsInserted: clr.Reference[bool]) -> Result: ...
    def ReadParamDirectly(self, outBuffer: OutBuffer, outBufferSize: int) -> Result: ...
    def ResumeMmcPatrol(self) -> Result: ...
    def ResumeSdmmcControl(self) -> Result: ...
    def SetDeviceSimulationEvent(self, port: int, simulatedOperationType: int, simulatedFailureType: int, failureResult: int, autoClearEvent: bool) -> Result: ...
    def SetSpeedEmulationMode(self, mode: int) -> Result: ...
    def SetVerifyWriteEnableFlag(self, isEnabled: bool) -> Result: ...
    def SuspendMmcPatrol(self) -> Result: ...
    def SuspendSdmmcControl(self) -> Result: ...
    def WriteToGameCardDirectly(self, offset: int, buffer: OutBuffer, bufferSize: int) -> Result: ...


class EmulatedGameCard:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, keySet: KeySet) -> None: ...
    def GetGameCardDeviceId(self, outBuffer: Span_1[int]) -> Result: ...
    def GetGameCardHandle(self) -> int: ...
    def GetGameCardImageHash(self, outBuffer: Span_1[int]) -> Result: ...
    def InsertGameCard(self, cardImageStorage: IStorage) -> None: ...
    def IsGameCardHandleInvalid(self, handle: int) -> bool: ...
    def IsGameCardInserted(self) -> bool: ...
    def Read(self, handle: int, offset: int, destination: Span_1[int]) -> Result: ...
    def RemoveGameCard(self) -> None: ...


class EmulatedSdCard:
    def __init__(self) -> None: ...
    def IsSdCardInserted(self) -> bool: ...
    def SetSdCardInsertionStatus(self, isInserted: bool) -> None: ...


class ExternalKeySet:
    def __init__(self) -> None: ...
    def Add(self, rightsId: RightsId, key: AccessKey) -> Result: ...
    def Clear(self) -> None: ...
    def Contains(self, rightsId: RightsId) -> bool: ...
    def EnsureCapacity(self, capacity: int) -> None: ...
    def Get(self, rightsId: RightsId, key: clr.Reference[AccessKey]) -> Result: ...
    def Remove(self, rightsId: RightsId) -> bool: ...
    def ToList(self) -> List_1[ValueTuple_2[RightsId, AccessKey]]: ...
    # Skipped TrimExcess due to it being static, abstract and generic.

    TrimExcess : TrimExcess_MethodGroup
    class TrimExcess_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, capacity: int) -> None:...



class FileSystemProxyConfiguration:
    def __init__(self) -> None: ...
    @property
    def AccessFailureManagementService(self) -> AccessFailureManagementServiceImpl: ...
    @AccessFailureManagementService.setter
    def AccessFailureManagementService(self, value: AccessFailureManagementServiceImpl) -> AccessFailureManagementServiceImpl: ...
    @property
    def AccessLogService(self) -> AccessLogServiceImpl: ...
    @AccessLogService.setter
    def AccessLogService(self, value: AccessLogServiceImpl) -> AccessLogServiceImpl: ...
    @property
    def BaseFileSystemService(self) -> BaseFileSystemServiceImpl: ...
    @BaseFileSystemService.setter
    def BaseFileSystemService(self, value: BaseFileSystemServiceImpl) -> BaseFileSystemServiceImpl: ...
    @property
    def BaseStorageService(self) -> BaseStorageServiceImpl: ...
    @BaseStorageService.setter
    def BaseStorageService(self, value: BaseStorageServiceImpl) -> BaseStorageServiceImpl: ...
    @property
    def DebugConfigurationService(self) -> DebugConfigurationServiceImpl: ...
    @DebugConfigurationService.setter
    def DebugConfigurationService(self, value: DebugConfigurationServiceImpl) -> DebugConfigurationServiceImpl: ...
    @property
    def FsCreatorInterfaces(self) -> FileSystemCreatorInterfaces: ...
    @FsCreatorInterfaces.setter
    def FsCreatorInterfaces(self, value: FileSystemCreatorInterfaces) -> FileSystemCreatorInterfaces: ...
    @property
    def NcaFileSystemService(self) -> NcaFileSystemServiceImpl: ...
    @NcaFileSystemService.setter
    def NcaFileSystemService(self, value: NcaFileSystemServiceImpl) -> NcaFileSystemServiceImpl: ...
    @property
    def ProgramRegistryService(self) -> ProgramRegistryServiceImpl: ...
    @ProgramRegistryService.setter
    def ProgramRegistryService(self, value: ProgramRegistryServiceImpl) -> ProgramRegistryServiceImpl: ...
    @property
    def SaveDataFileSystemService(self) -> SaveDataFileSystemServiceImpl: ...
    @SaveDataFileSystemService.setter
    def SaveDataFileSystemService(self, value: SaveDataFileSystemServiceImpl) -> SaveDataFileSystemServiceImpl: ...
    @property
    def StatusReportService(self) -> StatusReportServiceImpl: ...
    @StatusReportService.setter
    def StatusReportService(self, value: StatusReportServiceImpl) -> StatusReportServiceImpl: ...
    @property
    def TimeService(self) -> TimeServiceImpl: ...
    @TimeService.setter
    def TimeService(self, value: TimeServiceImpl) -> TimeServiceImpl: ...


class FileSystemProxyCoreImpl:
    def __init__(self, fsCreators: FileSystemCreatorInterfaces, baseFsService: BaseFileSystemServiceImpl) -> None: ...
    def OpenCloudBackupWorkStorageFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], storageId: CloudBackupWorkStorageId) -> Result: ...
    def OpenCustomStorageFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], storageId: CustomStorageId) -> Result: ...
    def OpenHostFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[Path], openCaseSensitive: bool) -> Result: ...
    def SetSdCardEncryptionSeed(self, seed: clr.Reference[EncryptionSeed]) -> Result: ...


class FileSystemProxyImpl(IFileSystemProxyForLoader, IFileSystemProxy):
    def AbandonAccessFailure(self, processId: int) -> Result: ...
    def CorruptSaveDataFileSystem(self, saveDataId: int) -> Result: ...
    def CorruptSaveDataFileSystemByOffset(self, spaceId: SaveDataSpaceId, saveDataId: int, offset: int) -> Result: ...
    def CorruptSaveDataFileSystemBySaveDataSpaceId(self, spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def CreatePaddingFile(self, size: int) -> Result: ...
    def CreateSaveDataFileSystem(self, attribute: clr.Reference[SaveDataAttribute], creationInfo: clr.Reference[SaveDataCreationInfo], metaInfo: clr.Reference[SaveDataMetaInfo]) -> Result: ...
    def CreateSaveDataFileSystemBySystemSaveDataId(self, attribute: clr.Reference[SaveDataAttribute], creationInfo: clr.Reference[SaveDataCreationInfo]) -> Result: ...
    def CreateSaveDataFileSystemWithCreationInfo2(self, creationInfo: clr.Reference[SaveDataCreationInfo2]) -> Result: ...
    def CreateSaveDataFileSystemWithHashSalt(self, attribute: clr.Reference[SaveDataAttribute], creationInfo: clr.Reference[SaveDataCreationInfo], metaInfo: clr.Reference[SaveDataMetaInfo], hashSalt: clr.Reference[HashSalt]) -> Result: ...
    def DeleteAllPaddingFiles(self) -> Result: ...
    def DeleteCacheStorage(self, index: int) -> Result: ...
    def DeleteSaveDataFileSystem(self, saveDataId: int) -> Result: ...
    def DeleteSaveDataFileSystemBySaveDataAttribute(self, spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute]) -> Result: ...
    def DeleteSaveDataFileSystemBySaveDataSpaceId(self, spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def DisableAutoSaveDataCreation(self) -> Result: ...
    def Dispose(self) -> None: ...
    def ExtendSaveDataFileSystem(self, spaceId: SaveDataSpaceId, saveDataId: int, dataSize: int, journalSize: int) -> Result: ...
    def FindSaveDataWithFilter(self, count: clr.Reference[int], saveDataInfoBuffer: OutBuffer, spaceId: SaveDataSpaceId, filter: clr.Reference[SaveDataFilter]) -> Result: ...
    def FlushAccessLogOnSdCard(self) -> Result: ...
    def FormatBaseFileSystem(self, fileSystemId: BaseFileSystemId) -> Result: ...
    def FormatSdCardDryRun(self) -> Result: ...
    def FormatSdCardFileSystem(self) -> Result: ...
    def GetAccessFailureDetectionEvent(self, eventHandle: clr.Reference[NativeHandle]) -> Result: ...
    def GetAndClearErrorInfo(self, errorInfo: clr.Reference[FileSystemProxyErrorInfo]) -> Result: ...
    def GetAndClearMemoryReportInfo(self, reportInfo: clr.Reference[MemoryReportInfo]) -> Result: ...
    def GetCacheStorageSize(self, dataSize: clr.Reference[int], journalSize: clr.Reference[int], index: int) -> Result: ...
    def GetFreeSpaceSizeForSaveData(self, freeSpaceSize: clr.Reference[int], spaceId: SaveDataSpaceId) -> Result: ...
    def GetFsStackUsage(self, stackUsage: clr.Reference[int], threadType: FsStackUsageThreadType) -> Result: ...
    def GetGlobalAccessLogMode(self, mode: clr.Reference[GlobalAccessLogMode]) -> Result: ...
    def GetProgramIndexForAccessLog(self, programIndex: clr.Reference[int], programCount: clr.Reference[int]) -> Result: ...
    def GetRightsId(self, rightsId: clr.Reference[RightsId], programId: ProgramId, storageId: StorageId) -> Result: ...
    def GetRightsIdAndKeyGenerationByPath(self, rightsId: clr.Reference[RightsId], keyGeneration: clr.Reference[int], path: clr.Reference[FspPath]) -> Result: ...
    def GetRightsIdByPath(self, rightsId: clr.Reference[RightsId], path: clr.Reference[FspPath]) -> Result: ...
    def GetSaveDataCommitId(self, commitId: clr.Reference[int], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def InvalidateBisCache(self) -> Result: ...
    def IsAccessFailureDetected(self, isDetected: clr.Reference[bool], processId: int) -> Result: ...
    def IsArchivedProgram(self, isArchived: clr.Reference[bool], processId: int) -> Result: ...
    def IsExFatSupported(self, isSupported: clr.Reference[bool]) -> Result: ...
    def IsSdCardAccessible(self, isAccessible: clr.Reference[bool]) -> Result: ...
    def ListAccessibleSaveDataOwnerId(self, readCount: clr.Reference[int], idBuffer: OutBuffer, programId: ProgramId, startIndex: int, bufferIdCount: int) -> Result: ...
    def NotifySystemDataUpdateEvent(self) -> Result: ...
    def OpenAccessFailureDetectionEventNotifier(self, outEventNotifier: clr.Reference[SharedRef_1[IEventNotifier]], processId: int, notifyOnDeepRetry: bool) -> Result: ...
    def OpenBaseFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], fileSystemId: BaseFileSystemId) -> Result: ...
    def OpenBisFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], rootPath: clr.Reference[FspPath], partitionId: BisPartitionId) -> Result: ...
    def OpenBisStorage(self, outStorage: clr.Reference[SharedRef_1[IStorage]], partitionId: BisPartitionId) -> Result: ...
    def OpenBisWiper(self, outBisWiper: clr.Reference[SharedRef_1[IWiper]], transferMemoryHandle: NativeHandle, transferMemorySize: int) -> Result: ...
    def OpenCloudBackupWorkStorageFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], storageId: CloudBackupWorkStorageId) -> Result: ...
    def OpenCodeFileSystem(self, fileSystem: clr.Reference[SharedRef_1[IFileSystem]], verificationData: clr.Reference[CodeVerificationData], path: clr.Reference[FspPath], programId: ProgramId) -> Result: ...
    def OpenContentStorageFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], storageId: ContentStorageId) -> Result: ...
    def OpenCustomStorageFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], storageId: CustomStorageId) -> Result: ...
    def OpenDataFileSystemByCurrentProcess(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> Result: ...
    def OpenDataFileSystemByProgramId(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], programId: ProgramId) -> Result: ...
    def OpenDataFileSystemWithProgramIndex(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], programIndex: int) -> Result: ...
    def OpenDataStorageByCurrentProcess(self, outStorage: clr.Reference[SharedRef_1[IStorage]]) -> Result: ...
    def OpenDataStorageByDataId(self, outStorage: clr.Reference[SharedRef_1[IStorage]], dataId: DataId, storageId: StorageId) -> Result: ...
    def OpenDataStorageByPath(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[FspPath], fsType: FileSystemProxyType) -> Result: ...
    def OpenDataStorageByProgramId(self, outStorage: clr.Reference[SharedRef_1[IStorage]], programId: ProgramId) -> Result: ...
    def OpenDataStorageWithProgramIndex(self, outStorage: clr.Reference[SharedRef_1[IStorage]], programIndex: int) -> Result: ...
    def OpenDeviceOperator(self, outDeviceOperator: clr.Reference[SharedRef_1[IDeviceOperator]]) -> Result: ...
    def OpenFileSystemWithId(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[FspPath], id: int, fsType: FileSystemProxyType) -> Result: ...
    def OpenFileSystemWithPatch(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], programId: ProgramId, fsType: FileSystemProxyType) -> Result: ...
    def OpenGameCardDetectionEventNotifier(self, outEventNotifier: clr.Reference[SharedRef_1[IEventNotifier]]) -> Result: ...
    def OpenGameCardFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], handle: int, partitionId: GameCardPartition) -> Result: ...
    def OpenGameCardStorage(self, outStorage: clr.Reference[SharedRef_1[IStorage]], handle: int, partitionId: GameCardPartitionRaw) -> Result: ...
    def OpenHostFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[FspPath]) -> Result: ...
    def OpenHostFileSystemWithOption(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[FspPath], option: MountHostOption) -> Result: ...
    def OpenImageDirectoryFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], directoryId: ImageDirectoryId) -> Result: ...
    def OpenMultiCommitManager(self, outCommitManager: clr.Reference[SharedRef_1[IMultiCommitManager]]) -> Result: ...
    def OpenPatchDataStorageByCurrentProcess(self, outStorage: clr.Reference[SharedRef_1[IStorage]]) -> Result: ...
    def OpenReadOnlySaveDataFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute]) -> Result: ...
    def OpenRegisteredUpdatePartition(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> Result: ...
    def OpenSaveDataFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute]) -> Result: ...
    def OpenSaveDataFileSystemBySystemSaveDataId(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute]) -> Result: ...
    def OpenSaveDataInfoReader(self, outInfoReader: clr.Reference[SharedRef_1[ISaveDataInfoReader]]) -> Result: ...
    def OpenSaveDataInfoReaderBySaveDataSpaceId(self, outInfoReader: clr.Reference[SharedRef_1[ISaveDataInfoReader]], spaceId: SaveDataSpaceId) -> Result: ...
    def OpenSaveDataInfoReaderOnlyCacheStorage(self, outInfoReader: clr.Reference[SharedRef_1[ISaveDataInfoReader]]) -> Result: ...
    def OpenSaveDataInfoReaderWithFilter(self, outInfoReader: clr.Reference[SharedRef_1[ISaveDataInfoReader]], spaceId: SaveDataSpaceId, filter: clr.Reference[SaveDataFilter]) -> Result: ...
    def OpenSaveDataInternalStorageFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def OpenSaveDataMetaFile(self, outFile: clr.Reference[SharedRef_1[IFile]], spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute], type: SaveDataMetaType) -> Result: ...
    def OpenSaveDataMover(self, outSaveDataMover: clr.Reference[SharedRef_1[ISaveDataMover]], sourceSpaceId: SaveDataSpaceId, destinationSpaceId: SaveDataSpaceId, workBufferHandle: NativeHandle, workBufferSize: int) -> Result: ...
    def OpenSaveDataTransferManager(self, outTransferManager: clr.Reference[SharedRef_1[ISaveDataTransferManager]]) -> Result: ...
    def OpenSaveDataTransferManagerForRepair(self, outTransferManager: clr.Reference[SharedRef_1[ISaveDataTransferManagerForRepair]]) -> Result: ...
    def OpenSaveDataTransferManagerForSaveDataRepair(self, outTransferManager: clr.Reference[SharedRef_1[ISaveDataTransferManagerForSaveDataRepair]]) -> Result: ...
    def OpenSaveDataTransferManagerVersion2(self, outTransferManager: clr.Reference[SharedRef_1[ISaveDataTransferManagerWithDivision]]) -> Result: ...
    def OpenSaveDataTransferProhibiter(self, outProhibiter: clr.Reference[SharedRef_1[ISaveDataTransferProhibiter]], applicationId: ApplicationId) -> Result: ...
    def OpenSdCardDetectionEventNotifier(self, outEventNotifier: clr.Reference[SharedRef_1[IEventNotifier]]) -> Result: ...
    def OpenSdCardFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> Result: ...
    def OpenSystemDataUpdateEventNotifier(self, outEventNotifier: clr.Reference[SharedRef_1[IEventNotifier]]) -> Result: ...
    def OutputAccessLogToSdCard(self, textBuffer: InBuffer) -> Result: ...
    def OutputApplicationInfoAccessLog(self, applicationInfo: clr.Reference[ApplicationInfo]) -> Result: ...
    def OutputMultiProgramTagAccessLog(self) -> Result: ...
    def OverrideSaveDataTransferTokenSignVerificationKey(self, key: InBuffer) -> Result: ...
    def QuerySaveDataInternalStorageTotalSize(self, size: clr.Reference[int], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def QuerySaveDataTotalSize(self, totalSize: clr.Reference[int], dataSize: int, journalSize: int) -> Result: ...
    def ReadSaveDataFileSystemExtraData(self, extraDataBuffer: OutBuffer, saveDataId: int) -> Result: ...
    def ReadSaveDataFileSystemExtraDataBySaveDataAttribute(self, extraDataBuffer: OutBuffer, spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute]) -> Result: ...
    def ReadSaveDataFileSystemExtraDataBySaveDataSpaceId(self, extraDataBuffer: OutBuffer, spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def ReadSaveDataFileSystemExtraDataWithMaskBySaveDataAttribute(self, extraDataBuffer: OutBuffer, spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute], maskBuffer: InBuffer) -> Result: ...
    def RegisterDebugConfiguration(self, key: int, value: int) -> Result: ...
    def RegisterExternalKey(self, rightsId: clr.Reference[RightsId], externalKey: clr.Reference[AccessKey]) -> Result: ...
    def RegisterProgramIndexMapInfo(self, programIndexMapInfoBuffer: InBuffer, programCount: int) -> Result: ...
    def RegisterSaveDataFileSystemAtomicDeletion(self, saveDataIds: InBuffer) -> Result: ...
    def RegisterUpdatePartition(self) -> Result: ...
    def ResolveAccessFailure(self, processId: int) -> Result: ...
    def SetBisRootForHost(self, partitionId: BisPartitionId, path: clr.Reference[FspPath]) -> Result: ...
    def SetCurrentPosixTimeWithTimeDifference(self, currentTime: int, timeDifference: int) -> Result: ...
    def SetCurrentProcess(self, processId: int) -> Result: ...
    def SetGlobalAccessLogMode(self, mode: GlobalAccessLogMode) -> Result: ...
    def SetSaveDataRootPath(self, path: clr.Reference[FspPath]) -> Result: ...
    def SetSaveDataSize(self, saveDataSize: int, saveDataJournalSize: int) -> Result: ...
    def SetSdCardAccessibility(self, isAccessible: bool) -> Result: ...
    def SetSdCardEncryptionSeed(self, seed: clr.Reference[EncryptionSeed]) -> Result: ...
    def SimulateDeviceDetectionEvent(self, port: SdmmcPort, mode: SimulatingDeviceDetectionMode, signalEvent: bool) -> Result: ...
    def UnregisterAllExternalKey(self) -> Result: ...
    def UnregisterDebugConfiguration(self, key: int) -> Result: ...
    def UnregisterExternalKey(self, rightsId: clr.Reference[RightsId]) -> Result: ...
    def UnsetSaveDataRootPath(self) -> Result: ...
    def UpdateSaveDataMacForDebug(self, spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def VerifySaveDataFileSystem(self, saveDataId: int, readBuffer: OutBuffer) -> Result: ...
    def VerifySaveDataFileSystemBySaveDataSpaceId(self, spaceId: SaveDataSpaceId, saveDataId: int, readBuffer: OutBuffer) -> Result: ...
    def WriteSaveDataFileSystemExtraData(self, saveDataId: int, spaceId: SaveDataSpaceId, extraDataBuffer: InBuffer) -> Result: ...
    def WriteSaveDataFileSystemExtraDataWithMask(self, saveDataId: int, spaceId: SaveDataSpaceId, extraDataBuffer: InBuffer, maskBuffer: InBuffer) -> Result: ...
    def WriteSaveDataFileSystemExtraDataWithMaskBySaveDataAttribute(self, attribute: clr.Reference[SaveDataAttribute], spaceId: SaveDataSpaceId, extraDataBuffer: InBuffer, maskBuffer: InBuffer) -> Result: ...


class FileSystemProxyImplGlobalMethods(abc.ABC):
    @staticmethod
    def InitializeFileSystemProxy(fsSrv: FileSystemServer, configuration: FileSystemProxyConfiguration) -> None: ...


class FileSystemServer(IDisposable):
    def __init__(self, horizonClient: HorizonClient) -> None: ...
    @property
    def Impl(self) -> FileSystemServerImpl: ...
    @property
    def Storage(self) -> StorageService: ...
    def Dispose(self) -> None: ...


class FileSystemServerConfig:
    def __init__(self) -> None: ...
    @property
    def DeviceOperator(self) -> IDeviceOperator: ...
    @DeviceOperator.setter
    def DeviceOperator(self, value: IDeviceOperator) -> IDeviceOperator: ...
    @property
    def ExternalKeySet(self) -> ExternalKeySet: ...
    @ExternalKeySet.setter
    def ExternalKeySet(self, value: ExternalKeySet) -> ExternalKeySet: ...
    @property
    def FsCreators(self) -> FileSystemCreatorInterfaces: ...
    @FsCreators.setter
    def FsCreators(self, value: FileSystemCreatorInterfaces) -> FileSystemCreatorInterfaces: ...
    @property
    def RandomGenerator(self) -> RandomDataGenerator: ...
    @RandomGenerator.setter
    def RandomGenerator(self, value: RandomDataGenerator) -> RandomDataGenerator: ...


class FileSystemServerImpl:
    pass


class FileSystemServerInitializer(abc.ABC):
    @staticmethod
    def InitializeWithConfig(client: HorizonClient, server: FileSystemServer, config: FileSystemServerConfig) -> None: ...


class IDeviceHandleManager(typing.Protocol):
    @abc.abstractmethod
    def GetHandle(self, handle: clr.Reference[StorageDeviceHandle]) -> Result: ...
    @abc.abstractmethod
    def IsValid(self, handle: clr.Reference[StorageDeviceHandle]) -> bool: ...


class InternalProgramIdRangeForSpeedEmulation:
    def __init__(self, min: int, max: int) -> None: ...
    ProgramIdMax : int
    ProgramIdMin : int


class ISaveDataIndexer(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def Commit(self) -> Result: ...
    @abc.abstractmethod
    def Delete(self, saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def Get(self, value: clr.Reference[SaveDataIndexerValue], key: clr.Reference[SaveDataAttribute]) -> Result: ...
    @abc.abstractmethod
    def GetIndexCount(self) -> int: ...
    @abc.abstractmethod
    def GetKey(self, key: clr.Reference[SaveDataAttribute], saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def GetValue(self, value: clr.Reference[SaveDataIndexerValue], saveDataId: int) -> Result: ...
    @abc.abstractmethod
    def IsRemainedReservedOnly(self) -> bool: ...
    @abc.abstractmethod
    def OpenSaveDataInfoReader(self, outInfoReader: clr.Reference[SharedRef_1[SaveDataInfoReaderImpl]]) -> Result: ...
    @abc.abstractmethod
    def Publish(self, saveDataId: clr.Reference[int], key: clr.Reference[SaveDataAttribute]) -> Result: ...
    @abc.abstractmethod
    def PutStaticSaveDataIdIndex(self, key: clr.Reference[SaveDataAttribute]) -> Result: ...
    @abc.abstractmethod
    def Reset(self) -> Result: ...
    @abc.abstractmethod
    def Rollback(self) -> Result: ...
    @abc.abstractmethod
    def SetSize(self, saveDataId: int, size: int) -> Result: ...
    @abc.abstractmethod
    def SetSpaceId(self, saveDataId: int, spaceId: SaveDataSpaceId) -> Result: ...
    @abc.abstractmethod
    def SetState(self, saveDataId: int, state: SaveDataState) -> Result: ...
    @abc.abstractmethod
    def SetValue(self, key: clr.Reference[SaveDataAttribute], value: clr.Reference[SaveDataIndexerValue]) -> Result: ...


class ISaveDataIndexerManager(typing.Protocol):
    @abc.abstractmethod
    def InvalidateIndexer(self, spaceId: SaveDataSpaceId) -> None: ...
    @abc.abstractmethod
    def OpenSaveDataIndexerAccessor(self, outAccessor: clr.Reference[UniqueRef_1[SaveDataIndexerAccessor]], isInitialOpen: clr.Reference[bool], spaceId: SaveDataSpaceId) -> Result: ...
    @abc.abstractmethod
    def ResetIndexer(self, spaceId: SaveDataSpaceId) -> None: ...


class IStackUsageReporter(typing.Protocol):
    @abc.abstractmethod
    def GetStackUsage(self) -> int: ...


class MemoryReport(abc.ABC):
    @abc.abstractmethod
    def Clear(self) -> None: ...
    @abc.abstractmethod
    def GetAllocateSizeMax(self) -> int: ...
    @abc.abstractmethod
    def GetFreeSizePeak(self) -> int: ...
    @abc.abstractmethod
    def GetRetriedCount(self) -> int: ...
    @abc.abstractmethod
    def GetTotalAllocatableSizePeak(self) -> int: ...


class NcaFileSystemServiceImpl:
    def __init__(self, configuration: clr.Reference[NcaFileSystemServiceImpl.Configuration], externalKeySet: ExternalKeySet) -> None: ...
    def GetAndClearRomFsErrorInfo(self, recoveredByRemountCount: clr.Reference[int], unrecoverableCount: clr.Reference[int], recoveredByCacheInvalidationCount: clr.Reference[int]) -> None: ...
    def GetRightsId(self, rightsId: clr.Reference[RightsId], keyGeneration: clr.Reference[int], path: clr.Reference[Path], programId: ProgramId) -> Result: ...
    def HandleResolubleAccessFailure(self, wasDeferred: clr.Reference[bool], resultForNoFailureDetected: Result, processId: int) -> Result: ...
    def IncrementRomFsRecoveredByInvalidateCacheCount(self) -> None: ...
    def IncrementRomFsRemountForDataCorruptionCount(self) -> None: ...
    def IncrementRomFsUnrecoverableDataCorruptionByRemountCount(self) -> None: ...
    def OpenContentStorageFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], contentStorageId: ContentStorageId) -> Result: ...
    def OpenDataFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[Path], fsType: FileSystemProxyType, programId: int, isDirectory: bool) -> Result: ...
    def OpenFileSystemWithPatch(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], originalNcaPath: clr.Reference[Path], currentNcaPath: clr.Reference[Path], fsType: FileSystemProxyType, id: int) -> Result: ...
    def OpenHostFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], rootPath: clr.Reference[Path], openCaseSensitive: bool) -> Result: ...
    def OpenRegisteredUpdatePartition(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> Result: ...
    def OpenStorageWithPatch(self, outStorage: clr.Reference[SharedRef_1[IStorage]], ncaHeaderDigest: clr.Reference[Hash], originalNcaPath: clr.Reference[Path], currentNcaPath: clr.Reference[Path], fsType: FileSystemProxyType, id: int) -> Result: ...
    def RegisterExternalKey(self, rightsId: clr.Reference[RightsId], accessKey: clr.Reference[AccessKey]) -> Result: ...
    def RegisterUpdatePartition(self, programId: int, path: clr.Reference[Path]) -> Result: ...
    def ResolveApplicationHtmlDocumentPath(self, isDirectory: clr.Reference[bool], path: clr.Reference[Path], applicationId: ApplicationId, storageId: StorageId) -> Result: ...
    def ResolveProgramPath(self, isDirectory: clr.Reference[bool], path: clr.Reference[Path], programId: ProgramId, storageId: StorageId) -> Result: ...
    def ResolveRegisteredHtmlDocumentPath(self, path: clr.Reference[Path], id: int) -> Result: ...
    def ResolveRomPath(self, isDirectory: clr.Reference[bool], path: clr.Reference[Path], id: int, storageId: StorageId) -> Result: ...
    def ResolveRomReferenceProgramId(self, targetProgramId: clr.Reference[ProgramId], programId: ProgramId, programIndex: int) -> Result: ...
    def SetSdCardEncryptionSeed(self, encryptionSeed: clr.Reference[EncryptionSeed]) -> Result: ...
    def UnregisterAllExternalKey(self) -> Result: ...
    def UnregisterExternalKey(self, rightsId: clr.Reference[RightsId]) -> Result: ...
    # Skipped OpenFileSystem due to it being static, abstract and generic.

    OpenFileSystem : OpenFileSystem_MethodGroup
    class OpenFileSystem_MethodGroup:
        @typing.overload
        def __call__(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[Path], type: FileSystemProxyType, id: int, isDirectory: bool) -> Result:...
        @typing.overload
        def __call__(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[Path], type: FileSystemProxyType, canMountSystemDataPrivate: bool, id: int, isDirectory: bool) -> Result:...
        @typing.overload
        def __call__(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], verificationData: clr.Reference[CodeVerificationData], path: clr.Reference[Path], type: FileSystemProxyType, canMountSystemDataPrivate: bool, id: int, isDirectory: bool) -> Result:...


    class Configuration:
        AccessFailureManagementService : AccessFailureManagementServiceImpl
        BaseFsService : BaseFileSystemServiceImpl
        EncryptedFsCreator : IEncryptedFileSystemCreator
        FsServer : FileSystemServer
        LocalFsCreator : ILocalFileSystemCreator
        PartitionFsCreator : IPartitionFileSystemCreator
        ProgramRegistryService : ProgramRegistryServiceImpl
        RomFsCreator : IRomFileSystemCreator
        SpeedEmulationRange : InternalProgramIdRangeForSpeedEmulation
        StorageOnNcaCreator : IStorageOnNcaCreator
        SubDirectoryFsCreator : ISubDirectoryFileSystemCreator
        TargetManagerFsCreator : ITargetManagerFileSystemCreator



class PatrolAllocateCountGetter(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, successCount: clr.Reference[int], failureCount: clr.Reference[int], callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, successCount: clr.Reference[int], failureCount: clr.Reference[int], result: IAsyncResult) -> Result: ...
    def Invoke(self, successCount: clr.Reference[int], failureCount: clr.Reference[int]) -> Result: ...


class ProgramRegistryImpl(IProgramRegistry):
    def __init__(self, server: FileSystemServer) -> None: ...
    def Dispose(self) -> None: ...
    def GetProgramInfo(self, programInfo: clr.Reference[ProgramInfo], processId: int) -> Result: ...
    def GetProgramInfoByProgramId(self, programInfo: clr.Reference[ProgramInfo], programId: int) -> Result: ...
    @staticmethod
    def Initialize(fsServer: FileSystemServer, serviceImpl: ProgramRegistryServiceImpl) -> None: ...
    def RegisterProgram(self, processId: int, programId: ProgramId, storageId: StorageId, accessControlData: InBuffer, accessControlDataSize: int, accessControlDescriptor: InBuffer, accessControlDescriptorSize: int) -> Result: ...
    def SetCurrentProcess(self, processId: int) -> Result: ...
    def UnregisterProgram(self, processId: int) -> Result: ...


class ProgramRegistryServiceImpl(IDisposable):
    def __init__(self, config: clr.Reference[ProgramRegistryServiceImpl.Configuration]) -> None: ...
    def Dispose(self) -> None: ...
    def GetProgramIdByIndex(self, programId: ProgramId, programIndex: int) -> ProgramId: ...
    def GetProgramIndexMapInfo(self, programId: ProgramId) -> Optional_1[ProgramIndexMapInfo]: ...
    def GetProgramIndexMapInfoCount(self) -> int: ...
    def GetProgramInfo(self, programInfo: clr.Reference[ProgramInfo], processId: int) -> Result: ...
    def GetProgramInfoByProgramId(self, programInfo: clr.Reference[ProgramInfo], programId: int) -> Result: ...
    def RegisterProgramInfo(self, processId: int, programId: ProgramId, storageId: StorageId, accessControlData: ReadOnlySpan_1[int], accessControlDescriptor: ReadOnlySpan_1[int]) -> Result: ...
    def ResetProgramIndexMapInfo(self, programIndexMapInfo: ReadOnlySpan_1[ProgramIndexMapInfo]) -> Result: ...
    def UnregisterProgramInfo(self, processId: int) -> Result: ...

    class Configuration:
        FsServer : FileSystemServer



class SaveDataFileStorageHolder:
    def __init__(self, fsServer: FileSystemServer) -> None: ...
    def Dispose(self) -> None: ...
    def GetStorage(self, spaceId: SaveDataSpaceId, saveDataId: int) -> SharedRef_1[SaveDataOpenTypeSetFileStorage]: ...
    def OpenSaveDataStorage(self, outSaveDataStorage: clr.Reference[SharedRef_1[IStorage]], baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, saveDataId: int, mode: OpenMode, type: Optional_1[SaveDataOpenTypeSetFileStorage.OpenType]) -> Result: ...
    def Register(self, storage: clr.Reference[SharedRef_1[SaveDataOpenTypeSetFileStorage]], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def Unregister(self, spaceId: SaveDataSpaceId, saveDataId: int) -> None: ...


class SaveDataFileSystemServiceImpl(IDisposable):
    def __init__(self, configuration: clr.Reference[SaveDataFileSystemServiceImpl.Configuration]) -> None: ...
    def CorruptSaveDataFileSystem(self, spaceId: SaveDataSpaceId, saveDataId: int, offset: int, saveDataRootPath: clr.Reference[Path]) -> Result: ...
    def CreateSaveDataFileSystem(self, saveDataId: int, creationInfo: clr.Reference[SaveDataCreationInfo2], saveDataRootPath: clr.Reference[Path], skipFormat: bool) -> Result: ...
    def CreateSaveDataMeta(self, saveDataId: int, spaceId: SaveDataSpaceId, metaType: SaveDataMetaType, metaFileSize: int) -> Result: ...
    def DeleteAllSaveDataMetas(self, saveDataId: int, spaceId: SaveDataSpaceId) -> Result: ...
    def DeleteSaveDataFileSystem(self, spaceId: SaveDataSpaceId, saveDataId: int, wipeSaveFile: bool, saveDataRootPath: clr.Reference[Path]) -> Result: ...
    def DeleteSaveDataMeta(self, saveDataId: int, spaceId: SaveDataSpaceId, metaType: SaveDataMetaType) -> Result: ...
    def Dispose(self) -> None: ...
    def DoesSaveDataEntityExist(self, exists: clr.Reference[bool], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def ExtendSaveDataFileSystemCore(self, extendedTotalSize: clr.Reference[int], saveDataId: int, spaceId: SaveDataSpaceId, type: SaveDataType, dataSize: int, journalSize: int, saveDataRootPath: clr.Reference[Path], isExtensionStart: bool) -> Result: ...
    def FinishExtendSaveDataFileSystem(self, saveDataId: int, spaceId: SaveDataSpaceId) -> Result: ...
    def GetDebugConfigurationService(self) -> DebugConfigurationServiceImpl: ...
    def GetSaveDataIndexCount(self, count: clr.Reference[int]) -> Result: ...
    def GetSaveDataTransferCryptoConfiguration(self) -> SaveDataTransferCryptoConfiguration: ...
    def IsAllowedDirectorySaveData(self, spaceId: SaveDataSpaceId, saveDataRootPath: clr.Reference[Path]) -> bool: ...
    def IsProvisionallyCommittedSaveData(self, isProvisionallyCommitted: clr.Reference[bool], saveInfo: clr.Reference[SaveDataInfo]) -> Result: ...
    def IsSdCardAccessible(self) -> bool: ...
    def OpenSaveDataFile(self, outFile: clr.Reference[SharedRef_1[IFile]], spaceId: SaveDataSpaceId, saveDataId: int, openMode: OpenMode) -> Result: ...
    def OpenSaveDataFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, saveDataId: int, saveDataRootPath: clr.Reference[Path], openReadOnly: bool, type: SaveDataType, cacheExtraData: bool) -> Result: ...
    def OpenSaveDataIndexerAccessor(self, outAccessor: clr.Reference[UniqueRef_1[SaveDataIndexerAccessor]], isInitialOpen: clr.Reference[bool], spaceId: SaveDataSpaceId) -> Result: ...
    def OpenSaveDataInternalStorageFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, saveDataId: int, saveDataRootPath: clr.Reference[Path], useSecondMacKey: bool, isReconstructible: bool) -> Result: ...
    def OpenSaveDataMeta(self, outMetaFile: clr.Reference[UniqueRef_1[IFile]], saveDataId: int, spaceId: SaveDataSpaceId, metaType: SaveDataMetaType) -> Result: ...
    def OpenSaveDataMetaDirectoryFileSystem(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def QuerySaveDataTotalSize(self, totalSize: clr.Reference[int], blockSize: int, dataSize: int, journalSize: int) -> Result: ...
    def ReadSaveDataFileSystemExtraData(self, extraData: clr.Reference[SaveDataExtraData], spaceId: SaveDataSpaceId, saveDataId: int, type: SaveDataType, saveDataRootPath: clr.Reference[Path]) -> Result: ...
    def ResetTemporaryStorageIndexer(self) -> None: ...
    def ResolveDefaultSaveDataReferenceProgramId(self, programId: ProgramId) -> ProgramId: ...
    def ResumeExtendSaveDataFileSystem(self, extendedTotalSize: clr.Reference[int], saveDataId: int, spaceId: SaveDataSpaceId, type: SaveDataType, saveDataRootPath: clr.Reference[Path]) -> Result: ...
    def RevertExtendSaveDataFileSystem(self, saveDataId: int, spaceId: SaveDataSpaceId, originalSize: int, saveDataRootPath: clr.Reference[Path]) -> None: ...
    def SetSdCardAccessibility(self, isAccessible: bool) -> None: ...
    def SetSdCardEncryptionSeed(self, seed: clr.Reference[EncryptionSeed]) -> Result: ...
    def StartExtendSaveDataFileSystem(self, extendedTotalSize: clr.Reference[int], saveDataId: int, spaceId: SaveDataSpaceId, type: SaveDataType, dataSize: int, journalSize: int, saveDataRootPath: clr.Reference[Path]) -> Result: ...
    def WriteSaveDataFileSystemExtraData(self, spaceId: SaveDataSpaceId, saveDataId: int, extraData: clr.Reference[SaveDataExtraData], saveDataRootPath: clr.Reference[Path], type: SaveDataType, updateTimeStamp: bool) -> Result: ...
    # Skipped OpenSaveDataDirectoryFileSystem due to it being static, abstract and generic.

    OpenSaveDataDirectoryFileSystem : OpenSaveDataDirectoryFileSystem_MethodGroup
    class OpenSaveDataDirectoryFileSystem_MethodGroup:
        @typing.overload
        def __call__(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId) -> Result:...
        @typing.overload
        def __call__(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, saveDataRootPath: clr.Reference[Path], allowEmulatedSave: bool) -> Result:...

    # Skipped OpenSaveDataDirectoryFileSystemImpl due to it being static, abstract and generic.

    OpenSaveDataDirectoryFileSystemImpl : OpenSaveDataDirectoryFileSystemImpl_MethodGroup
    class OpenSaveDataDirectoryFileSystemImpl_MethodGroup:
        @typing.overload
        def __call__(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, directoryPath: clr.Reference[Path]) -> Result:...
        @typing.overload
        def __call__(self, outFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, directoryPath: clr.Reference[Path], createIfMissing: bool) -> Result:...


    class Configuration:
        BaseFsService : BaseFileSystemServiceImpl
        BufferManager : IBufferManager
        DebugConfigService : DebugConfigurationServiceImpl
        EncryptedFsCreator : IEncryptedFileSystemCreator
        FsServer : FileSystemServer
        GenerateRandomData : RandomDataGenerator
        IsPseudoSaveData : Func_1[bool]
        LocalFsCreator : ILocalFileSystemCreator
        ProgramRegistryService : ProgramRegistryServiceImpl
        SaveDataFileSystemCacheCount : int
        SaveFsCreator : ISaveDataFileSystemCreator
        SaveIndexerManager : ISaveDataIndexerManager
        SaveTransferCryptoConfig : SaveDataTransferCryptoConfiguration
        TargetManagerFsCreator : ITargetManagerFileSystemCreator
        TimeService : TimeServiceImpl



class SaveDataIndexer(ISaveDataIndexer):
    def __init__(self, fsClient: FileSystemClient, mountName: U8Span, spaceId: SaveDataSpaceId, saveDataId: int, memoryResource: MemoryResource) -> None: ...
    def Commit(self) -> Result: ...
    def Delete(self, saveDataId: int) -> Result: ...
    def Dispose(self) -> None: ...
    @staticmethod
    def GenerateSaveDataInfo(info: clr.Reference[SaveDataInfo], key: clr.Reference[SaveDataAttribute], value: clr.Reference[SaveDataIndexerValue]) -> None: ...
    def Get(self, value: clr.Reference[SaveDataIndexerValue], key: clr.Reference[SaveDataAttribute]) -> Result: ...
    def GetHandle(self) -> int: ...
    def GetIndexCount(self) -> int: ...
    def GetKey(self, key: clr.Reference[SaveDataAttribute], saveDataId: int) -> Result: ...
    def GetScopedLock(self) -> UniqueLockRef_1[SdkMutexType]: ...
    def GetValue(self, value: clr.Reference[SaveDataIndexerValue], saveDataId: int) -> Result: ...
    def IsRemainedReservedOnly(self) -> bool: ...
    def OpenSaveDataInfoReader(self, outInfoReader: clr.Reference[SharedRef_1[SaveDataInfoReaderImpl]]) -> Result: ...
    def Publish(self, saveDataId: clr.Reference[int], key: clr.Reference[SaveDataAttribute]) -> Result: ...
    def PutStaticSaveDataIdIndex(self, key: clr.Reference[SaveDataAttribute]) -> Result: ...
    def Reset(self) -> Result: ...
    def Rollback(self) -> Result: ...
    def SetSize(self, saveDataId: int, size: int) -> Result: ...
    def SetSpaceId(self, saveDataId: int, spaceId: SaveDataSpaceId) -> Result: ...
    def SetState(self, saveDataId: int, state: SaveDataState) -> Result: ...
    def SetValue(self, key: clr.Reference[SaveDataAttribute], value: clr.Reference[SaveDataIndexerValue]) -> Result: ...
    def UnregisterReader(self) -> None: ...


class SaveDataIndexerAccessor(IDisposable):
    def __init__(self, indexer: ISaveDataIndexer, indexerLock: clr.Reference[UniqueLock_1[SdkMutex]]) -> None: ...
    def Dispose(self) -> None: ...
    def GetInterface(self) -> ISaveDataIndexer: ...


class SaveDataIndexerLite(ISaveDataIndexer):
    def __init__(self) -> None: ...
    def Commit(self) -> Result: ...
    def Delete(self, saveDataId: int) -> Result: ...
    def Dispose(self) -> None: ...
    def Get(self, value: clr.Reference[SaveDataIndexerValue], key: clr.Reference[SaveDataAttribute]) -> Result: ...
    def GetIndexCount(self) -> int: ...
    def GetKey(self, key: clr.Reference[SaveDataAttribute], saveDataId: int) -> Result: ...
    def GetValue(self, value: clr.Reference[SaveDataIndexerValue], saveDataId: int) -> Result: ...
    def IsRemainedReservedOnly(self) -> bool: ...
    def OpenSaveDataInfoReader(self, outInfoReader: clr.Reference[SharedRef_1[SaveDataInfoReaderImpl]]) -> Result: ...
    def Publish(self, saveDataId: clr.Reference[int], key: clr.Reference[SaveDataAttribute]) -> Result: ...
    def PutStaticSaveDataIdIndex(self, key: clr.Reference[SaveDataAttribute]) -> Result: ...
    def Reset(self) -> Result: ...
    def Rollback(self) -> Result: ...
    def SetSize(self, saveDataId: int, size: int) -> Result: ...
    def SetSpaceId(self, saveDataId: int, spaceId: SaveDataSpaceId) -> Result: ...
    def SetState(self, saveDataId: int, state: SaveDataState) -> Result: ...
    def SetValue(self, key: clr.Reference[SaveDataAttribute], value: clr.Reference[SaveDataIndexerValue]) -> Result: ...


class SaveDataIndexerValue:
    Field10 : int
    Reserved : Array38_1[int]
    SaveDataId : int
    Size : int
    SpaceId : SaveDataSpaceId
    State : SaveDataState


class SaveDataInfoReaderImpl(ISaveDataInfoReader, typing.Protocol):
    pass


class SaveDataOpenTypeSetFileStorage(FileStorageBasedFileSystem):
    def __init__(self, fsServer: FileSystemServer, spaceId: SaveDataSpaceId, saveDataId: int) -> None: ...
    def GetLock(self) -> UniqueLockRef_1[SdkMutexType]: ...
    def Initialize(self, baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[Path], mode: OpenMode, type: SaveDataOpenTypeSetFileStorage.OpenType) -> Result: ...
    def InvalidateInternalStorage(self) -> None: ...
    def IsInternalStorageInvalidated(self) -> bool: ...
    def IsOpened(self) -> bool: ...
    def SetOpenType(self, type: SaveDataOpenTypeSetFileStorage.OpenType) -> Result: ...
    def UnsetOpenType(self, type: SaveDataOpenTypeSetFileStorage.OpenType) -> None: ...

    class OpenType(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        None_ : SaveDataOpenTypeSetFileStorage.OpenType # 0
        Normal : SaveDataOpenTypeSetFileStorage.OpenType # 1
        Internal : SaveDataOpenTypeSetFileStorage.OpenType # 2



class SaveDataSharedFileStorage(IStorage):
    def __init__(self, baseStorage: clr.Reference[SharedRef_1[SaveDataOpenTypeSetFileStorage]], type: SaveDataOpenTypeSetFileStorage.OpenType) -> None: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> Result: ...
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    def OperateRange(self, outBuffer: Span_1[int], operationId: OperationId, offset: int, size: int, inBuffer: ReadOnlySpan_1[int]) -> Result: ...
    def Read(self, offset: int, destination: Span_1[int]) -> Result: ...
    def SetSize(self, size: int) -> Result: ...
    def Write(self, offset: int, source: ReadOnlySpan_1[int]) -> Result: ...


class SaveDataSharedFileStorageGlobalMethods(abc.ABC):
    @staticmethod
    def OpenSaveDataStorage(fsSrv: FileSystemServer, outSaveDataStorage: clr.Reference[SharedRef_1[IStorage]], baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]], spaceId: SaveDataSpaceId, saveDataId: int, mode: OpenMode, type: Optional_1[SaveDataOpenTypeSetFileStorage.OpenType]) -> Result: ...


class SaveDataTransferCryptoConfiguration:
    def __init__(self) -> None: ...
    @property
    def GenerateAesKey(self) -> SaveTransferAesKeyGenerator: ...
    @GenerateAesKey.setter
    def GenerateAesKey(self, value: SaveTransferAesKeyGenerator) -> SaveTransferAesKeyGenerator: ...
    @property
    def GenerateCmac(self) -> SaveTransferCmacGenerator: ...
    @GenerateCmac.setter
    def GenerateCmac(self, value: SaveTransferCmacGenerator) -> SaveTransferCmacGenerator: ...
    @property
    def GenerateRandomData(self) -> RandomDataGenerator: ...
    @GenerateRandomData.setter
    def GenerateRandomData(self, value: RandomDataGenerator) -> RandomDataGenerator: ...
    @property
    def KekEncryptionKeyModulus(self) -> Span_1[int]: ...
    @property
    def KeyPackageSigningModulus(self) -> Span_1[int]: ...
    @property
    def KeySeedPackageSigningKeyModulus(self) -> Span_1[int]: ...
    @property
    def TokenSigningKeyModulus(self) -> Span_1[int]: ...

    class KeyIndex(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        SaveDataTransferToken : SaveDataTransferCryptoConfiguration.KeyIndex # 0
        SaveDataTransfer : SaveDataTransferCryptoConfiguration.KeyIndex # 1
        SaveDataTransferKeySeedPackage : SaveDataTransferCryptoConfiguration.KeyIndex # 2
        CloudBackUpInitialData : SaveDataTransferCryptoConfiguration.KeyIndex # 3
        CloudBackUpImportContext : SaveDataTransferCryptoConfiguration.KeyIndex # 4
        CloudBackUpInitialDataMac : SaveDataTransferCryptoConfiguration.KeyIndex # 5
        SaveDataRepairKeyPackage : SaveDataTransferCryptoConfiguration.KeyIndex # 6
        SaveDataRepairInitialDataMacBeforeRepair : SaveDataTransferCryptoConfiguration.KeyIndex # 7
        SaveDataRepairInitialDataMacAfterRepair : SaveDataTransferCryptoConfiguration.KeyIndex # 8



class SaveTransferAesKeyGenerator(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, key: Span_1[int], index: SaveDataTransferCryptoConfiguration.KeyIndex, keySource: ReadOnlySpan_1[int], keyGeneration: int, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Result: ...
    def Invoke(self, key: Span_1[int], index: SaveDataTransferCryptoConfiguration.KeyIndex, keySource: ReadOnlySpan_1[int], keyGeneration: int) -> Result: ...


class SaveTransferCmacGenerator(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, mac: Span_1[int], data: ReadOnlySpan_1[int], index: SaveDataTransferCryptoConfiguration.KeyIndex, keyGeneration: int, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Result: ...
    def Invoke(self, mac: Span_1[int], data: ReadOnlySpan_1[int], index: SaveDataTransferCryptoConfiguration.KeyIndex, keyGeneration: int) -> Result: ...


class SpeedEmulationStorage(IStorage):
    def __init__(self, baseStorage: clr.Reference[SharedRef_1[IStorage]], fsServer: FileSystemServer) -> None: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> Result: ...
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    def OperateRange(self, outBuffer: Span_1[int], operationId: OperationId, offset: int, size: int, inBuffer: ReadOnlySpan_1[int]) -> Result: ...
    def Read(self, offset: int, destination: Span_1[int]) -> Result: ...
    def SetSize(self, size: int) -> Result: ...
    def Write(self, offset: int, source: ReadOnlySpan_1[int]) -> Result: ...


class StatusReportService:
    def __init__(self, serviceImpl: StatusReportServiceImpl) -> None: ...
    def GetAndClearFileSystemProxyErrorInfo(self, errorInfo: clr.Reference[FileSystemProxyErrorInfo]) -> Result: ...
    def GetAndClearMemoryReportInfo(self, reportInfo: clr.Reference[MemoryReportInfo]) -> Result: ...
    def GetFsStackUsage(self, stackUsage: clr.Reference[int], threadType: FsStackUsageThreadType) -> Result: ...


class StatusReportServiceImpl:
    def __init__(self, configuration: clr.Reference[StatusReportServiceImpl.Configuration]) -> None: ...
    def GetAndClearFileSystemProxyErrorInfo(self, errorInfo: clr.Reference[FileSystemProxyErrorInfo]) -> Result: ...
    def GetAndClearMemoryReportInfo(self, reportInfo: clr.Reference[MemoryReportInfo]) -> Result: ...
    def ReportStackUsage(self, threadType: FsStackUsageThreadType) -> int: ...

    class Configuration:
        BufferManagerMemoryReport : MemoryReport
        BufferPoolMemoryReport : MemoryReport
        ExpHeapMemoryReport : MemoryReport
        FatFileSystemCreator : FatFileSystemCreator
        FsServer : FileSystemServer
        GetPatrolAllocateCounts : PatrolAllocateCountGetter
        IpcWorkerThreadStackUsageReporter : IStackUsageReporter
        MainThreadStackUsageReporter : IStackUsageReporter
        NcaFileSystemServiceImpl : NcaFileSystemServiceImpl
        PipeLineWorkerThreadStackUsageReporter : IStackUsageReporter
        SaveDataFileSystemServiceImpl : SaveDataFileSystemServiceImpl



class StorageService:
    pass


class TimeService:
    def __init__(self, serviceImpl: TimeServiceImpl, processId: int) -> None: ...
    def SetCurrentPosixTimeWithTimeDifference(self, currentTime: int, timeDifference: int) -> Result: ...


class TimeServiceImpl:
    def __init__(self, fsServer: FileSystemServer) -> None: ...
    def GetCurrentPosixTime(self, currentTime: clr.Reference[int]) -> Result: ...
    def GetCurrentPosixTimeWithTimeDifference(self, currentTime: clr.Reference[int], timeDifference: clr.Reference[int]) -> Result: ...
    def SetCurrentPosixTimeWithTimeDifference(self, currentTime: int, timeDifference: int) -> None: ...

