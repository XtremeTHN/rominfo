import typing, clr, abc
from LibHac.Common.Keys import KeySet
from LibHac.Fs import IStorage
from System import Array_1, Memory_1, Span_1
from LibHac.FsSystem import NcaSectionType, NcaContentType, NcaEncryptionType, NcaFormatType, NcaHashType, NcaCompressionInfo, NcaSparseInfo, DistributionType
from LibHac.Common import Validity, IProgressReport
from LibHac.Fs.Fsa import IFileSystem
from LibHac.Tools.FsSystem import IntegrityCheckLevel

class Nca:
    def __init__(self, keySet: KeySet, storage: IStorage) -> None: ...
    @property
    def BaseStorage(self) -> IStorage: ...
    @property
    def Header(self) -> NcaHeader: ...
    def GetDecryptedKey(self, index: int) -> Array_1[int]: ...
    def GetDecryptedTitleKey(self) -> Array_1[int]: ...
    def GetFsHeader(self, index: int) -> NcaFsHeader: ...
    def GetNca0FsHeader(self, index: int) -> NcaFsHeader: ...
    @staticmethod
    def GetSectionIndexFromType(type: NcaSectionType, contentType: NcaContentType) -> int: ...
    @staticmethod
    def GetSectionTypeFromIndex(index: int, contentType: NcaContentType) -> NcaSectionType: ...
    def OpenDecryptedHeaderStorage(self) -> IStorage: ...
    def OpenDecryptedNca(self) -> IStorage: ...
    def OpenEncryptedNca(self) -> IStorage: ...
    def OpenFullNca(self, openEncrypted: bool) -> IStorage: ...
    def OpenHeaderStorage(self, openEncrypted: bool) -> IStorage: ...
    @staticmethod
    def TryGetSectionIndexFromType(type: NcaSectionType, contentType: NcaContentType, index: clr.Reference[int]) -> bool: ...
    @staticmethod
    def TryGetSectionTypeFromIndex(index: int, contentType: NcaContentType, type: clr.Reference[NcaSectionType]) -> bool: ...
    def VerifyHeaderSignature(self) -> Validity: ...
    # Skipped CanOpenSection due to it being static, abstract and generic.

    CanOpenSection : CanOpenSection_MethodGroup
    class CanOpenSection_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> bool:...
        @typing.overload
        def __call__(self, type: NcaSectionType) -> bool:...

    # Skipped OpenFileSystem due to it being static, abstract and generic.

    OpenFileSystem : OpenFileSystem_MethodGroup
    class OpenFileSystem_MethodGroup:
        @typing.overload
        def __call__(self, index: int, integrityCheckLevel: IntegrityCheckLevel) -> IFileSystem:...
        @typing.overload
        def __call__(self, type: NcaSectionType, integrityCheckLevel: IntegrityCheckLevel) -> IFileSystem:...

    # Skipped OpenFileSystemWithPatch due to it being static, abstract and generic.

    OpenFileSystemWithPatch : OpenFileSystemWithPatch_MethodGroup
    class OpenFileSystemWithPatch_MethodGroup:
        @typing.overload
        def __call__(self, patchNca: Nca, index: int, integrityCheckLevel: IntegrityCheckLevel) -> IFileSystem:...
        @typing.overload
        def __call__(self, patchNca: Nca, type: NcaSectionType, integrityCheckLevel: IntegrityCheckLevel) -> IFileSystem:...

    # Skipped OpenRawStorage due to it being static, abstract and generic.

    OpenRawStorage : OpenRawStorage_MethodGroup
    class OpenRawStorage_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> IStorage:...
        @typing.overload
        def __call__(self, type: NcaSectionType) -> IStorage:...
        @typing.overload
        def __call__(self, index: int, openEncrypted: bool) -> IStorage:...

    # Skipped OpenRawStorageWithPatch due to it being static, abstract and generic.

    OpenRawStorageWithPatch : OpenRawStorageWithPatch_MethodGroup
    class OpenRawStorageWithPatch_MethodGroup:
        @typing.overload
        def __call__(self, patchNca: Nca, index: int) -> IStorage:...
        @typing.overload
        def __call__(self, patchNca: Nca, type: NcaSectionType) -> IStorage:...

    # Skipped OpenStorage due to it being static, abstract and generic.

    OpenStorage : OpenStorage_MethodGroup
    class OpenStorage_MethodGroup:
        @typing.overload
        def __call__(self, index: int, integrityCheckLevel: IntegrityCheckLevel) -> IStorage:...
        @typing.overload
        def __call__(self, type: NcaSectionType, integrityCheckLevel: IntegrityCheckLevel) -> IStorage:...
        @typing.overload
        def __call__(self, index: int, integrityCheckLevel: IntegrityCheckLevel, leaveCompressed: bool) -> IStorage:...

    # Skipped OpenStorageWithPatch due to it being static, abstract and generic.

    OpenStorageWithPatch : OpenStorageWithPatch_MethodGroup
    class OpenStorageWithPatch_MethodGroup:
        @typing.overload
        def __call__(self, patchNca: Nca, index: int, integrityCheckLevel: IntegrityCheckLevel) -> IStorage:...
        @typing.overload
        def __call__(self, patchNca: Nca, type: NcaSectionType, integrityCheckLevel: IntegrityCheckLevel) -> IStorage:...
        @typing.overload
        def __call__(self, patchNca: Nca, index: int, integrityCheckLevel: IntegrityCheckLevel, leaveCompressed: bool) -> IStorage:...

    # Skipped SectionExists due to it being static, abstract and generic.

    SectionExists : SectionExists_MethodGroup
    class SectionExists_MethodGroup:
        @typing.overload
        def __call__(self, index: int) -> bool:...
        @typing.overload
        def __call__(self, type: NcaSectionType) -> bool:...



class NcaExtensions(abc.ABC):
    @staticmethod
    def ValidateSectionMasterHash(nca: Nca, index: int) -> Validity: ...
    # Skipped ExportSection due to it being static, abstract and generic.

    ExportSection : ExportSection_MethodGroup
    class ExportSection_MethodGroup:
        @typing.overload
        def __call__(self, nca: Nca, index: int, filename: str, raw: bool = ..., integrityCheckLevel: IntegrityCheckLevel = ..., logger: IProgressReport = ...) -> None:...
        @typing.overload
        def __call__(self, nca: Nca, type: NcaSectionType, filename: str, raw: bool = ..., integrityCheckLevel: IntegrityCheckLevel = ..., logger: IProgressReport = ...) -> None:...

    # Skipped ExtractSection due to it being static, abstract and generic.

    ExtractSection : ExtractSection_MethodGroup
    class ExtractSection_MethodGroup:
        @typing.overload
        def __call__(self, nca: Nca, index: int, outputDir: str, integrityCheckLevel: IntegrityCheckLevel = ..., logger: IProgressReport = ...) -> None:...
        @typing.overload
        def __call__(self, nca: Nca, type: NcaSectionType, outputDir: str, integrityCheckLevel: IntegrityCheckLevel = ..., logger: IProgressReport = ...) -> None:...

    # Skipped OpenStorage due to it being static, abstract and generic.

    OpenStorage : OpenStorage_MethodGroup
    class OpenStorage_MethodGroup:
        @typing.overload
        def __call__(self, nca: Nca, index: int, integrityCheckLevel: IntegrityCheckLevel, openRaw: bool) -> IStorage:...
        @typing.overload
        def __call__(self, nca: Nca, type: NcaSectionType, integrityCheckLevel: IntegrityCheckLevel, openRaw: bool) -> IStorage:...

    # Skipped VerifyNca due to it being static, abstract and generic.

    VerifyNca : VerifyNca_MethodGroup
    class VerifyNca_MethodGroup:
        @typing.overload
        def __call__(self, nca: Nca, logger: IProgressReport = ..., quiet: bool = ...) -> Validity:...
        @typing.overload
        def __call__(self, nca: Nca, patchNca: Nca, logger: IProgressReport = ..., quiet: bool = ...) -> Validity:...

    # Skipped VerifySection due to it being static, abstract and generic.

    VerifySection : VerifySection_MethodGroup
    class VerifySection_MethodGroup:
        @typing.overload
        def __call__(self, nca: Nca, index: int, logger: IProgressReport = ..., quiet: bool = ...) -> Validity:...
        @typing.overload
        def __call__(self, nca: Nca, patchNca: Nca, index: int, logger: IProgressReport = ..., quiet: bool = ...) -> Validity:...



class NcaFsHeader:
    def __init__(self, headerData: Memory_1[int]) -> None: ...
    @property
    def Counter(self) -> int: ...
    @Counter.setter
    def Counter(self, value: int) -> int: ...
    @property
    def CounterType(self) -> int: ...
    @CounterType.setter
    def CounterType(self, value: int) -> int: ...
    @property
    def CounterVersion(self) -> int: ...
    @CounterVersion.setter
    def CounterVersion(self, value: int) -> int: ...
    @property
    def EncryptionType(self) -> NcaEncryptionType: ...
    @EncryptionType.setter
    def EncryptionType(self, value: NcaEncryptionType) -> NcaEncryptionType: ...
    @property
    def FormatType(self) -> NcaFormatType: ...
    @FormatType.setter
    def FormatType(self, value: NcaFormatType) -> NcaFormatType: ...
    @property
    def HashType(self) -> NcaHashType: ...
    @HashType.setter
    def HashType(self, value: NcaHashType) -> NcaHashType: ...
    @property
    def Version(self) -> int: ...
    @Version.setter
    def Version(self, value: int) -> int: ...
    def ExistsCompressionLayer(self) -> bool: ...
    def ExistsSparseLayer(self) -> bool: ...
    def GetCompressionInfo(self) -> clr.Reference[NcaCompressionInfo]: ...
    def GetIntegrityInfoIvfc(self) -> NcaFsIntegrityInfoIvfc: ...
    def GetIntegrityInfoSha256(self) -> NcaFsIntegrityInfoSha256: ...
    def GetPatchInfo(self) -> NcaFsPatchInfo: ...
    def GetSparseInfo(self) -> clr.Reference[NcaSparseInfo]: ...
    def IsPatchSection(self) -> bool: ...


class NcaFsIntegrityInfoIvfc:
    def __init__(self, data: Memory_1[int]) -> None: ...
    @property
    def LevelCount(self) -> int: ...
    @LevelCount.setter
    def LevelCount(self, value: int) -> int: ...
    @property
    def Magic(self) -> int: ...
    @Magic.setter
    def Magic(self, value: int) -> int: ...
    @property
    def MasterHash(self) -> Span_1[int]: ...
    @property
    def MasterHashSize(self) -> int: ...
    @MasterHashSize.setter
    def MasterHashSize(self, value: int) -> int: ...
    @property
    def SaltSource(self) -> Span_1[int]: ...
    @property
    def Version(self) -> int: ...
    @Version.setter
    def Version(self, value: int) -> int: ...
    def GetLevelBlockSize(self, index: int) -> clr.Reference[int]: ...
    def GetLevelOffset(self, index: int) -> clr.Reference[int]: ...
    def GetLevelSize(self, index: int) -> clr.Reference[int]: ...


class NcaFsIntegrityInfoSha256:
    def __init__(self, data: Memory_1[int]) -> None: ...
    @property
    def BlockSize(self) -> int: ...
    @BlockSize.setter
    def BlockSize(self, value: int) -> int: ...
    @property
    def LevelCount(self) -> int: ...
    @LevelCount.setter
    def LevelCount(self, value: int) -> int: ...
    @property
    def MasterHash(self) -> Span_1[int]: ...
    def GetLevelOffset(self, index: int) -> clr.Reference[int]: ...
    def GetLevelSize(self, index: int) -> clr.Reference[int]: ...


class NcaFsPatchInfo:
    def __init__(self, data: Memory_1[int]) -> None: ...
    @property
    def EncryptionTreeHeader(self) -> Span_1[int]: ...
    @property
    def EncryptionTreeOffset(self) -> int: ...
    @EncryptionTreeOffset.setter
    def EncryptionTreeOffset(self, value: int) -> int: ...
    @property
    def EncryptionTreeSize(self) -> int: ...
    @EncryptionTreeSize.setter
    def EncryptionTreeSize(self, value: int) -> int: ...
    @property
    def RelocationTreeHeader(self) -> Span_1[int]: ...
    @property
    def RelocationTreeOffset(self) -> int: ...
    @RelocationTreeOffset.setter
    def RelocationTreeOffset(self, value: int) -> int: ...
    @property
    def RelocationTreeSize(self) -> int: ...
    @RelocationTreeSize.setter
    def RelocationTreeSize(self, value: int) -> int: ...


class NcaHeader:
    def __init__(self, keySet: KeySet, headerStorage: IStorage) -> None: ...
    @property
    def ContentIndex(self) -> int: ...
    @ContentIndex.setter
    def ContentIndex(self, value: int) -> int: ...
    @property
    def ContentType(self) -> NcaContentType: ...
    @ContentType.setter
    def ContentType(self, value: NcaContentType) -> NcaContentType: ...
    @property
    def DistributionType(self) -> DistributionType: ...
    @DistributionType.setter
    def DistributionType(self, value: DistributionType) -> DistributionType: ...
    @property
    def FormatVersion(self) -> NcaVersion: ...
    @property
    def HasRightsId(self) -> bool: ...
    @property
    def IsEncrypted(self) -> bool: ...
    @property
    def KeyAreaKeyIndex(self) -> int: ...
    @KeyAreaKeyIndex.setter
    def KeyAreaKeyIndex(self, value: int) -> int: ...
    @property
    def KeyGeneration(self) -> int: ...
    @KeyGeneration.setter
    def KeyGeneration(self, value: int) -> int: ...
    @property
    def Magic(self) -> int: ...
    @Magic.setter
    def Magic(self, value: int) -> int: ...
    @property
    def NcaSize(self) -> int: ...
    @NcaSize.setter
    def NcaSize(self, value: int) -> int: ...
    @property
    def RightsId(self) -> Span_1[int]: ...
    @property
    def SdkVersion(self) -> TitleVersion: ...
    @SdkVersion.setter
    def SdkVersion(self, value: TitleVersion) -> TitleVersion: ...
    @property
    def Signature1(self) -> Span_1[int]: ...
    @property
    def Signature2(self) -> Span_1[int]: ...
    @property
    def TitleId(self) -> int: ...
    @TitleId.setter
    def TitleId(self, value: int) -> int: ...
    @property
    def Version(self) -> int: ...
    def GetEncryptedKey(self, index: int) -> Span_1[int]: ...
    def GetFsHeader(self, index: int) -> NcaFsHeader: ...
    def GetFsHeaderHash(self, index: int) -> Span_1[int]: ...
    def GetKeyArea(self) -> Span_1[int]: ...
    def GetSectionEndOffset(self, index: int) -> int: ...
    def GetSectionSize(self, index: int) -> int: ...
    def GetSectionStartOffset(self, index: int) -> int: ...
    def IsNca0(self) -> bool: ...
    def IsSectionEnabled(self, index: int) -> bool: ...
    def VerifySignature1(self, modulus: Array_1[int]) -> Validity: ...
    def VerifySignature2(self, modulus: Array_1[int]) -> Validity: ...


class NcaVersion(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : NcaVersion # 0
    Nca3 : NcaVersion # 1
    Nca2 : NcaVersion # 2
    Nca0 : NcaVersion # 3
    Nca0FixedKey : NcaVersion # 4
    Nca0RsaOaep : NcaVersion # 5


class TitleVersion:
    def __init__(self, version: int, isSystemTitle: bool = ...) -> None: ...
    @property
    def Major(self) -> int: ...
    @property
    def Minor(self) -> int: ...
    @property
    def Patch(self) -> int: ...
    @property
    def Revision(self) -> int: ...
    @property
    def Version(self) -> int: ...
    def ToString(self) -> str: ...

