import typing, clr, abc
from LibHac.Fs import IStorage, OperationId, SaveDataType, OpenMode
from LibHac import Result
from System import Span_1, ReadOnlySpan_1, Array_1, Guid, ValueTuple_2
from System.Collections import BitArray
from System.IO import BinaryReader
from LibHac.Common.Keys import KeySet
from LibHac.Tools.FsSystem import IvfcHeader, IntegrityCheckLevel, HierarchicalIntegrityVerificationStorage
from LibHac.Common import Validity, U8Span, SharedRef_1, IProgressReport
from System.Collections.Generic import List_1, IEnumerable_1
from LibHac.Fs.Fsa import IDirectory, OpenDirectoryMode, IFile, IFileSystem

class AllocationTable:
    def __init__(self, storage: IStorage, header: IStorage) -> None: ...
    @property
    def Header(self) -> AllocationTableHeader: ...
    def Allocate(self, blockCount: int) -> int: ...
    def Free(self, listBlockIndex: int) -> None: ...
    def FsTrim(self) -> None: ...
    def FsTrimList(self, blockIndex: int) -> None: ...
    def GetBaseStorage(self) -> IStorage: ...
    def GetFreeListBlockIndex(self) -> int: ...
    def GetFreeListEntryIndex(self) -> int: ...
    def GetFreeListLength(self) -> int: ...
    def GetHeaderStorage(self) -> IStorage: ...
    def GetListLength(self, blockIndex: int) -> int: ...
    def Join(self, frontListBlockIndex: int, backListBlockIndex: int) -> None: ...
    def ReadEntry(self, blockIndex: int, next: clr.Reference[int], previous: clr.Reference[int], length: clr.Reference[int]) -> None: ...
    def SetFreeListBlockIndex(self, headBlockIndex: int) -> None: ...
    def SetFreeListEntryIndex(self, headBlockIndex: int) -> None: ...
    def Split(self, segmentBlockIndex: int, firstSubSegmentLength: int) -> None: ...
    def Trim(self, listHeadBlockIndex: int, newListLength: int) -> int: ...


class AllocationTableEntry:
    Next : int
    Prev : int
    def GetNext(self) -> int: ...
    def GetPrev(self) -> int: ...
    def IsListEnd(self) -> bool: ...
    def IsListStart(self) -> bool: ...
    def IsMultiBlockSegment(self) -> bool: ...
    def IsRangeEntry(self) -> bool: ...
    def IsSingleBlockSegment(self) -> bool: ...
    def MakeListStart(self) -> None: ...
    def MakeMultiBlockSegment(self) -> None: ...
    def MakeRangeEntry(self) -> None: ...
    def MakeSingleBlockSegment(self) -> None: ...
    def SetNext(self, value: int) -> None: ...
    def SetPrev(self, value: int) -> None: ...
    def SetRange(self, startIndex: int, endIndex: int) -> None: ...


class AllocationTableHeader:
    def __init__(self, storage: IStorage) -> None: ...
    @property
    def AllocationTableBlockCount(self) -> int: ...
    @property
    def AllocationTableOffset(self) -> int: ...
    @property
    def BlockSize(self) -> int: ...
    @property
    def DataBlockCount(self) -> int: ...
    @property
    def DataOffset(self) -> int: ...
    @property
    def DirectoryTableBlock(self) -> int: ...
    @property
    def FileTableBlock(self) -> int: ...


class AllocationTableIterator:
    def __init__(self, table: AllocationTable, initialBlock: int) -> None: ...
    @property
    def CurrentSegmentSize(self) -> int: ...
    @property
    def PhysicalBlock(self) -> int: ...
    @PhysicalBlock.setter
    def PhysicalBlock(self, value: int) -> int: ...
    @property
    def VirtualBlock(self) -> int: ...
    @VirtualBlock.setter
    def VirtualBlock(self, value: int) -> int: ...
    def BeginIteration(self, initialBlock: int) -> bool: ...
    def MoveNext(self) -> bool: ...
    def MovePrevious(self) -> bool: ...
    def Seek(self, block: int) -> bool: ...


class AllocationTableStorage(IStorage):
    def __init__(self, data: IStorage, table: AllocationTable, blockSize: int, initialBlock: int) -> None: ...
    def Flush(self) -> Result: ...
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    def OperateRange(self, outBuffer: Span_1[int], operationId: OperationId, offset: int, size: int, inBuffer: ReadOnlySpan_1[int]) -> Result: ...
    def Read(self, offset: int, destination: Span_1[int]) -> Result: ...
    def SetSize(self, size: int) -> Result: ...
    def Write(self, offset: int, source: ReadOnlySpan_1[int]) -> Result: ...


class DuplexBitmap:
    def __init__(self, bitmapStorage: IStorage, lengthBits: int) -> None: ...
    @property
    def Bitmap(self) -> BitArray: ...


class DuplexFsLayerInfo:
    def __init__(self) -> None: ...
    @property
    def DataA(self) -> IStorage: ...
    @DataA.setter
    def DataA(self, value: IStorage) -> IStorage: ...
    @property
    def DataB(self) -> IStorage: ...
    @DataB.setter
    def DataB(self, value: IStorage) -> IStorage: ...
    @property
    def Info(self) -> DuplexInfo: ...
    @Info.setter
    def Info(self, value: DuplexInfo) -> DuplexInfo: ...


class DuplexHeader:
    def __init__(self, reader: BinaryReader) -> None: ...
    @property
    def Layers(self) -> Array_1[DuplexInfo]: ...
    @property
    def Magic(self) -> str: ...
    @property
    def Version(self) -> int: ...


class DuplexInfo:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, reader: BinaryReader) -> None: ...
    @property
    def BlockSize(self) -> int: ...
    @BlockSize.setter
    def BlockSize(self, value: int) -> int: ...
    @property
    def BlockSizePower(self) -> int: ...
    @BlockSizePower.setter
    def BlockSizePower(self, value: int) -> int: ...
    @property
    def Length(self) -> int: ...
    @Length.setter
    def Length(self, value: int) -> int: ...
    @property
    def Offset(self) -> int: ...


class DuplexStorage(IStorage):
    def __init__(self, dataA: IStorage, dataB: IStorage, bitmap: IStorage, blockSize: int) -> None: ...
    def Flush(self) -> Result: ...
    def FsTrim(self) -> None: ...
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    def OperateRange(self, outBuffer: Span_1[int], operationId: OperationId, offset: int, size: int, inBuffer: ReadOnlySpan_1[int]) -> Result: ...
    def Read(self, offset: int, destination: Span_1[int]) -> Result: ...
    def SetSize(self, size: int) -> Result: ...
    def Write(self, offset: int, source: ReadOnlySpan_1[int]) -> Result: ...


class ExtraData:
    def __init__(self, reader: BinaryReader) -> None: ...
    @property
    def DataSize(self) -> int: ...
    @property
    def Field50(self) -> int: ...
    @property
    def Field54(self) -> int: ...
    @property
    def JournalSize(self) -> int: ...
    @property
    def SaveId(self) -> int: ...
    @property
    def SaveOwnerId(self) -> int: ...
    @property
    def Timestamp(self) -> int: ...
    @property
    def TitleId(self) -> int: ...
    @property
    def Type(self) -> SaveDataType: ...
    @property
    def UserId(self) -> Guid: ...


class FsLayout:
    def __init__(self, storage: IStorage) -> None: ...
    @property
    def DuplexDataOffsetA(self) -> int: ...
    @DuplexDataOffsetA.setter
    def DuplexDataOffsetA(self, value: int) -> int: ...
    @property
    def DuplexDataOffsetB(self) -> int: ...
    @DuplexDataOffsetB.setter
    def DuplexDataOffsetB(self, value: int) -> int: ...
    @property
    def DuplexDataSize(self) -> int: ...
    @DuplexDataSize.setter
    def DuplexDataSize(self, value: int) -> int: ...
    @property
    def DuplexIndex(self) -> int: ...
    @DuplexIndex.setter
    def DuplexIndex(self, value: int) -> int: ...
    @property
    def DuplexL1OffsetA(self) -> int: ...
    @DuplexL1OffsetA.setter
    def DuplexL1OffsetA(self, value: int) -> int: ...
    @property
    def DuplexL1OffsetB(self) -> int: ...
    @DuplexL1OffsetB.setter
    def DuplexL1OffsetB(self, value: int) -> int: ...
    @property
    def DuplexL1Size(self) -> int: ...
    @DuplexL1Size.setter
    def DuplexL1Size(self, value: int) -> int: ...
    @property
    def DuplexMasterOffsetA(self) -> int: ...
    @DuplexMasterOffsetA.setter
    def DuplexMasterOffsetA(self, value: int) -> int: ...
    @property
    def DuplexMasterOffsetB(self) -> int: ...
    @DuplexMasterOffsetB.setter
    def DuplexMasterOffsetB(self, value: int) -> int: ...
    @property
    def DuplexMasterSize(self) -> int: ...
    @DuplexMasterSize.setter
    def DuplexMasterSize(self, value: int) -> int: ...
    @property
    def FatIvfcL1Offset(self) -> int: ...
    @FatIvfcL1Offset.setter
    def FatIvfcL1Offset(self, value: int) -> int: ...
    @property
    def FatIvfcL1Size(self) -> int: ...
    @FatIvfcL1Size.setter
    def FatIvfcL1Size(self, value: int) -> int: ...
    @property
    def FatIvfcL2Offset(self) -> int: ...
    @FatIvfcL2Offset.setter
    def FatIvfcL2Offset(self, value: int) -> int: ...
    @property
    def FatIvfcL2Size(self) -> int: ...
    @FatIvfcL2Size.setter
    def FatIvfcL2Size(self, value: int) -> int: ...
    @property
    def FatIvfcMasterHashA(self) -> int: ...
    @FatIvfcMasterHashA.setter
    def FatIvfcMasterHashA(self, value: int) -> int: ...
    @property
    def FatIvfcMasterHashB(self) -> int: ...
    @FatIvfcMasterHashB.setter
    def FatIvfcMasterHashB(self, value: int) -> int: ...
    @property
    def FatOffset(self) -> int: ...
    @FatOffset.setter
    def FatOffset(self, value: int) -> int: ...
    @property
    def FatSize(self) -> int: ...
    @FatSize.setter
    def FatSize(self, value: int) -> int: ...
    @property
    def FileMapDataOffset(self) -> int: ...
    @FileMapDataOffset.setter
    def FileMapDataOffset(self, value: int) -> int: ...
    @property
    def FileMapDataSize(self) -> int: ...
    @FileMapDataSize.setter
    def FileMapDataSize(self, value: int) -> int: ...
    @property
    def FileMapEntryOffset(self) -> int: ...
    @FileMapEntryOffset.setter
    def FileMapEntryOffset(self, value: int) -> int: ...
    @property
    def FileMapEntrySize(self) -> int: ...
    @FileMapEntrySize.setter
    def FileMapEntrySize(self, value: int) -> int: ...
    @property
    def Hash(self) -> Array_1[int]: ...
    @Hash.setter
    def Hash(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def IvfcL1Offset(self) -> int: ...
    @IvfcL1Offset.setter
    def IvfcL1Offset(self, value: int) -> int: ...
    @property
    def IvfcL1Size(self) -> int: ...
    @IvfcL1Size.setter
    def IvfcL1Size(self, value: int) -> int: ...
    @property
    def IvfcL2Offset(self) -> int: ...
    @IvfcL2Offset.setter
    def IvfcL2Offset(self, value: int) -> int: ...
    @property
    def IvfcL2Size(self) -> int: ...
    @IvfcL2Size.setter
    def IvfcL2Size(self, value: int) -> int: ...
    @property
    def IvfcL3Offset(self) -> int: ...
    @IvfcL3Offset.setter
    def IvfcL3Offset(self, value: int) -> int: ...
    @property
    def IvfcL3Size(self) -> int: ...
    @IvfcL3Size.setter
    def IvfcL3Size(self, value: int) -> int: ...
    @property
    def IvfcMasterHashOffsetA(self) -> int: ...
    @IvfcMasterHashOffsetA.setter
    def IvfcMasterHashOffsetA(self, value: int) -> int: ...
    @property
    def IvfcMasterHashOffsetB(self) -> int: ...
    @IvfcMasterHashOffsetB.setter
    def IvfcMasterHashOffsetB(self, value: int) -> int: ...
    @property
    def IvfcMasterHashSize(self) -> int: ...
    @IvfcMasterHashSize.setter
    def IvfcMasterHashSize(self, value: int) -> int: ...
    @property
    def JournalDataOffset(self) -> int: ...
    @JournalDataOffset.setter
    def JournalDataOffset(self, value: int) -> int: ...
    @property
    def JournalDataSizeA(self) -> int: ...
    @JournalDataSizeA.setter
    def JournalDataSizeA(self, value: int) -> int: ...
    @property
    def JournalDataSizeB(self) -> int: ...
    @JournalDataSizeB.setter
    def JournalDataSizeB(self, value: int) -> int: ...
    @property
    def JournalFreeBitmapOffset(self) -> int: ...
    @JournalFreeBitmapOffset.setter
    def JournalFreeBitmapOffset(self, value: int) -> int: ...
    @property
    def JournalFreeBitmapSize(self) -> int: ...
    @JournalFreeBitmapSize.setter
    def JournalFreeBitmapSize(self, value: int) -> int: ...
    @property
    def JournalMapTableOffset(self) -> int: ...
    @JournalMapTableOffset.setter
    def JournalMapTableOffset(self, value: int) -> int: ...
    @property
    def JournalMapTableSize(self) -> int: ...
    @JournalMapTableSize.setter
    def JournalMapTableSize(self, value: int) -> int: ...
    @property
    def JournalPhysicalBitmapOffset(self) -> int: ...
    @JournalPhysicalBitmapOffset.setter
    def JournalPhysicalBitmapOffset(self, value: int) -> int: ...
    @property
    def JournalPhysicalBitmapSize(self) -> int: ...
    @JournalPhysicalBitmapSize.setter
    def JournalPhysicalBitmapSize(self, value: int) -> int: ...
    @property
    def JournalSize(self) -> int: ...
    @JournalSize.setter
    def JournalSize(self, value: int) -> int: ...
    @property
    def JournalVirtualBitmapOffset(self) -> int: ...
    @JournalVirtualBitmapOffset.setter
    def JournalVirtualBitmapOffset(self, value: int) -> int: ...
    @property
    def JournalVirtualBitmapSize(self) -> int: ...
    @JournalVirtualBitmapSize.setter
    def JournalVirtualBitmapSize(self, value: int) -> int: ...
    @property
    def Magic(self) -> str: ...
    @Magic.setter
    def Magic(self, value: str) -> str: ...
    @property
    def MetaMapEntryOffset(self) -> int: ...
    @MetaMapEntryOffset.setter
    def MetaMapEntryOffset(self, value: int) -> int: ...
    @property
    def MetaMapEntrySize(self) -> int: ...
    @MetaMapEntrySize.setter
    def MetaMapEntrySize(self, value: int) -> int: ...
    @property
    def Version(self) -> int: ...
    @Version.setter
    def Version(self, value: int) -> int: ...


class Header:
    def __init__(self, storage: IStorage, keySet: KeySet) -> None: ...
    @property
    def Cmac(self) -> Array_1[int]: ...
    @Cmac.setter
    def Cmac(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def Data(self) -> Array_1[int]: ...
    @property
    def DataIvfcHeader(self) -> IStorage: ...
    @property
    def DataIvfcMaster(self) -> IStorage: ...
    @property
    def Duplex(self) -> DuplexHeader: ...
    @Duplex.setter
    def Duplex(self, value: DuplexHeader) -> DuplexHeader: ...
    @property
    def DuplexHeader(self) -> IStorage: ...
    @property
    def DuplexMasterBitmapA(self) -> IStorage: ...
    @property
    def DuplexMasterBitmapB(self) -> IStorage: ...
    @property
    def ExtraData(self) -> ExtraData: ...
    @ExtraData.setter
    def ExtraData(self, value: ExtraData) -> ExtraData: ...
    @property
    def ExtraDataStorage(self) -> IStorage: ...
    @property
    def FatIvfc(self) -> IvfcHeader: ...
    @FatIvfc.setter
    def FatIvfc(self, value: IvfcHeader) -> IvfcHeader: ...
    @property
    def FatIvfcHeader(self) -> IStorage: ...
    @property
    def FatIvfcMaster(self) -> IStorage: ...
    @property
    def HeaderHashValidity(self) -> Validity: ...
    @property
    def Ivfc(self) -> IvfcHeader: ...
    @Ivfc.setter
    def Ivfc(self, value: IvfcHeader) -> IvfcHeader: ...
    @property
    def JournalHeader(self) -> IStorage: ...
    @property
    def Layout(self) -> FsLayout: ...
    @Layout.setter
    def Layout(self, value: FsLayout) -> FsLayout: ...
    @property
    def MainHeader(self) -> IStorage: ...
    @property
    def MainRemapHeader(self) -> IStorage: ...
    @property
    def MainStorage(self) -> IStorage: ...
    @property
    def MasterHash(self) -> IStorage: ...
    @property
    def MetaDataRemapHeader(self) -> IStorage: ...
    @property
    def SaveHeader(self) -> IStorage: ...
    @property
    def SignatureValidity(self) -> Validity: ...


class HierarchicalDuplexStorage(IStorage):
    def __init__(self, layers: Array_1[DuplexFsLayerInfo], masterBit: bool) -> None: ...
    def Flush(self) -> Result: ...
    def FsTrim(self) -> None: ...
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    def OperateRange(self, outBuffer: Span_1[int], operationId: OperationId, offset: int, size: int, inBuffer: ReadOnlySpan_1[int]) -> Result: ...
    def Read(self, offset: int, destination: Span_1[int]) -> Result: ...
    def SetSize(self, size: int) -> Result: ...
    def Write(self, offset: int, source: ReadOnlySpan_1[int]) -> Result: ...


class HierarchicalSaveFileTable:
    def __init__(self, dirTable: IStorage, fileTable: IStorage) -> None: ...
    def AddDirectory(self, path: U8Span) -> None: ...
    def AddFile(self, path: U8Span, fileInfo: clr.Reference[SaveFileInfo]) -> None: ...
    def DeleteDirectory(self, path: U8Span) -> None: ...
    def DeleteFile(self, path: U8Span) -> None: ...
    def FindNextDirectory(self, position: clr.Reference[SaveFindPosition], name: clr.Reference[str]) -> bool: ...
    def FindNextFile(self, position: clr.Reference[SaveFindPosition], info: clr.Reference[SaveFileInfo], name: clr.Reference[str]) -> bool: ...
    def RenameDirectory(self, srcPath: U8Span, dstPath: U8Span) -> Result: ...
    def RenameFile(self, srcPath: U8Span, dstPath: U8Span) -> None: ...
    def TrimFreeEntries(self) -> None: ...
    def TryOpenDirectory(self, path: U8Span, position: clr.Reference[SaveFindPosition]) -> bool: ...
    def TryOpenFile(self, path: U8Span, fileInfo: clr.Reference[SaveFileInfo]) -> bool: ...


class JournalHeader:
    def __init__(self, storage: IStorage) -> None: ...
    @property
    def BlockSize(self) -> int: ...
    @property
    def JournalSize(self) -> int: ...
    @property
    def Magic(self) -> str: ...
    @property
    def TotalSize(self) -> int: ...
    @property
    def Version(self) -> int: ...


class JournalMap:
    def __init__(self, header: IStorage, mapInfo: JournalMapParams) -> None: ...
    @property
    def Header(self) -> JournalMapHeader: ...
    def FsTrim(self) -> None: ...
    def GetFreeBlocksStorage(self) -> IStorage: ...
    def GetHeaderStorage(self) -> IStorage: ...
    def GetMapStorage(self) -> IStorage: ...
    def GetModifiedPhysicalBlocksStorage(self) -> IStorage: ...
    def GetModifiedVirtualBlocksStorage(self) -> IStorage: ...
    def GetPhysicalBlock(self, virtualBlock: int) -> int: ...


class JournalMapEntry:
    def __init__(self) -> None: ...
    @property
    def PhysicalIndex(self) -> int: ...
    @PhysicalIndex.setter
    def PhysicalIndex(self, value: int) -> int: ...
    @property
    def VirtualIndex(self) -> int: ...
    @VirtualIndex.setter
    def VirtualIndex(self, value: int) -> int: ...


class JournalMapHeader:
    def __init__(self, storage: IStorage) -> None: ...
    @property
    def FieldC(self) -> int: ...
    @property
    def JournalBlockCount(self) -> int: ...
    @property
    def MainDataBlockCount(self) -> int: ...
    @property
    def Version(self) -> int: ...


class JournalMapParams:
    def __init__(self) -> None: ...
    @property
    def FreeBlockBitmap(self) -> IStorage: ...
    @FreeBlockBitmap.setter
    def FreeBlockBitmap(self, value: IStorage) -> IStorage: ...
    @property
    def MapStorage(self) -> IStorage: ...
    @MapStorage.setter
    def MapStorage(self, value: IStorage) -> IStorage: ...
    @property
    def PhysicalBlockBitmap(self) -> IStorage: ...
    @PhysicalBlockBitmap.setter
    def PhysicalBlockBitmap(self, value: IStorage) -> IStorage: ...
    @property
    def VirtualBlockBitmap(self) -> IStorage: ...
    @VirtualBlockBitmap.setter
    def VirtualBlockBitmap(self, value: IStorage) -> IStorage: ...


class JournalStorage(IStorage):
    def __init__(self, baseStorage: IStorage, header: IStorage, mapInfo: JournalMapParams, leaveOpen: bool) -> None: ...
    @property
    def BlockSize(self) -> int: ...
    @property
    def Header(self) -> JournalHeader: ...
    @property
    def Map(self) -> JournalMap: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> Result: ...
    def FsTrim(self) -> None: ...
    def GetBaseStorage(self) -> IStorage: ...
    def GetHeaderStorage(self) -> IStorage: ...
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    def OperateRange(self, outBuffer: Span_1[int], operationId: OperationId, offset: int, size: int, inBuffer: ReadOnlySpan_1[int]) -> Result: ...
    def Read(self, offset: int, destination: Span_1[int]) -> Result: ...
    def SetSize(self, size: int) -> Result: ...
    def Write(self, offset: int, source: ReadOnlySpan_1[int]) -> Result: ...


class MapEntry:
    def __init__(self, reader: BinaryReader) -> None: ...
    @property
    def Alignment(self) -> int: ...
    @property
    def Field1C(self) -> int: ...
    @property
    def PhysicalOffset(self) -> int: ...
    @property
    def PhysicalOffsetEnd(self) -> int: ...
    @property
    def Size(self) -> int: ...
    @property
    def VirtualOffset(self) -> int: ...
    @property
    def VirtualOffsetEnd(self) -> int: ...


class RemapHeader:
    def __init__(self, storage: IStorage) -> None: ...
    @property
    def Magic(self) -> str: ...
    @property
    def MapEntryCount(self) -> int: ...
    @property
    def MapSegmentCount(self) -> int: ...
    @property
    def SegmentBits(self) -> int: ...
    @property
    def Version(self) -> int: ...


class RemapSegment:
    def __init__(self) -> None: ...
    @property
    def Entries(self) -> List_1[MapEntry]: ...
    @property
    def Length(self) -> int: ...
    @Length.setter
    def Length(self, value: int) -> int: ...
    @property
    def Offset(self) -> int: ...
    @Offset.setter
    def Offset(self, value: int) -> int: ...


class RemapStorage(IStorage):
    def __init__(self, storage: IStorage, header: IStorage, mapEntries: IStorage, leaveOpen: bool) -> None: ...
    @property
    def MapEntries(self) -> Array_1[MapEntry]: ...
    @MapEntries.setter
    def MapEntries(self, value: Array_1[MapEntry]) -> Array_1[MapEntry]: ...
    @property
    def Segments(self) -> Array_1[RemapSegment]: ...
    @Segments.setter
    def Segments(self, value: Array_1[RemapSegment]) -> Array_1[RemapSegment]: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> Result: ...
    def FsTrim(self) -> None: ...
    def GetBaseStorage(self) -> IStorage: ...
    def GetHeaderStorage(self) -> IStorage: ...
    def GetMapEntryStorage(self) -> IStorage: ...
    def GetOffsetFromVirtualOffset(self, virtualOffset: int) -> int: ...
    def GetSegmentFromVirtualOffset(self, virtualOffset: int) -> int: ...
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    def OperateRange(self, outBuffer: Span_1[int], operationId: OperationId, offset: int, size: int, inBuffer: ReadOnlySpan_1[int]) -> Result: ...
    def Read(self, offset: int, destination: Span_1[int]) -> Result: ...
    def SetSize(self, size: int) -> Result: ...
    def ToVirtualOffset(self, segment: int, offset: int) -> int: ...
    def Write(self, offset: int, source: ReadOnlySpan_1[int]) -> Result: ...


class SaveDataDirectory(IDirectory):
    def __init__(self, fs: SaveDataFileSystemCore, position: SaveFindPosition, mode: OpenDirectoryMode) -> None: ...


class SaveDataFile(IFile):
    def __init__(self, baseStorage: AllocationTableStorage, path: U8Span, fileTable: HierarchicalSaveFileTable, size: int, mode: OpenMode) -> None: ...


class SaveDataFileSystem(IFileSystem):
    @typing.overload
    def __init__(self, keySet: KeySet, storage: clr.Reference[SharedRef_1[IStorage]], integrityCheckLevel: IntegrityCheckLevel, leaveOpen: bool) -> None: ...
    @typing.overload
    def __init__(self, keySet: KeySet, storage: IStorage, integrityCheckLevel: IntegrityCheckLevel, leaveOpen: bool) -> None: ...
    @property
    def BaseStorage(self) -> IStorage: ...
    @BaseStorage.setter
    def BaseStorage(self, value: IStorage) -> IStorage: ...
    @property
    def CoreDataIvfcStorage(self) -> HierarchicalIntegrityVerificationStorage: ...
    @property
    def DataRemapStorage(self) -> RemapStorage: ...
    @property
    def DuplexStorage(self) -> HierarchicalDuplexStorage: ...
    @property
    def FatIvfcStorage(self) -> HierarchicalIntegrityVerificationStorage: ...
    @property
    def Header(self) -> Header: ...
    @property
    def JournalStorage(self) -> JournalStorage: ...
    @property
    def LeaveOpen(self) -> bool: ...
    @property
    def MetaRemapStorage(self) -> RemapStorage: ...
    @property
    def SaveDataFileSystemCore(self) -> SaveDataFileSystemCore: ...
    def Commit(self, keySet: KeySet) -> Result: ...
    def Dispose(self) -> None: ...
    def FsTrim(self) -> None: ...
    def Verify(self, logger: IProgressReport = ...) -> Validity: ...


class SaveDataFileSystemCore(IFileSystem):
    def __init__(self, storage: IStorage, allocationTable: IStorage, header: IStorage) -> None: ...
    @property
    def AllocationTable(self) -> AllocationTable: ...
    @property
    def FileTable(self) -> HierarchicalSaveFileTable: ...
    def FsTrim(self) -> None: ...
    def GetBaseStorage(self) -> IStorage: ...
    def GetHeaderStorage(self) -> IStorage: ...


class SaveExtensions(abc.ABC):
    @staticmethod
    def DumpChain(table: AllocationTable, startBlock: int) -> IEnumerable_1[ValueTuple_2[int, int]]: ...


class SaveFileInfo:
    Length : int
    Reserved : int
    StartBlock : int


class SaveFindPosition:
    NextDirectory : int
    NextFile : int


class SaveHeader:
    def __init__(self, storage: IStorage) -> None: ...
    @property
    def BlockCount(self) -> int: ...
    @property
    def BlockSize(self) -> int: ...
    @property
    def Magic(self) -> str: ...
    @property
    def Version(self) -> int: ...

