import typing, clr, abc
from LibHac.Fs import IStorage
from System import Array_1
from LibHac.Fs.Fsa import IFileSystem, IFile, IDirectory, OpenDirectoryMode
from LibHac import Result
from LibHac.Common import SharedRef_1

class FindPosition:
    NextDirectory : int
    NextFile : int


class HierarchicalRomFileTable_GenericClasses(abc.ABCMeta):
    Generic_HierarchicalRomFileTable_GenericClasses_HierarchicalRomFileTable_1_T = typing.TypeVar('Generic_HierarchicalRomFileTable_GenericClasses_HierarchicalRomFileTable_1_T')
    def __getitem__(self, types : typing.Type[Generic_HierarchicalRomFileTable_GenericClasses_HierarchicalRomFileTable_1_T]) -> typing.Type[HierarchicalRomFileTable_1[Generic_HierarchicalRomFileTable_GenericClasses_HierarchicalRomFileTable_1_T]]: ...

HierarchicalRomFileTable : HierarchicalRomFileTable_GenericClasses

HierarchicalRomFileTable_1_T = typing.TypeVar('HierarchicalRomFileTable_1_T')
class HierarchicalRomFileTable_1(typing.Generic[HierarchicalRomFileTable_1_T]):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, directoryCapacity: int, fileCapacity: int) -> None: ...
    @typing.overload
    def __init__(self, dirHashTable: IStorage, dirEntryTable: IStorage, fileHashTable: IStorage, fileEntryTable: IStorage) -> None: ...
    def AddDirectory(self, path: str) -> None: ...
    def AddFile(self, path: str, fileInfo: clr.Reference[HierarchicalRomFileTable_1_T]) -> None: ...
    def FindNextDirectory(self, position: clr.Reference[FindPosition], name: clr.Reference[str]) -> bool: ...
    def FindNextFile(self, position: clr.Reference[FindPosition], info: clr.Reference[HierarchicalRomFileTable_1_T], name: clr.Reference[str]) -> bool: ...
    def GetDirectoryBuckets(self) -> Array_1[int]: ...
    def GetDirectoryEntries(self) -> Array_1[int]: ...
    def GetFileBuckets(self) -> Array_1[int]: ...
    def GetFileEntries(self) -> Array_1[int]: ...
    def TrimExcess(self) -> None: ...
    # Skipped TryOpenDirectory due to it being static, abstract and generic.

    TryOpenDirectory : TryOpenDirectory_MethodGroup[HierarchicalRomFileTable_1_T]
    TryOpenDirectory_MethodGroup_HierarchicalRomFileTable_1_T = typing.TypeVar('TryOpenDirectory_MethodGroup_HierarchicalRomFileTable_1_T')
    class TryOpenDirectory_MethodGroup(typing.Generic[TryOpenDirectory_MethodGroup_HierarchicalRomFileTable_1_T]):
        TryOpenDirectory_MethodGroup_HierarchicalRomFileTable_1_T = HierarchicalRomFileTable_1.TryOpenDirectory_MethodGroup_HierarchicalRomFileTable_1_T
        @typing.overload
        def __call__(self, directoryId: int, position: clr.Reference[FindPosition]) -> bool:...
        @typing.overload
        def __call__(self, path: str, position: clr.Reference[FindPosition]) -> bool:...

    # Skipped TryOpenFile due to it being static, abstract and generic.

    TryOpenFile : TryOpenFile_MethodGroup[HierarchicalRomFileTable_1_T]
    TryOpenFile_MethodGroup_HierarchicalRomFileTable_1_T = typing.TypeVar('TryOpenFile_MethodGroup_HierarchicalRomFileTable_1_T')
    class TryOpenFile_MethodGroup(typing.Generic[TryOpenFile_MethodGroup_HierarchicalRomFileTable_1_T]):
        TryOpenFile_MethodGroup_HierarchicalRomFileTable_1_T = HierarchicalRomFileTable_1.TryOpenFile_MethodGroup_HierarchicalRomFileTable_1_T
        @typing.overload
        def __call__(self, fileId: int, fileInfo: clr.Reference[TryOpenFile_MethodGroup_HierarchicalRomFileTable_1_T]) -> bool:...
        @typing.overload
        def __call__(self, path: str, fileInfo: clr.Reference[TryOpenFile_MethodGroup_HierarchicalRomFileTable_1_T]) -> bool:...



class RomFileInfo:
    Length : int
    Offset : int


class RomFsBuilder:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, input: IFileSystem) -> None: ...
    def AddFile(self, path: str, file: IFile) -> None: ...
    def Build(self) -> IStorage: ...


class RomFsDirectory(IDirectory):
    def __init__(self, fs: RomFsFileSystem, position: FindPosition, mode: OpenDirectoryMode) -> None: ...


class RomFsFile(IFile):
    def __init__(self, baseStorage: IStorage, offset: int, size: int) -> None: ...
    def ConvertToApplicationResult(self, result: Result) -> Result: ...


class RomFsFileSystem(IFileSystem):
    @typing.overload
    def __init__(self, storage: IStorage) -> None: ...
    @typing.overload
    def __init__(self, storage: clr.Reference[SharedRef_1[IStorage]]) -> None: ...
    @property
    def FileTable(self) -> HierarchicalRomFileTable_1[RomFileInfo]: ...
    @property
    def Header(self) -> RomfsHeader: ...
    def Dispose(self) -> None: ...
    def GetBaseStorage(self) -> IStorage: ...


class RomfsHeader:
    def __init__(self, file: IFile) -> None: ...
    @property
    def DataOffset(self) -> int: ...
    @property
    def DirHashTableOffset(self) -> int: ...
    @property
    def DirHashTableSize(self) -> int: ...
    @property
    def DirMetaTableOffset(self) -> int: ...
    @property
    def DirMetaTableSize(self) -> int: ...
    @property
    def FileHashTableOffset(self) -> int: ...
    @property
    def FileHashTableSize(self) -> int: ...
    @property
    def FileMetaTableOffset(self) -> int: ...
    @property
    def FileMetaTableSize(self) -> int: ...
    @property
    def HeaderSize(self) -> int: ...

