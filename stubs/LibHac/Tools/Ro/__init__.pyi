import typing
from LibHac.Fs import IStorage
from System.IO import BinaryReader
from System import Array_1

class Nro:
    def __init__(self, storage: IStorage) -> None: ...
    @property
    def AssetHeader(self) -> NroAssetHeader: ...
    @property
    def Header(self) -> NroHeader: ...
    @property
    def Start(self) -> NroStart: ...
    def OpenNroAssetSection(self, type: NroAssetType, leaveOpen: bool) -> IStorage: ...
    def OpenNroSegment(self, type: NroSegmentType, leaveOpen: bool) -> IStorage: ...


class NroAssetHeader:
    def __init__(self, reader: BinaryReader) -> None: ...
    @property
    def Magic(self) -> str: ...
    @property
    def NroAssetSections(self) -> Array_1[NroAssetSection]: ...
    @property
    def Version(self) -> int: ...


class NroAssetSection:
    def __init__(self, reader: BinaryReader, type: NroAssetType) -> None: ...
    @property
    def FileOffset(self) -> int: ...
    @property
    def Size(self) -> int: ...
    @property
    def Type(self) -> NroAssetType: ...


class NroAssetType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Icon : NroAssetType # 0
    Nacp : NroAssetType # 1
    RomFs : NroAssetType # 2


class NroHeader:
    def __init__(self, reader: BinaryReader) -> None: ...
    @property
    def BssSize(self) -> int: ...
    @property
    def BuildId(self) -> Array_1[int]: ...
    @property
    def Magic(self) -> str: ...
    @property
    def NroSegments(self) -> Array_1[NroSegment]: ...
    @property
    def Size(self) -> int: ...
    @property
    def Version(self) -> int: ...


class NroSegment:
    def __init__(self, reader: BinaryReader, type: NroSegmentType) -> None: ...
    @property
    def FileOffset(self) -> int: ...
    @property
    def Size(self) -> int: ...
    @property
    def Type(self) -> NroSegmentType: ...


class NroSegmentType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Text : NroSegmentType # 0
    Ro : NroSegmentType # 1
    Data : NroSegmentType # 2


class NroStart:
    def __init__(self, reader: BinaryReader) -> None: ...
    @property
    def Mod0Offset(self) -> int: ...

