import typing, clr, abc
from System.Collections.Generic import List_1, IEnumerable_1, Dictionary_2
from LibHac.Common import BlitStruct_1, IProgressReport, UniqueRef_1, Validity
from LibHac.Ns import ApplicationControlProperty
from LibHac.Tools.FsSystem.NcaUtils import TitleVersion, Nca
from LibHac.Fs import DirectoryEntryType, NxFileAttributes, FileSystemClient, IStorage, GameCardAttribute, GameCardSizeInternal
from LibHac import Result
from LibHac.Fs.Fsa import CreateFileOptions, IAttributeFileSystem, IFileSystem
from LibHac.Tools.FsSystem import SearchOptions, IntegrityCheckLevel
from System import IDisposable, Array_1
from LibHac.Common.Keys import KeySet
from LibHac.Tools.FsSystem.Save import SaveDataFileSystem
from LibHac.FsSystem import NcaSectionType, PartitionFileSystem, PartitionFileEntry, PartitionFileSystemHeader
from LibHac.Tools.Ncm import Cnmt
from System.IO import Stream

class Application:
    def __init__(self) -> None: ...
    @property
    def AddOnContent(self) -> List_1[Title]: ...
    @property
    def DisplayVersion(self) -> str: ...
    @DisplayVersion.setter
    def DisplayVersion(self, value: str) -> str: ...
    @property
    def Main(self) -> Title: ...
    @Main.setter
    def Main(self, value: Title) -> Title: ...
    @property
    def Nacp(self) -> BlitStruct_1[ApplicationControlProperty]: ...
    @Nacp.setter
    def Nacp(self, value: BlitStruct_1[ApplicationControlProperty]) -> BlitStruct_1[ApplicationControlProperty]: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Patch(self) -> Title: ...
    @Patch.setter
    def Patch(self, value: Title) -> Title: ...
    @property
    def TitleId(self) -> int: ...
    @TitleId.setter
    def TitleId(self, value: int) -> int: ...
    @property
    def Version(self) -> TitleVersion: ...
    @Version.setter
    def Version(self, value: TitleVersion) -> TitleVersion: ...
    def AddTitle(self, title: Title) -> None: ...


class CardClockRate(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ClockRate50 : CardClockRate # 10551312
    ClockRate25 : CardClockRate # 10551313


class DirectoryEntryEx:
    def __init__(self, name: str, fullPath: str, type: DirectoryEntryType, size: int) -> None: ...
    @property
    def Attributes(self) -> NxFileAttributes: ...
    @Attributes.setter
    def Attributes(self, value: NxFileAttributes) -> NxFileAttributes: ...
    @property
    def FullPath(self) -> str: ...
    @FullPath.setter
    def FullPath(self, value: str) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Size(self) -> int: ...
    @Size.setter
    def Size(self, value: int) -> int: ...
    @property
    def Type(self) -> DirectoryEntryType: ...
    @Type.setter
    def Type(self, value: DirectoryEntryType) -> DirectoryEntryType: ...


class FileSystemClientUtils(abc.ABC):
    @staticmethod
    def CopyDirectory(fs: FileSystemClient, sourcePath: str, destPath: str, options: CreateFileOptions = ..., logger: IProgressReport = ...) -> Result: ...
    @staticmethod
    def CopyFile(fs: FileSystemClient, sourcePath: str, destPath: str, logger: IProgressReport = ...) -> Result: ...
    @staticmethod
    def DirectoryExists(fs: FileSystemClient, path: str) -> bool: ...
    @staticmethod
    def EnsureDirectoryExists(fs: FileSystemClient, path: str) -> None: ...
    @staticmethod
    def FileExists(fs: FileSystemClient, path: str) -> bool: ...
    # Skipped CreateOrOverwriteFile due to it being static, abstract and generic.

    CreateOrOverwriteFile : CreateOrOverwriteFile_MethodGroup
    class CreateOrOverwriteFile_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, path: str, size: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, path: str, size: int, options: CreateFileOptions) -> Result:...

    # Skipped EnumerateEntries due to it being static, abstract and generic.

    EnumerateEntries : EnumerateEntries_MethodGroup
    class EnumerateEntries_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, path: str) -> IEnumerable_1[DirectoryEntryEx]:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, path: str, searchPattern: str) -> IEnumerable_1[DirectoryEntryEx]:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, path: str, searchPattern: str, searchOptions: SearchOptions) -> IEnumerable_1[DirectoryEntryEx]:...



class InMemoryFileSystem(IAttributeFileSystem):
    def __init__(self) -> None: ...


class SwitchFs(IDisposable):
    def __init__(self, keySet: KeySet, contentFileSystem: IFileSystem, saveFileSystem: IFileSystem) -> None: ...
    @property
    def Applications(self) -> Dictionary_2[int, Application]: ...
    @property
    def ContentFs(self) -> IFileSystem: ...
    @property
    def KeySet(self) -> KeySet: ...
    @property
    def Ncas(self) -> Dictionary_2[str, SwitchFsNca]: ...
    @property
    def SaveFs(self) -> IFileSystem: ...
    @property
    def Saves(self) -> Dictionary_2[str, SaveDataFileSystem]: ...
    @property
    def Titles(self) -> Dictionary_2[int, Title]: ...
    def Dispose(self) -> None: ...
    @staticmethod
    def OpenNandPartition(keySet: KeySet, fileSystem: clr.Reference[UniqueRef_1[IAttributeFileSystem]]) -> SwitchFs: ...
    @staticmethod
    def OpenNcaDirectory(keySet: KeySet, fileSystem: IFileSystem) -> SwitchFs: ...
    @staticmethod
    def OpenSdCard(keySet: KeySet, fileSystem: clr.Reference[UniqueRef_1[IAttributeFileSystem]]) -> SwitchFs: ...


class SwitchFsNca:
    def __init__(self, nca: Nca) -> None: ...
    @property
    def BaseNca(self) -> Nca: ...
    @BaseNca.setter
    def BaseNca(self, value: Nca) -> Nca: ...
    @property
    def Filename(self) -> str: ...
    @Filename.setter
    def Filename(self, value: str) -> str: ...
    @property
    def Nca(self) -> Nca: ...
    @Nca.setter
    def Nca(self, value: Nca) -> Nca: ...
    @property
    def NcaId(self) -> str: ...
    @NcaId.setter
    def NcaId(self, value: str) -> str: ...
    def VerifyNca(self, logger: IProgressReport = ..., quiet: bool = ...) -> Validity: ...
    # Skipped OpenFileSystem due to it being static, abstract and generic.

    OpenFileSystem : OpenFileSystem_MethodGroup
    class OpenFileSystem_MethodGroup:
        @typing.overload
        def __call__(self, index: int, integrityCheckLevel: IntegrityCheckLevel) -> IFileSystem:...
        @typing.overload
        def __call__(self, type: NcaSectionType, integrityCheckLevel: IntegrityCheckLevel) -> IFileSystem:...

    # Skipped OpenStorage due to it being static, abstract and generic.

    OpenStorage : OpenStorage_MethodGroup
    class OpenStorage_MethodGroup:
        @typing.overload
        def __call__(self, index: int, integrityCheckLevel: IntegrityCheckLevel) -> IStorage:...
        @typing.overload
        def __call__(self, type: NcaSectionType, integrityCheckLevel: IntegrityCheckLevel) -> IStorage:...



class Title:
    def __init__(self) -> None: ...
    @property
    def Control(self) -> BlitStruct_1[ApplicationControlProperty]: ...
    @property
    def ControlNca(self) -> SwitchFsNca: ...
    @ControlNca.setter
    def ControlNca(self, value: SwitchFsNca) -> SwitchFsNca: ...
    @property
    def Id(self) -> int: ...
    @Id.setter
    def Id(self, value: int) -> int: ...
    @property
    def MainNca(self) -> SwitchFsNca: ...
    @MainNca.setter
    def MainNca(self, value: SwitchFsNca) -> SwitchFsNca: ...
    @property
    def Metadata(self) -> Cnmt: ...
    @Metadata.setter
    def Metadata(self, value: Cnmt) -> Cnmt: ...
    @property
    def MetaNca(self) -> SwitchFsNca: ...
    @MetaNca.setter
    def MetaNca(self, value: SwitchFsNca) -> SwitchFsNca: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Ncas(self) -> List_1[SwitchFsNca]: ...
    @property
    def Version(self) -> TitleVersion: ...
    @Version.setter
    def Version(self, value: TitleVersion) -> TitleVersion: ...
    def GetSize(self) -> int: ...


class Xci:
    def __init__(self, keySet: KeySet, storage: IStorage) -> None: ...
    @property
    def Header(self) -> XciHeader: ...
    def HasPartition(self, type: XciPartitionType) -> bool: ...
    def OpenPartition(self, type: XciPartitionType) -> XciPartition: ...


class XciExtensions(abc.ABC):
    @staticmethod
    def GetFileName(type: XciPartitionType) -> str: ...


class XciHeader:
    def __init__(self, keySet: KeySet, stream: Stream) -> None: ...
    @property
    def AccCtrl1(self) -> CardClockRate: ...
    @AccCtrl1.setter
    def AccCtrl1(self, value: CardClockRate) -> CardClockRate: ...
    @property
    def AesCbcIv(self) -> Array_1[int]: ...
    @AesCbcIv.setter
    def AesCbcIv(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def BackupAreaStartPage(self) -> int: ...
    @BackupAreaStartPage.setter
    def BackupAreaStartPage(self, value: int) -> int: ...
    @property
    def CardHeaderVersion(self) -> int: ...
    @CardHeaderVersion.setter
    def CardHeaderVersion(self, value: int) -> int: ...
    @property
    def CompatibilityType(self) -> int: ...
    @CompatibilityType.setter
    def CompatibilityType(self, value: int) -> int: ...
    @property
    def DecryptedTitleKey(self) -> Array_1[int]: ...
    @DecryptedTitleKey.setter
    def DecryptedTitleKey(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def Flags(self) -> GameCardAttribute: ...
    @Flags.setter
    def Flags(self, value: GameCardAttribute) -> GameCardAttribute: ...
    @property
    def FwMode(self) -> int: ...
    @FwMode.setter
    def FwMode(self, value: int) -> int: ...
    @property
    def FwVersion(self) -> int: ...
    @FwVersion.setter
    def FwVersion(self, value: int) -> int: ...
    @property
    def GameCardSize(self) -> GameCardSizeInternal: ...
    @GameCardSize.setter
    def GameCardSize(self, value: GameCardSizeInternal) -> GameCardSizeInternal: ...
    @property
    def HasInitialData(self) -> bool: ...
    @HasInitialData.setter
    def HasInitialData(self, value: bool) -> bool: ...
    @property
    def ImageHash(self) -> Array_1[int]: ...
    @property
    def InitialData(self) -> Array_1[int]: ...
    @InitialData.setter
    def InitialData(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def InitialDataAuthData(self) -> Array_1[int]: ...
    @InitialDataAuthData.setter
    def InitialDataAuthData(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def InitialDataAuthMac(self) -> Array_1[int]: ...
    @InitialDataAuthMac.setter
    def InitialDataAuthMac(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def InitialDataAuthNonce(self) -> Array_1[int]: ...
    @InitialDataAuthNonce.setter
    def InitialDataAuthNonce(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def InitialDataHash(self) -> Array_1[int]: ...
    @InitialDataHash.setter
    def InitialDataHash(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def InitialDataPackageId(self) -> Array_1[int]: ...
    @InitialDataPackageId.setter
    def InitialDataPackageId(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def InitialDataValidity(self) -> Validity: ...
    @InitialDataValidity.setter
    def InitialDataValidity(self, value: Validity) -> Validity: ...
    @property
    def IsHeaderDecrypted(self) -> bool: ...
    @IsHeaderDecrypted.setter
    def IsHeaderDecrypted(self, value: bool) -> bool: ...
    @property
    def KekIndex(self) -> int: ...
    @KekIndex.setter
    def KekIndex(self, value: int) -> int: ...
    @property
    def LimAreaPage(self) -> int: ...
    @LimAreaPage.setter
    def LimAreaPage(self, value: int) -> int: ...
    @property
    def Magic(self) -> str: ...
    @Magic.setter
    def Magic(self, value: str) -> str: ...
    @property
    def PackageId(self) -> int: ...
    @PackageId.setter
    def PackageId(self, value: int) -> int: ...
    @property
    def PartitionFsHeaderValidity(self) -> Validity: ...
    @PartitionFsHeaderValidity.setter
    def PartitionFsHeaderValidity(self, value: Validity) -> Validity: ...
    @property
    def RomAreaStartPage(self) -> int: ...
    @RomAreaStartPage.setter
    def RomAreaStartPage(self, value: int) -> int: ...
    @property
    def RootPartitionHeaderHash(self) -> Array_1[int]: ...
    @RootPartitionHeaderHash.setter
    def RootPartitionHeaderHash(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def RootPartitionHeaderSize(self) -> int: ...
    @RootPartitionHeaderSize.setter
    def RootPartitionHeaderSize(self, value: int) -> int: ...
    @property
    def RootPartitionOffset(self) -> int: ...
    @RootPartitionOffset.setter
    def RootPartitionOffset(self, value: int) -> int: ...
    @property
    def SelKey(self) -> int: ...
    @SelKey.setter
    def SelKey(self, value: int) -> int: ...
    @property
    def SelSec(self) -> int: ...
    @SelSec.setter
    def SelSec(self, value: int) -> int: ...
    @property
    def SelT1Key(self) -> int: ...
    @SelT1Key.setter
    def SelT1Key(self, value: int) -> int: ...
    @property
    def Signature(self) -> Array_1[int]: ...
    @Signature.setter
    def Signature(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def SignatureValidity(self) -> Validity: ...
    @SignatureValidity.setter
    def SignatureValidity(self, value: Validity) -> Validity: ...
    @property
    def TitleKeyDecIndex(self) -> int: ...
    @TitleKeyDecIndex.setter
    def TitleKeyDecIndex(self, value: int) -> int: ...
    @property
    def UppHash(self) -> Array_1[int]: ...
    @UppHash.setter
    def UppHash(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def UppId(self) -> int: ...
    @UppId.setter
    def UppId(self, value: int) -> int: ...
    @property
    def UppVersion(self) -> int: ...
    @UppVersion.setter
    def UppVersion(self, value: int) -> int: ...
    @property
    def ValidDataEndPage(self) -> int: ...
    @ValidDataEndPage.setter
    def ValidDataEndPage(self, value: int) -> int: ...
    @property
    def Wait1TimeRead(self) -> int: ...
    @Wait1TimeRead.setter
    def Wait1TimeRead(self, value: int) -> int: ...
    @property
    def Wait1TimeWrite(self) -> int: ...
    @Wait1TimeWrite.setter
    def Wait1TimeWrite(self, value: int) -> int: ...
    @property
    def Wait2TimeRead(self) -> int: ...
    @Wait2TimeRead.setter
    def Wait2TimeRead(self, value: int) -> int: ...
    @property
    def Wait2TimeWrite(self) -> int: ...
    @Wait2TimeWrite.setter
    def Wait2TimeWrite(self, value: int) -> int: ...


class XciPartition(PartitionFileSystem):
    def __init__(self, storage: IStorage) -> None: ...
    @property
    def Files(self) -> Array_1[PartitionFileEntry]: ...
    @property
    def HashValidity(self) -> Validity: ...
    @HashValidity.setter
    def HashValidity(self, value: Validity) -> Validity: ...
    @property
    def Header(self) -> PartitionFileSystemHeader: ...
    @property
    def HeaderSize(self) -> int: ...
    @property
    def Offset(self) -> int: ...
    @Offset.setter
    def Offset(self, value: int) -> int: ...


class XciPartitionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Update : XciPartitionType # 0
    Normal : XciPartitionType # 1
    Secure : XciPartitionType # 2
    Logo : XciPartitionType # 3
    Root : XciPartitionType # 4

