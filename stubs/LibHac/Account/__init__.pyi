import typing
from System import IComparable, IComparable_1, IEquatable_1, ReadOnlySpan_1, Span_1
from LibHac.Common import Id128

class Uid(IComparable, IComparable_1[Uid], IEquatable_1[Uid]):
    @typing.overload
    def __init__(self, high: int, low: int) -> None: ...
    @typing.overload
    def __init__(self, uid: ReadOnlySpan_1[int]) -> None: ...
    Id : Id128
    @classmethod
    @property
    def InvalidUid(cls) -> Uid: ...
    def AsBytes(self) -> ReadOnlySpan_1[int]: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: Uid, right: Uid) -> bool: ...
    def __gt__(self, left: Uid, right: Uid) -> bool: ...
    def __ge__(self, left: Uid, right: Uid) -> bool: ...
    def __ne__(self, left: Uid, right: Uid) -> bool: ...
    def __lt__(self, left: Uid, right: Uid) -> bool: ...
    def __le__(self, left: Uid, right: Uid) -> bool: ...
    def ToBytes(self, output: Span_1[int]) -> None: ...
    def ToString(self) -> str: ...
    # Skipped CompareTo due to it being static, abstract and generic.

    CompareTo : CompareTo_MethodGroup
    class CompareTo_MethodGroup:
        @typing.overload
        def __call__(self, other: Uid) -> int:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> int:...

    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: Uid) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...


