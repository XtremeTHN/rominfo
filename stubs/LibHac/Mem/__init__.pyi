import typing
from System import IEquatable_1, Span_1

class Buffer(IEquatable_1[Buffer]):
    @classmethod
    @property
    def Empty(cls) -> Buffer: ...
    @property
    def IsNull(self) -> bool: ...
    @property
    def Length(self) -> int: ...
    @property
    def Span(self) -> Span_1[int]: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: Buffer, right: Buffer) -> bool: ...
    def __ne__(self, left: Buffer, right: Buffer) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: Buffer) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...


