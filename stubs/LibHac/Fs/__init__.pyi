import typing, clr, abc
from LibHac import Result, HorizonClient
from System import TimeSpan, IDisposable, Span_1, ReadOnlySpan_1, Array_1, IComparable_1, IEquatable_1, MulticastDelegate, IAsyncResult, AsyncCallback, IComparable, Func_1
from LibHac.Common.FixedArrays import Array16_1, Array18_1, Array28_1, Array32_1, Array3_1, Array256_1, Array769_1, Array2_1, Array68_1, Array7_1, Array8_1, Array8192_1, Array16384_1, Array60_1, Array15_1, Array56_1, Array24_1, Array26_1, Array356_1, Array400_1, Array36_1, Array11_1, Array512_1, Array64_1, Array20_1
from LibHac.Ncm import ApplicationId, ProgramId
from LibHac.Ns import ApplicationControlProperty
from LibHac.Account import Uid
from LibHac.Fs.Fsa import IFile, IFileSystem
from LibHac.Common import SharedRef_1, UniqueRef_1, Id128
from LibHac.Fat import FatReportInfo, FatError
from LibHac.Time import PosixTime
from LibHac.Mem import Buffer
from LibHac.Fs.Impl import InitialDataAad, InitialDataMac, KeySeed, ExportReportInfo, ImportReportInfo
from LibHac.FsSrv.Sf import FspPath, ISaveDataTransferProhibiter
from System.Reflection import MethodInfo
from LibHac.Util import Optional_1

class AbortSpecifier(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : AbortSpecifier # 0
    Abort : AbortSpecifier # 1
    Return : AbortSpecifier # 2


class AccessLog(abc.ABC):
    @staticmethod
    def GetGlobalAccessLogMode(fs: FileSystemClient, mode: clr.Reference[GlobalAccessLogMode]) -> Result: ...
    @staticmethod
    def OutputApplicationInfoAccessLog(fs: FileSystemClient, applicationInfo: clr.Reference[ApplicationInfo]) -> None: ...
    @staticmethod
    def SetGlobalAccessLogMode(fs: FileSystemClient, mode: GlobalAccessLogMode) -> Result: ...
    @staticmethod
    def SetLocalAccessLog(fs: FileSystemClient, enabled: bool) -> None: ...
    @staticmethod
    def SetLocalApplicationAccessLog(fs: FileSystemClient, enabled: bool) -> None: ...
    @staticmethod
    def SetLocalSystemAccessLogForDebug(fs: FileSystemClient, enabled: bool) -> None: ...
    @staticmethod
    def SetServerlessAccessLog(fs: FileSystemClient, isServerless: bool) -> None: ...


class AccessLogHelpers(abc.ABC):
    @staticmethod
    def BuildDefaultLogLine(result: Result, startTime: TimeSpan, endTime: TimeSpan, handleId: int, message: str, caller: str) -> str: ...


class AesKey:
    Value : Array16_1[int]


class ApplicationInfo:
    ApplicationId : ApplicationId
    IsMultiProgram : bool
    LaunchType : int
    Reserved : Array18_1[int]
    Version : int


class ApplicationSaveDataManagement(abc.ABC):
    @staticmethod
    def CleanUpTemporaryStorage(fs: FileSystemClient) -> Result: ...
    @staticmethod
    def CreateApplicationCacheStorage(fs: FileSystemClient, outRequiredSize: clr.Reference[int], targetMedia: clr.Reference[CacheStorageTargetMedia], applicationId: ApplicationId, controlProperty: clr.Reference[ApplicationControlProperty], index: int, cacheStorageSize: int, cacheStorageJournalSize: int) -> Result: ...
    @staticmethod
    def EnsureApplicationBcatDeliveryCacheStorage(fs: FileSystemClient, outRequiredSize: clr.Reference[int], applicationId: ApplicationId, controlProperty: clr.Reference[ApplicationControlProperty]) -> Result: ...
    @staticmethod
    def EnsureApplicationDeviceSaveData(fs: FileSystemClientImpl, outRequiredSize: clr.Reference[int], applicationId: ApplicationId, saveDataSize: int, saveDataJournalSize: int) -> Result: ...
    @staticmethod
    def EnsureApplicationSaveData(fs: FileSystemClient, outRequiredSize: clr.Reference[int], applicationId: ApplicationId, controlProperty: clr.Reference[ApplicationControlProperty], user: clr.Reference[Uid]) -> Result: ...
    @staticmethod
    def ExtendApplicationSaveData(fs: FileSystemClient, outRequiredSize: clr.Reference[int], applicationId: ApplicationId, controlProperty: clr.Reference[ApplicationControlProperty], type: SaveDataType, user: clr.Reference[Uid], saveDataSize: int, saveDataJournalSize: int) -> Result: ...
    @staticmethod
    def GetApplicationSaveDataSize(fs: FileSystemClient, outSaveDataSize: clr.Reference[int], outSaveDataJournalSize: clr.Reference[int], applicationId: ApplicationId, type: SaveDataType, user: clr.Reference[Uid]) -> Result: ...
    @staticmethod
    def GetCacheStorageTargetMedia(fs: FileSystemClient, targetMedia: clr.Reference[CacheStorageTargetMedia], applicationId: ApplicationId) -> Result: ...
    # Skipped EnsureApplicationCacheStorage due to it being static, abstract and generic.

    EnsureApplicationCacheStorage : EnsureApplicationCacheStorage_MethodGroup
    class EnsureApplicationCacheStorage_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, outRequiredSize: clr.Reference[int], applicationId: ApplicationId, controlProperty: clr.Reference[ApplicationControlProperty]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, outRequiredSize: clr.Reference[int], targetMedia: clr.Reference[CacheStorageTargetMedia], applicationId: ApplicationId, controlProperty: clr.Reference[ApplicationControlProperty]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, outRequiredSize: clr.Reference[int], targetMedia: clr.Reference[CacheStorageTargetMedia], applicationId: ApplicationId, saveDataOwnerId: int, index: int, cacheStorageSize: int, cacheStorageJournalSize: int, allowExisting: bool) -> Result:...



class BaseFileSystemId(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ImageDirectoryNand : BaseFileSystemId # 0
    ImageDirectorySdCard : BaseFileSystemId # 1
    TemporaryDirectory : BaseFileSystemId # 2


class BisPartitionId(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BootPartition1Root : BisPartitionId # 0
    BootPartition2Root : BisPartitionId # 10
    UserDataRoot : BisPartitionId # 20
    BootConfigAndPackage2Part1 : BisPartitionId # 21
    BootConfigAndPackage2Part2 : BisPartitionId # 22
    BootConfigAndPackage2Part3 : BisPartitionId # 23
    BootConfigAndPackage2Part4 : BisPartitionId # 24
    BootConfigAndPackage2Part5 : BisPartitionId # 25
    BootConfigAndPackage2Part6 : BisPartitionId # 26
    CalibrationBinary : BisPartitionId # 27
    CalibrationFile : BisPartitionId # 28
    SafeMode : BisPartitionId # 29
    User : BisPartitionId # 30
    System : BisPartitionId # 31
    SystemProperEncryption : BisPartitionId # 32
    SystemProperPartition : BisPartitionId # 33
    SignedSystemPartitionOnSafeMode : BisPartitionId # 34


class CacheStorageInfo:
    Index : int
    Reserved : Array28_1[int]


class CacheStorageListHandle:
    pass


class CacheStorageTargetMedia(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : CacheStorageTargetMedia # 0
    Nand : CacheStorageTargetMedia # 1
    SdCard : CacheStorageTargetMedia # 2


class CloudBackupWorkStorageId(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Nand : CloudBackupWorkStorageId # 0
    SdCard : CloudBackupWorkStorageId # 1


class CodeVerificationData:
    HasData : bool
    Hash : Array32_1[int]
    Reserved : Array3_1[int]
    Signature : Array256_1[int]


class CommitOption:
    Flags : CommitOptionFlag


class CommitOptionFlag(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : CommitOptionFlag # 0
    ClearRestoreFlag : CommitOptionFlag # 1
    SetRestoreFlag : CommitOptionFlag # 2


class ContentStorageId(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    System : ContentStorageId # 0
    User : ContentStorageId # 1
    SdCard : ContentStorageId # 2


class ContentType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Meta : ContentType # 0
    Control : ContentType # 1
    Manual : ContentType # 2
    Logo : ContentType # 3
    Data : ContentType # 4


class CustomStorageId(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    System : CustomStorageId # 0
    SdCard : CustomStorageId # 1


class DirectoryEntry:
    Attributes : NxFileAttributes
    Name : Array769_1[int]
    Reserved302 : Array2_1[int]
    Reserved305 : Array3_1[int]
    Size : int
    Type : DirectoryEntryType


class DirectoryEntryType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Directory : DirectoryEntryType # 0
    File : DirectoryEntryType # 1


class DirectoryHandle(IDisposable):
    @property
    def IsValid(self) -> bool: ...
    def Dispose(self) -> None: ...


class DirectoryPathParser:
    def __init__(self) -> None: ...
    CurrentPath : Path
    def Dispose(self) -> None: ...
    def Initialize(self, path: clr.Reference[Path]) -> Result: ...
    def ReadNext(self, isFinished: clr.Reference[bool]) -> Result: ...


class EncryptionSeed:
    Value : Array16_1[int]
    def ToString(self) -> str: ...


class FileHandle(IDisposable):
    @property
    def IsValid(self) -> bool: ...
    def Dispose(self) -> None: ...


class FileHandleStorage(IStorage):
    @typing.overload
    def __init__(self, fsClient: FileSystemClient, handle: FileHandle) -> None: ...
    @typing.overload
    def __init__(self, fsClient: FileSystemClient, handle: FileHandle, closeFile: bool) -> None: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> Result: ...
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    def OperateRange(self, outBuffer: Span_1[int], operationId: OperationId, offset: int, size: int, inBuffer: ReadOnlySpan_1[int]) -> Result: ...
    def Read(self, offset: int, destination: Span_1[int]) -> Result: ...
    def SetSize(self, size: int) -> Result: ...
    def Write(self, offset: int, source: ReadOnlySpan_1[int]) -> Result: ...


class FileStorage(IStorage):
    @typing.overload
    def __init__(self, baseFile: IFile) -> None: ...
    @typing.overload
    def __init__(self, baseFile: clr.Reference[SharedRef_1[IFile]]) -> None: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> Result: ...
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    def OperateRange(self, outBuffer: Span_1[int], operationId: OperationId, offset: int, size: int, inBuffer: ReadOnlySpan_1[int]) -> Result: ...
    def Read(self, offset: int, destination: Span_1[int]) -> Result: ...
    def SetSize(self, size: int) -> Result: ...
    def Write(self, offset: int, source: ReadOnlySpan_1[int]) -> Result: ...


class FileStorageBasedFileSystem(FileStorage):
    def __init__(self) -> None: ...
    def Dispose(self) -> None: ...
    def Initialize(self, baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]], path: clr.Reference[Path], mode: OpenMode) -> Result: ...


class FileSystemClient(IDisposable):
    def __init__(self, horizonClient: HorizonClient) -> None: ...
    @property
    def Impl(self) -> FileSystemClientImpl: ...
    def Dispose(self) -> None: ...


class FileSystemClientImpl:
    pass


class FileSystemProxyErrorInfo:
    BisSystemFatReportInfo : FatReportInfo
    BisUserFatReport : FatReportInfo
    FatFsError : FatError
    RecoveredByInvalidateCacheCount : int
    RemountForDataCorruptionCount : int
    Reserved : Array68_1[int]
    SaveDataIndexCount : int
    SdCardFatReport : FatReportInfo
    UnrecoverableDataCorruptionByRemountCount : int


class FileSystemProxyType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Code : FileSystemProxyType # 0
    Rom : FileSystemProxyType # 1
    Logo : FileSystemProxyType # 2
    Control : FileSystemProxyType # 3
    Manual : FileSystemProxyType # 4
    Meta : FileSystemProxyType # 5
    Data : FileSystemProxyType # 6
    Package : FileSystemProxyType # 7
    RegisteredUpdate : FileSystemProxyType # 8


class FileTimeStamp:
    Accessed : PosixTime
    Created : PosixTime
    IsLocalTime : bool
    Modified : PosixTime
    Reserved : Array7_1[int]


class FileTimeStampRaw:
    Accessed : int
    Created : int
    IsLocalTime : bool
    Modified : int
    Reserved : Array7_1[int]


class FsContext:
    def __init__(self, fsClient: FileSystemClient, resultHandler: ResultHandler) -> None: ...
    def GetHandler(self) -> ResultHandler: ...
    def HandleResult(self, result: Result) -> AbortSpecifier: ...
    def SetHandler(self, handler: ResultHandler) -> None: ...


class FsContextHandler(abc.ABC):
    @staticmethod
    def GetCurrentThreadFsContext(fs: FileSystemClient) -> clr.Reference[FsContext]: ...
    @staticmethod
    def IsAutoAbortPolicyCustomized(fs: FileSystemClient) -> bool: ...
    @staticmethod
    def IsResolubleAccessFailureResult(result: Result) -> bool: ...
    @staticmethod
    def SetCurrentThreadFsContext(fs: FileSystemClient, context: FsContext) -> None: ...
    @staticmethod
    def SetDefaultFsContextResultHandler(fs: FileSystemClient, resultHandler: ResultHandler) -> None: ...
    @staticmethod
    def SetEnabledAutoAbort(fs: FileSystemClient, isEnabled: bool) -> None: ...


class FsStackUsageThreadType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    MainThread : FsStackUsageThreadType # 0
    IpcWorker : FsStackUsageThreadType # 1
    PipelineWorker : FsStackUsageThreadType # 2


class GameCard(abc.ABC):
    @staticmethod
    def CardPageToOffset(page: int) -> int: ...
    @staticmethod
    def GetGameCardSizeBytes(size: GameCardSizeInternal) -> int: ...


class GameCardAttribute(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : GameCardAttribute # 0
    AutoBootFlag : GameCardAttribute # 1
    HistoryEraseFlag : GameCardAttribute # 2
    RepairToolFlag : GameCardAttribute # 4
    DifferentRegionCupToTerraDeviceFlag : GameCardAttribute # 8
    DifferentRegionCupToGlobalDeviceFlag : GameCardAttribute # 16
    HasCa10CertificateFlag : GameCardAttribute # 128


class GameCardCompatibilityType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Normal : GameCardCompatibilityType # 0
    Terra : GameCardCompatibilityType # 1


class GameCardErrorInfo:
    AsicCrcErrorCount : int
    GameCardCrcErrorCount : int
    ReadRetryCount : int
    RefreshCount : int
    Reserved2 : int
    Reserved6 : int
    ReservedA : int
    TimeoutRetryErrorCount : int


class GameCardErrorReportInfo:
    AsicInitializeCount : int
    AsicReinitializeCount : int
    AsicReinitializeFailureCount : int
    AsicReinitializeFailureDetail : int
    AwakenCount : int
    AwakenFailureCount : int
    ErrorInfo : GameCardErrorInfo
    InsertionCount : int
    LastReadErrorPageAddress : int
    LastReadErrorPageCount : int
    ReadCountFromAwaken : int
    ReadCountFromInsert : int
    RefreshCount : int
    RemovalCount : int
    Reserved20 : int
    Reserved38 : Array8_1[int]


class GameCardPartition(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Update : GameCardPartition # 0
    Normal : GameCardPartition # 1
    Secure : GameCardPartition # 2
    Logo : GameCardPartition # 3


class GameCardPartitionRaw(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NormalReadOnly : GameCardPartitionRaw # 0
    SecureReadOnly : GameCardPartitionRaw # 1
    RootWriteOnly : GameCardPartitionRaw # 2


class GameCardSize(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Size1GB : GameCardSize # 1
    Size2GB : GameCardSize # 2
    Size4GB : GameCardSize # 4
    Size8GB : GameCardSize # 8
    Size16GB : GameCardSize # 16
    Size32GB : GameCardSize # 32


class GameCardSizeInternal(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Size8Gb : GameCardSizeInternal # 224
    Size16Gb : GameCardSizeInternal # 225
    Size32Gb : GameCardSizeInternal # 226
    Size4Gb : GameCardSizeInternal # 240
    Size2Gb : GameCardSizeInternal # 248
    Size1Gb : GameCardSizeInternal # 250


class GameCardUpdatePartitionInfo:
    CupId : int
    CupVersion : int


class GlobalAccessLogMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : GlobalAccessLogMode # 0
    Log : GlobalAccessLogMode # 1
    SdCard : GlobalAccessLogMode # 2
    All : GlobalAccessLogMode # 3


class HashSalt:
    @property
    def Hash(self) -> Span_1[int]: ...
    @property
    def HashRo(self) -> ReadOnlySpan_1[int]: ...


class IBufferManager(IDisposable, abc.ABC):
    BufferLevelMin : int
    def AcquireCache(self, handle: int) -> Buffer: ...
    def ClearPeak(self) -> None: ...
    def DeallocateBuffer(self, buffer: Buffer) -> None: ...
    def Dispose(self) -> None: ...
    def GetFreeSize(self) -> int: ...
    def GetFreeSizePeak(self) -> int: ...
    def GetRetriedCount(self) -> int: ...
    def GetTotalAllocatableSize(self) -> int: ...
    def GetTotalAllocatableSizePeak(self) -> int: ...
    def GetTotalSize(self) -> int: ...
    def RegisterCache(self, buffer: Buffer, attribute: IBufferManager.BufferAttribute) -> int: ...
    # Skipped AllocateBuffer due to it being static, abstract and generic.

    AllocateBuffer : AllocateBuffer_MethodGroup
    class AllocateBuffer_MethodGroup:
        @typing.overload
        def __call__(self, size: int) -> Buffer:...
        @typing.overload
        def __call__(self, size: int, attribute: IBufferManager.BufferAttribute) -> Buffer:...


    class BufferAttribute:
        def __init__(self, level: int) -> None: ...
        @property
        def Level(self) -> int: ...



class ImageDirectoryId(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Nand : ImageDirectoryId # 0
    SdCard : ImageDirectoryId # 1


class InitialDataVersion2:
    Value : Array8192_1[int]


class Int64:
    def Get(self) -> int: ...
    # Operator not supported op_Implicit(value: Int64&)
    def Set(self, value: int) -> None: ...


class ISaveDataChunkExporter(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def GetRestRawDataSize(self) -> int: ...
    @abc.abstractmethod
    def Pull(self, outPulledSize: clr.Reference[int], destination: Span_1[int]) -> Result: ...


class ISaveDataChunkImporter(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def Push(self, source: ReadOnlySpan_1[int]) -> Result: ...


class ISaveDataChunkIterator(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def GetId(self) -> int: ...
    @abc.abstractmethod
    def IsEnd(self) -> bool: ...
    @abc.abstractmethod
    def Next(self) -> None: ...


class ISaveDataDivisionExporter(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def CancelExport(self) -> Result: ...
    @abc.abstractmethod
    def FinalizeExport(self) -> Result: ...
    @abc.abstractmethod
    def GetImportInitialDataAad(self, outInitialDataAad: clr.Reference[InitialDataAad]) -> Result: ...
    @abc.abstractmethod
    def GetInitialDataMac(self, outInitialDataMac: clr.Reference[InitialDataMac]) -> Result: ...
    @abc.abstractmethod
    def GetInitialDataMacKeyGeneration(self, outKeyGeneration: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def GetKeySeed(self, outKeySeed: clr.Reference[KeySeed]) -> Result: ...
    @abc.abstractmethod
    def GetReportInfo(self, outReportInfo: clr.Reference[ExportReportInfo]) -> Result: ...
    @abc.abstractmethod
    def GetSaveDataCommitId(self, outCommitId: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def GetSaveDataTimeStamp(self, outTimeStamp: clr.Reference[PosixTime]) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataChunkExporter(self, outExporter: clr.Reference[UniqueRef_1[ISaveDataChunkExporter]], chunkId: int) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataDiffChunkIterator(self, outIterator: clr.Reference[UniqueRef_1[ISaveDataChunkIterator]]) -> Result: ...
    @abc.abstractmethod
    def SetDivisionCount(self, divisionCount: int) -> Result: ...
    @abc.abstractmethod
    def SetExportInitialDataAad(self, initialDataAad: clr.Reference[InitialDataAad]) -> Result: ...
    @abc.abstractmethod
    def SuspendExport(self, outContext: clr.Reference[ISaveDataDivisionExporter.ExportContext]) -> Result: ...

    class ExportContext:
        Value : Array16384_1[int]



class ISaveDataDivisionImporter(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def CancelImport(self) -> Result: ...
    @abc.abstractmethod
    def FinalizeImport(self) -> Result: ...
    @abc.abstractmethod
    def FinalizeImportWithoutSwap(self) -> Result: ...
    @abc.abstractmethod
    def GetImportContext(self, outContext: clr.Reference[ISaveDataDivisionImporter.ImportContext]) -> Result: ...
    @abc.abstractmethod
    def GetImportInitialDataAad(self, outInitialDataAad: clr.Reference[InitialDataAad]) -> Result: ...
    @abc.abstractmethod
    def GetReportInfo(self, outReportInfo: clr.Reference[ImportReportInfo]) -> Result: ...
    @abc.abstractmethod
    def GetSaveDataCommitId(self, outCommitId: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def GetSaveDataTimeStamp(self, outTimeStamp: clr.Reference[PosixTime]) -> Result: ...
    @abc.abstractmethod
    def InitializeImport(self, remaining: clr.Reference[int], sizeToProcess: int) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataChunkImporter(self, outImporter: clr.Reference[UniqueRef_1[ISaveDataChunkImporter]], chunkId: int) -> Result: ...
    @abc.abstractmethod
    def OpenSaveDataDiffChunkIterator(self, outIterator: clr.Reference[UniqueRef_1[ISaveDataChunkIterator]]) -> Result: ...
    @abc.abstractmethod
    def SuspendImport(self) -> Result: ...

    class ImportContext:
        Value : Array16384_1[int]



class IStorage(IDisposable, abc.ABC):
    def Dispose(self) -> None: ...
    @abc.abstractmethod
    def Flush(self) -> Result: ...
    @abc.abstractmethod
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    @abc.abstractmethod
    def Read(self, offset: int, destination: Span_1[int]) -> Result: ...
    @abc.abstractmethod
    def SetSize(self, size: int) -> Result: ...
    @abc.abstractmethod
    def Write(self, offset: int, source: ReadOnlySpan_1[int]) -> Result: ...
    # Skipped CheckAccessRange due to it being static, abstract and generic.

    CheckAccessRange : CheckAccessRange_MethodGroup
    class CheckAccessRange_MethodGroup:
        def __call__(self, offset: int, size: int, totalSize: int) -> Result:...
        # Method CheckAccessRange(offset : Int64, size : UInt64, totalSize : Int64) was skipped since it collides with above method

    # Skipped CheckOffsetAndSize due to it being static, abstract and generic.

    CheckOffsetAndSize : CheckOffsetAndSize_MethodGroup
    class CheckOffsetAndSize_MethodGroup:
        def __call__(self, offset: int, size: int) -> Result:...
        # Method CheckOffsetAndSize(offset : Int64, size : UInt64) was skipped since it collides with above method

    # Skipped CheckOffsetAndSizeWithResult due to it being static, abstract and generic.

    CheckOffsetAndSizeWithResult : CheckOffsetAndSizeWithResult_MethodGroup
    class CheckOffsetAndSizeWithResult_MethodGroup:
        def __call__(self, offset: int, size: int, resultOnFailure: Result) -> Result:...
        # Method CheckOffsetAndSizeWithResult(offset : Int64, size : UInt64, resultOnFailure : Result) was skipped since it collides with above method

    # Skipped OperateRange due to it being static, abstract and generic.

    OperateRange : OperateRange_MethodGroup
    class OperateRange_MethodGroup:
        @typing.overload
        def __call__(self, operationId: OperationId, offset: int, size: int) -> Result:...
        @typing.overload
        def __call__(self, outBuffer: Span_1[int], operationId: OperationId, offset: int, size: int, inBuffer: ReadOnlySpan_1[int]) -> Result:...



class LazyLoadArguments:
    GuideIndex : int
    Reserved : Array60_1[int]


class MemoryReportInfo:
    BufferManagerFreeSizePeak : int
    BufferManagerRetriedCount : int
    BufferManagerTotalAllocatableSizePeak : int
    BufferPoolAllocateSizeMax : int
    BufferPoolFreeSizePeak : int
    ExpHeapFreeSizePeak : int
    PatrolReadAllocateBufferFailureCount : int
    PatrolReadAllocateBufferSuccessCount : int
    PooledBufferFailedIdealAllocationCountOnAsyncAccess : int
    PooledBufferFreeSizePeak : int
    PooledBufferReduceAllocationCount : int
    PooledBufferRetriedCount : int
    Reserved : Array32_1[int]


class MemoryStorage(IStorage):
    def __init__(self, buffer: Array_1[int]) -> None: ...
    def Flush(self) -> Result: ...
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    def OperateRange(self, outBuffer: Span_1[int], operationId: OperationId, offset: int, size: int, inBuffer: ReadOnlySpan_1[int]) -> Result: ...
    def Read(self, offset: int, destination: Span_1[int]) -> Result: ...
    def SetSize(self, size: int) -> Result: ...
    def Write(self, offset: int, source: ReadOnlySpan_1[int]) -> Result: ...


class MmcPartition(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    UserData : MmcPartition # 0
    BootPartition1 : MmcPartition # 1
    BootPartition2 : MmcPartition # 2


class MmcSpeedMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Identification : MmcSpeedMode # 0
    LegacySpeed : MmcSpeedMode # 1
    HighSpeed : MmcSpeedMode # 2
    Hs200 : MmcSpeedMode # 3
    Hs400 : MmcSpeedMode # 4
    Unknown : MmcSpeedMode # 5


class MountHostOption:
    @typing.overload
    def __init__(self, flags: int) -> None: ...
    @typing.overload
    def __init__(self, flags: MountHostOptionFlag) -> None: ...
    Flags : MountHostOptionFlag
    # Skipped property None since it is a reserved python word. Use reflection to access.
    @classmethod
    @property
    def PseudoCaseSensitive(cls) -> MountHostOption: ...


class MountHostOptionFlag(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : MountHostOptionFlag # 0
    PseudoCaseSensitive : MountHostOptionFlag # 1


class NxFileAttributes(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : NxFileAttributes # 0
    Directory : NxFileAttributes # 1
    Archive : NxFileAttributes # 2


class OpenMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Read : OpenMode # 1
    Write : OpenMode # 2
    ReadWrite : OpenMode # 3
    AllowAppend : OpenMode # 4
    All : OpenMode # 7


class OperationId(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FillZero : OperationId # 0
    DestroySignature : OperationId # 1
    InvalidateCache : OperationId # 2
    QueryRange : OperationId # 3
    QueryUnpreparedRange : OperationId # 4
    QueryLazyLoadCompletionRate : OperationId # 5
    SetLazyLoadPriority : OperationId # 6
    ReadyLazyLoadFile : OperationId # 10001


class Path:
    def __init__(self) -> None: ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetLength(self) -> int: ...
    def GetString(self) -> ReadOnlySpan_1[int]: ...
    def InitializeAsEmpty(self) -> Result: ...
    def InitializeWithReplaceBackslash(self, path: ReadOnlySpan_1[int]) -> Result: ...
    def InitializeWithReplaceForwardSlashes(self, path: ReadOnlySpan_1[int]) -> Result: ...
    def InitializeWithReplaceUnc(self, path: ReadOnlySpan_1[int]) -> Result: ...
    def IsEmpty(self) -> bool: ...
    def IsMatchHead(self, value: ReadOnlySpan_1[int], length: int) -> bool: ...
    def Normalize(self, flags: PathFlags) -> Result: ...
    @typing.overload
    def __eq__(self, left: clr.Reference[Path], right: ReadOnlySpan_1[int]) -> bool: ...
    @typing.overload
    def __eq__(self, left: clr.Reference[Path], right: clr.Reference[Path]) -> bool: ...
    @typing.overload
    def __ne__(self, left: clr.Reference[Path], right: ReadOnlySpan_1[int]) -> bool: ...
    @typing.overload
    def __ne__(self, left: clr.Reference[Path], right: clr.Reference[Path]) -> bool: ...
    def ReleaseBuffer(self) -> Array_1[int]: ...
    def RemoveChild(self) -> Result: ...
    def SetShallowBuffer(self, buffer: ReadOnlySpan_1[int]) -> Result: ...
    def ToString(self) -> str: ...
    # Skipped AppendChild due to it being static, abstract and generic.

    AppendChild : AppendChild_MethodGroup
    class AppendChild_MethodGroup:
        @typing.overload
        def __call__(self, child: ReadOnlySpan_1[int]) -> Result:...
        @typing.overload
        def __call__(self, child: clr.Reference[Path]) -> Result:...

    # Skipped Combine due to it being static, abstract and generic.

    Combine : Combine_MethodGroup
    class Combine_MethodGroup:
        @typing.overload
        def __call__(self, path1: ReadOnlySpan_1[int], path2: clr.Reference[Path]) -> Result:...
        @typing.overload
        def __call__(self, path1: clr.Reference[Path], path2: ReadOnlySpan_1[int]) -> Result:...
        @typing.overload
        def __call__(self, path1: clr.Reference[Path], path2: clr.Reference[Path]) -> Result:...

    # Skipped Initialize due to it being static, abstract and generic.

    Initialize : Initialize_MethodGroup
    class Initialize_MethodGroup:
        @typing.overload
        def __call__(self, path: ReadOnlySpan_1[int]) -> Result:...
        @typing.overload
        def __call__(self, other: clr.Reference[Path]) -> Result:...
        @typing.overload
        def __call__(self, other: clr.Reference[Path.Stored]) -> Result:...
        @typing.overload
        def __call__(self, path: ReadOnlySpan_1[int], length: int) -> Result:...

    # Skipped InitializeWithNormalization due to it being static, abstract and generic.

    InitializeWithNormalization : InitializeWithNormalization_MethodGroup
    class InitializeWithNormalization_MethodGroup:
        @typing.overload
        def __call__(self, path: ReadOnlySpan_1[int]) -> Result:...
        @typing.overload
        def __call__(self, path: ReadOnlySpan_1[int], length: int) -> Result:...

    # Skipped InsertParent due to it being static, abstract and generic.

    InsertParent : InsertParent_MethodGroup
    class InsertParent_MethodGroup:
        @typing.overload
        def __call__(self, parent: ReadOnlySpan_1[int]) -> Result:...
        @typing.overload
        def __call__(self, parent: clr.Reference[Path]) -> Result:...


    class Stored(IDisposable):
        def __init__(self) -> None: ...
        def DangerousGetPath(self) -> Path: ...
        def Dispose(self) -> None: ...
        def GetLength(self) -> int: ...
        def GetString(self) -> ReadOnlySpan_1[int]: ...
        def Initialize(self, path: clr.Reference[Path]) -> Result: ...
        def ToString(self) -> str: ...



class PathExtensions(abc.ABC):
    @staticmethod
    def GetNullRef() -> clr.Reference[Path]: ...
    @staticmethod
    def IsNullRef(path: clr.Reference[Path]) -> bool: ...
    @staticmethod
    def Ref(path: clr.Reference[Path]) -> clr.Reference[Path]: ...


class PathFlags:
    def AllowAllCharacters(self) -> None: ...
    def AllowBackslash(self) -> None: ...
    def AllowEmptyPath(self) -> None: ...
    def AllowMountName(self) -> None: ...
    def AllowRelativePath(self) -> None: ...
    def AllowWindowsPath(self) -> None: ...
    def AreAllCharactersAllowed(self) -> bool: ...
    def IsBackslashAllowed(self) -> bool: ...
    def IsEmptyPathAllowed(self) -> bool: ...
    def IsMountNameAllowed(self) -> bool: ...
    def IsRelativePathAllowed(self) -> bool: ...
    def IsWindowsPathAllowed(self) -> bool: ...


class PathFormatter(abc.ABC):
    @staticmethod
    def CheckPathFormat(path: ReadOnlySpan_1[int], flags: PathFlags) -> Result: ...
    @staticmethod
    def IsNormalized(isNormalized: clr.Reference[bool], normalizedLength: clr.Reference[int], path: ReadOnlySpan_1[int], flags: PathFlags) -> Result: ...
    @staticmethod
    def Normalize(outputBuffer: Span_1[int], path: ReadOnlySpan_1[int], flags: PathFlags) -> Result: ...
    @staticmethod
    def ParseMountName(newPath: clr.Reference[ReadOnlySpan_1[int]], mountNameLength: clr.Reference[int], outMountNameBuffer: Span_1[int], path: ReadOnlySpan_1[int]) -> Result: ...
    @staticmethod
    def ParseRelativeDotPath(newPath: clr.Reference[ReadOnlySpan_1[int]], length: clr.Reference[int], relativePathBuffer: Span_1[int], path: ReadOnlySpan_1[int]) -> Result: ...
    @staticmethod
    def ParseWindowsPath(newPath: clr.Reference[ReadOnlySpan_1[int]], windowsPathLength: clr.Reference[int], normalizeBuffer: Span_1[int], path: ReadOnlySpan_1[int], hasMountName: bool) -> Result: ...
    @staticmethod
    def SkipMountName(newPath: clr.Reference[ReadOnlySpan_1[int]], mountNameLength: clr.Reference[int], path: ReadOnlySpan_1[int]) -> Result: ...
    @staticmethod
    def SkipRelativeDotPath(newPath: clr.Reference[ReadOnlySpan_1[int]], length: clr.Reference[int], path: ReadOnlySpan_1[int]) -> Result: ...
    @staticmethod
    def SkipWindowsPath(newPath: clr.Reference[ReadOnlySpan_1[int]], windowsPathLength: clr.Reference[int], isNormalized: clr.Reference[bool], path: ReadOnlySpan_1[int], hasMountName: bool) -> Result: ...


class PathFunctions(abc.ABC):
    @staticmethod
    def SetUpFixedPath(path: clr.Reference[Path], pathBuffer: ReadOnlySpan_1[int]) -> Result: ...


class PathNormalizer(abc.ABC):
    @staticmethod
    def IsParentDirectoryPathReplacementNeeded(path: ReadOnlySpan_1[int]) -> bool: ...
    # Skipped IsNormalized due to it being static, abstract and generic.

    IsNormalized : IsNormalized_MethodGroup
    class IsNormalized_MethodGroup:
        @typing.overload
        def __call__(self, isNormalized: clr.Reference[bool], length: clr.Reference[int], path: ReadOnlySpan_1[int]) -> Result:...
        @typing.overload
        def __call__(self, isNormalized: clr.Reference[bool], length: clr.Reference[int], path: ReadOnlySpan_1[int], allowAllCharacters: bool) -> Result:...

    # Skipped Normalize due to it being static, abstract and generic.

    Normalize : Normalize_MethodGroup
    class Normalize_MethodGroup:
        @typing.overload
        def __call__(self, outputBuffer: Span_1[int], length: clr.Reference[int], path: ReadOnlySpan_1[int], isWindowsPath: bool, isDriveRelativePath: bool) -> Result:...
        @typing.overload
        def __call__(self, outputBuffer: Span_1[int], length: clr.Reference[int], path: ReadOnlySpan_1[int], isWindowsPath: bool, isDriveRelativePath: bool, allowAllCharacters: bool) -> Result:...



class PathTool(abc.ABC):
    pass


class PathUtility(abc.ABC):
    @staticmethod
    def CheckEntryNameBytes(path: ReadOnlySpan_1[int], maxEntryLength: int) -> Result: ...
    @staticmethod
    def CheckInvalidBackslash(containsBackslash: clr.Reference[bool], path: ReadOnlySpan_1[int], allowBackslash: bool) -> Result: ...
    @staticmethod
    def CheckInvalidCharacter(c: int) -> Result: ...
    @staticmethod
    def CheckUtf8(path: ReadOnlySpan_1[int]) -> Result: ...
    @staticmethod
    def ConvertToFspPath(fspPath: clr.Reference[FspPath], path: ReadOnlySpan_1[int]) -> Result: ...
    @staticmethod
    def IsCurrentDirectory(path: ReadOnlySpan_1[int]) -> bool: ...
    @staticmethod
    def IsParentDirectory(path: ReadOnlySpan_1[int]) -> bool: ...
    @staticmethod
    def IsPathAbsolute(path: ReadOnlySpan_1[int]) -> bool: ...
    @staticmethod
    def IsPathRelative(path: ReadOnlySpan_1[int]) -> bool: ...
    @staticmethod
    def IsPathStartWithCurrentDirectory(path: ReadOnlySpan_1[int]) -> bool: ...
    @staticmethod
    def IsSubPath(lhs: ReadOnlySpan_1[int], rhs: ReadOnlySpan_1[int]) -> bool: ...
    @staticmethod
    def Replace(buffer: Span_1[int], currentChar: int, newChar: int) -> None: ...
    # Skipped IsDirectoryPath due to it being static, abstract and generic.

    IsDirectoryPath : IsDirectoryPath_MethodGroup
    class IsDirectoryPath_MethodGroup:
        @typing.overload
        def __call__(self, path: ReadOnlySpan_1[int]) -> bool:...
        @typing.overload
        def __call__(self, path: clr.Reference[FspPath]) -> bool:...



class Priority(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Realtime : Priority # 0
    Normal : Priority # 1
    Low : Priority # 2


class PriorityRaw(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Realtime : PriorityRaw # 0
    Normal : PriorityRaw # 1
    Low : PriorityRaw # 2
    Background : PriorityRaw # 3


class ProgramIndexMapInfo:
    MainProgramId : ApplicationId
    ProgramId : ProgramId
    ProgramIndex : int
    Reserved : Array15_1[int]


class QueryRangeInfo:
    AesCtrKeyType : int
    Reserved : Array56_1[int]
    SpeedEmulationType : int
    def Clear(self) -> None: ...
    def Merge(self, other: clr.Reference[QueryRangeInfo]) -> None: ...

    class AesCtrKeyTypeFlag(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        InternalKeyForSoftwareAes : QueryRangeInfo.AesCtrKeyTypeFlag # 1
        InternalKeyForHardwareAes : QueryRangeInfo.AesCtrKeyTypeFlag # 2
        ExternalKeyForHardwareAes : QueryRangeInfo.AesCtrKeyTypeFlag # 4



class Range(IComparable_1[Range], IEquatable_1[Range]):
    def __init__(self, offset: int, size: int) -> None: ...
    Offset : int
    Size : int
    def CompareTo(self, other: Range) -> int: ...
    def Contains(self, range: Range) -> bool: ...
    def GetHashCode(self) -> int: ...
    def HasIntersection(self, range: Range) -> bool: ...
    def IsAdjacent(self, range: Range) -> bool: ...
    def MakeMerge(self, range: Range) -> Range: ...
    def __eq__(self, lhs: Range, rhs: Range) -> bool: ...
    def __gt__(self, lhs: Range, rhs: Range) -> bool: ...
    def __ne__(self, lhs: Range, rhs: Range) -> bool: ...
    def __lt__(self, lhs: Range, rhs: Range) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: Range) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class ReadOnlyFileSystem(IFileSystem):
    def __init__(self, baseFileSystem: clr.Reference[SharedRef_1[IFileSystem]]) -> None: ...
    def Dispose(self) -> None: ...


class ReadOption:
    def __init__(self, value: int) -> None: ...
    Value : int
    # Skipped property None since it is a reserved python word. Use reflection to access.


class ReadOptionFlag(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ReadOptionFlag # 0


class ResultFs(abc.ABC):
    ModuleFs : int
    @classmethod
    @property
    def AcidVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def AesCtrCounterExtendedStorageCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def AesXtsFileSystemCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def AesXtsFileSystemFileHeaderCorruptedOnFileOpen(cls) -> Result.Base: ...
    @classmethod
    @property
    def AesXtsFileSystemFileHeaderCorruptedOnFileSetSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def AesXtsFileSystemFileHeaderCorruptedOnRename(cls) -> Result.Base: ...
    @classmethod
    @property
    def AesXtsFileSystemFileHeaderSizeCorruptedOnFileOpen(cls) -> Result.Base: ...
    @classmethod
    @property
    def AesXtsFileSystemFileNoHeaderOnFileOpen(cls) -> Result.Base: ...
    @classmethod
    @property
    def AesXtsFileSystemFileSizeCorruptedOnFileOpen(cls) -> Result.Base: ...
    @classmethod
    @property
    def AesXtsFileSystemFileSizeCorruptedOnFileSetSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedAllocateShared(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedFatFileSystemWithBufferA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInAesCtrCounterExtendedStorageA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInAesCtrCounterExtendedStorageB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInAesXtsFileA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInAesXtsFileB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInAesXtsFileC(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInAesXtsFileD(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInAesXtsFileE(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInAesXtsFileF(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInAesXtsFileG(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInAesXtsFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInAesXtsFileSystemB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInApplicationA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInBcatSaveDataA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInBisA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInBisB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInBisC(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInBlockCacheBufferedStorageA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInBlockCacheBufferedStorageB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInBufferedStorageA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInBuiltInStorageCreatorA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInBuiltInStorageCreatorB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInBuiltInStorageCreatorC(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInCodeA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInConcatenationFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInConcatenationFileSystemB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInContentA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInContentStorageA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInContentStorageB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInDataA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInDataB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInDbmHierarchicalRomFileTable(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInDbmRomKeyValueStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInDeviceDetectionEventManagerA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInDeviceSaveDataA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInDirectorySaveDataFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInDuplexStorageA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInEncryptedFileSystemCreatorA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInFatFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInFatFileSystemC(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInFatFileSystemCreatorA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInFatFileSystemCreatorB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInFatFileSystemD(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInFatFileSystemE(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInFatFileSystemF(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInFatFileSystemH(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInFileSystemAccessorA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInFileSystemAccessorB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInFileSystemBuddyHeapA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInFileSystemBufferManagerA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInFileSystemInterfaceAdapterA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInFileSystemProxyCoreImplB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInFileSystemProxyImplA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardC(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardD(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardFileSystemCreatorA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardFileSystemCreatorB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardFileSystemCreatorC(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardFileSystemCreatorD(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardFileSystemCreatorE(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardFileSystemCreatorF(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardFileSystemCreatorG(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardFileSystemCreatorH(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardManagerA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardManagerB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardManagerC(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardManagerD(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardManagerE(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardManagerF(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGameCardManagerG(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInGuidPartitionTableA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInHostA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInHostB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInHostC(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInHtcFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInHtcFileSystemB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInImageDirectoryA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInIntegrityRomFsStorageA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInIntegrityVerificationStorageA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInIntegrityVerificationStorageB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInISaveFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInISaveFileSystemB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInJournalStorageA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInJournalStorageB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInLocalFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInLocalFileSystemB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInLocalFileSystemCreatorA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInLogoA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInNcaFileSystemDriverI(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInNcaFileSystemServiceImplA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInNcaFileSystemServiceImplB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInNcaReaderA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInPartitionFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInPartitionFileSystemB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInPartitionFileSystemC(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInPartitionFileSystemCreatorA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInPartitionFileSystemMetaA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInPartitionFileSystemMetaB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInPathNormalizer(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInProgramRegistryManagerA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInProxyFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInProxyFileSystemB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInReadOnlyFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRegisterA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRegisterB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRomA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRomB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRomC(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRomD(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRomE(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRomF(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRomFileSystemCreatorA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRomFsFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRomFsFileSystemB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRomFsFileSystemC(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRomFsFileSystemD(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRomFsFileSystemE(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRomOnFileA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRomOnFileB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInRomOnFileC(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataExtraDataAccessorCacheManagerA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataFileSystemCoreA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataFileSystemCoreB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataFileSystemCreatorA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataFileSystemCreatorB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataFileSystemCreatorC(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataFileSystemCreatorD(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataFileSystemCreatorE(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataFileSystemServiceImplA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataFileSystemServiceImplB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataIndexerA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataIndexerB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataManagementA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataThumbnailA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataTransferManagerA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSaveDataTransferManagerB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSdCardA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSdCardB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSdCardProxyFileSystemCreatorA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSdmmcStorageServiceA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSdmmcStorageServiceB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInStorageOnNcaCreatorA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInStorageOnNcaCreatorB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSubdirectoryFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSubDirectoryFileSystemCreatorA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInSystemSaveDataA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInTargetManagerFileSystemCreatorA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInTmFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInTmFileSystemB(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedInWriteThroughCacheStorageA(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedMakeUnique(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationMemoryFailedNew(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationPooledBufferNotEnoughSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocationTableFull(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocatorAlignmentViolation(cls) -> Result.Base: ...
    @classmethod
    @property
    def AllocatorAlreadyRegistered(cls) -> Result.Base: ...
    @classmethod
    @property
    def AlreadyExists(cls) -> Result.Base: ...
    @classmethod
    @property
    def BadState(cls) -> Result.Base: ...
    @classmethod
    @property
    def BisProxyInvalidated(cls) -> Result.Base: ...
    @classmethod
    @property
    def BucketTreeCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def BufferAllocationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def BuiltInStorageCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def CacheStorageIndexTooLarge(cls) -> Result.Base: ...
    @classmethod
    @property
    def CacheStorageSizeTooLarge(cls) -> Result.Base: ...
    @classmethod
    @property
    def ClearedRealDataVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def ClearedRomRealDataVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def ClearedSaveDataRealDataVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def ConcatenationFsInvalidInternalFileCount(cls) -> Result.Base: ...
    @classmethod
    @property
    def DatabaseCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def DatabaseKeyNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def DataCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def DbmAlreadyExists(cls) -> Result.Base: ...
    @classmethod
    @property
    def DbmDirectoryEntryFull(cls) -> Result.Base: ...
    @classmethod
    @property
    def DbmDirectoryNameTooLong(cls) -> Result.Base: ...
    @classmethod
    @property
    def DbmDirectoryNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def DbmFileEntryFull(cls) -> Result.Base: ...
    @classmethod
    @property
    def DbmFileNameTooLong(cls) -> Result.Base: ...
    @classmethod
    @property
    def DbmFileNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def DbmFindFinished(cls) -> Result.Base: ...
    @classmethod
    @property
    def DbmFindKeyFinished(cls) -> Result.Base: ...
    @classmethod
    @property
    def DbmInvalidOperation(cls) -> Result.Base: ...
    @classmethod
    @property
    def DbmInvalidPathFormat(cls) -> Result.Base: ...
    @classmethod
    @property
    def DbmIterationFinished(cls) -> Result.Base: ...
    @classmethod
    @property
    def DbmKeyFull(cls) -> Result.Base: ...
    @classmethod
    @property
    def DbmKeyNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def DbmNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def DefaultAllocatorAlreadyUsed(cls) -> Result.Base: ...
    @classmethod
    @property
    def DefaultGlobalFileDataCacheEnabled(cls) -> Result.Base: ...
    @classmethod
    @property
    def DifferentSaveDataExtensionContextParameter(cls) -> Result.Base: ...
    @classmethod
    @property
    def DirectoryNotClosed(cls) -> Result.Base: ...
    @classmethod
    @property
    def DirectoryNotEmpty(cls) -> Result.Base: ...
    @classmethod
    @property
    def DirectoryNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def DirectoryStatusChanged(cls) -> Result.Base: ...
    @classmethod
    @property
    def DirectoryUndeletable(cls) -> Result.Base: ...
    @classmethod
    @property
    def DirectoryUnobtainable(cls) -> Result.Base: ...
    @classmethod
    @property
    def DirectoryUnrenamable(cls) -> Result.Base: ...
    @classmethod
    @property
    def DuplexStorageAccessOutOfRange(cls) -> Result.Base: ...
    @classmethod
    @property
    def ExFatUnavailable(cls) -> Result.Base: ...
    @classmethod
    @property
    def ExtensionSizeInvalid(cls) -> Result.Base: ...
    @classmethod
    @property
    def ExtensionSizeTooLarge(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFileSystemCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsFormatIllegalSectorsA(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsFormatIllegalSectorsB(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsFormatIllegalSectorsC(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsFormatIllegalSectorsD(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsFormatInvalidBpb(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsFormatInvalidParameter(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsFormatUnexpected(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsFormatUnsupportedSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsInternalError(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsLockError(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsModuleSafeError(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsNotAFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsStorageStateMissmatch(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsTooManyFilesOpenedS(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsTooManyFilesOpenedU(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsUnclassified(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsUnexpected(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsUnexpectedSystemError(cls) -> Result.Base: ...
    @classmethod
    @property
    def FatFsWriteVerifyError(cls) -> Result.Base: ...
    @classmethod
    @property
    def FileDataCacheMemorySizeTooSmall(cls) -> Result.Base: ...
    @classmethod
    @property
    def FileExtensionWithoutOpenModeAllowAppend(cls) -> Result.Base: ...
    @classmethod
    @property
    def FileNotClosed(cls) -> Result.Base: ...
    @classmethod
    @property
    def FileNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardAccessFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardActivateAsicFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardAlreadyInitializedAsic(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardAlreadyTransitionedState(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardAsicBootFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardAsicChallengeCardExistenceFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardAsicStatusError(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardAuthenticateMutuallyFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCardAccessFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCardAccessTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCardCommandFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCardFatal(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCardHeaderReadFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCardIdMismatch(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCardNeedRetry(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCardNeedRetryAfterAsicReinitialize(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCardNotActivated(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCardNotInserted(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCardReinitializeFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCardRetryFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardChallengeAndResponseFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardChangeGcModeToDebugFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardChangeGcModeToSecureFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardChangeModeToSecureFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCommandEraseFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCommandReadCrcFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCommandReadDevParamFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCommandReadId1Failure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCommandReadId2Failure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCommandReadId3Failure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCommandReadPageFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCommandReadPageUnalignedFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCommandRefreshFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCommandUpdateKeyFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCommandWriteDevParamFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCommandWritePageFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardCommunicationFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardDataIoActivateFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardDataIoFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardDebugCardId1Mismatch(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardDebugCardId2Mismatch(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardDebugCardReceivedIdMismatch(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardDebugEraseFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardDebugParameterMismatch(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardDebugWriteCrcMismatch(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardDecryptRandomValueFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardDevCardUnexpectedFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardEnableCardBusFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardExchangeRandomValuesFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardFailedIoMappingForGpio(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardFinishOperationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardFsCheckHandleInChallengeCardExistence(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardFsCheckHandleInCreateReadOnlyFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardFsCheckHandleInCreateSecureReadOnlyFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardFsCheckHandleInGetCardImageHashFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardFsCheckHandleInGetDeviceCertFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardFsCheckHandleInGetStatusFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardFsCheckHandleInOnAcquireLock(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardFsCheckHandleInReadFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardFsCheckHandleInWriteFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardFsCheckModeInOnAcquireSecureLock(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardFsFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardFsGetHandleFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardFsInvalidCompatibilityType(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardGeneralIoFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardGeneralIoHoldAsicResetFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardGeneralIoReleaseAsicResetFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardGenerateCommonKeyFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardGetCardHeaderFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardInitialDataMismatch(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardInitializeAsicFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardInitializeAsicTimeOut(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardInitialNotFilledWithZero(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardInvalidAccessAcrossMode(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardInvalidCa10CardHeader(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardInvalidCa10Certificate(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardInvalidCardHeader(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardInvalidCertificate(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardInvalidChallengeCardExistenceMode(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardInvalidGetCardDeviceCertificate(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardInvalidNormalAccess(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardInvalidSecureAccess(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardInvalidT1CardCertificate(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardKekIndexMismatch(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardKeySourceNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardLockerOutOfRange(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardLogoDataCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardLogoDataSizeInvalid(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardLogoDataTooLarge(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardNeedRefresh(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardNeedRefreshAndCardNeedRetry(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardNotAwakened(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardNotImplemented(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardNotSupportedOnDeviceModel(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardParseCertificateFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardPreconditionViolation(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardQueueFullFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardReadRegisterFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardReadRmaInfoFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardReceiveCertificateFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardReceiveChallengeResponseFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardReceiveDeviceChallengeFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardReceiveRandomValueFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardRespondDeviceChallengeFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardRetryLimitOut(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardSendCardReadErrorCountFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardSendCardReadRefreshStatusFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardSendCardReadUidFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardSendCardSelfRefreshFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardSendFirmwareFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardSendHostChallengeFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardSendRandomValueFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardSendSocCertificateFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardSetVoltageFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardShouldTransitFromAsicInitialToSecure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardShouldTransitFromInitialToNormal(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardShouldTransitFromNormalModeToDebug(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardShouldTransitFromNormalModeToSecure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardSplDecryptAesKeyFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardSplDecryptAndStoreGcKeyFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardSplDecryptGcMessageFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardSplFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardSplGenerateRandomBytesFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardStateAsicInitialRequired(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardStateAsicSecureRequired(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardStateCardDebugModeRequired(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardStateCardNormalModeRequired(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardStateCardSecureModeRequired(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardStateFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardStateTransitionFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardUnexpectedDeadCode(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardUnknown(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardUnregisteredCardSecureMethod(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardUpdateKeyFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardVerifyCertificateFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardWriteRegisterFailure(cls) -> Result.Base: ...
    @classmethod
    @property
    def GameCardWrongCard(cls) -> Result.Base: ...
    @classmethod
    @property
    def GlobalFileDataCacheAlreadyEnabled(cls) -> Result.Base: ...
    @classmethod
    @property
    def GptHeaderInvalidPartitionSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def GptHeaderSignatureVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def HandledByAllProcess(cls) -> Result.Base: ...
    @classmethod
    @property
    def HandledBySystemProcess(cls) -> Result.Base: ...
    @classmethod
    @property
    def HasNotGottenPatrolCount(cls) -> Result.Base: ...
    @classmethod
    @property
    def HierarchicalSha256BaseStorageTooLarge(cls) -> Result.Base: ...
    @classmethod
    @property
    def HierarchicalSha256HashVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def HostEntryCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def HostFileCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def HostFileDataCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def HostFileSystemCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def HostFileSystemOperationDisabled(cls) -> Result.Base: ...
    @classmethod
    @property
    def IncompatiblePath(cls) -> Result.Base: ...
    @classmethod
    @property
    def IncompleteBlockInZeroBitmapHashStorageFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def IncompleteBlockInZeroBitmapHashStorageFileSaveData(cls) -> Result.Base: ...
    @classmethod
    @property
    def IncorrectDuplexMagicCode(cls) -> Result.Base: ...
    @classmethod
    @property
    def IncorrectIntegritySaveDataMagicCode(cls) -> Result.Base: ...
    @classmethod
    @property
    def IncorrectIntegrityVerificationMagicCode(cls) -> Result.Base: ...
    @classmethod
    @property
    def IncorrectJournalIntegritySaveDataMagicCode(cls) -> Result.Base: ...
    @classmethod
    @property
    def IncorrectRamDiskSaveDataFileSystemMagicCode(cls) -> Result.Base: ...
    @classmethod
    @property
    def IncorrectRomIntegrityVerificationMagicCode(cls) -> Result.Base: ...
    @classmethod
    @property
    def IncorrectSaveDataExtensionContextMagicCode(cls) -> Result.Base: ...
    @classmethod
    @property
    def IncorrectSaveDataFileSystemMagicCode(cls) -> Result.Base: ...
    @classmethod
    @property
    def IncorrectSaveDataIntegrityVerificationMagicCode(cls) -> Result.Base: ...
    @classmethod
    @property
    def IndirectStorageCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def IndividualFileDataCacheAlreadyEnabled(cls) -> Result.Base: ...
    @classmethod
    @property
    def IntegritySaveDataControlAreaVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def IntegritySaveDataCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def IntegritySaveDataMasterSignatureVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def IntegrityVerificationStorageCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def Internal(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidAcid(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidAcidFileSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidAcidSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidAesCtrCounterExtendedDataStorageSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidAesCtrCounterExtendedEntryOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidAesCtrCounterExtendedGeneration(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidAesCtrCounterExtendedMetaStorageSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidAesCtrCounterExtendedOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidAesCtrCounterExtendedTableSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidAlignment(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidAllocationTableBlock(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidAllocationTableBlockCount(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidAllocationTableChainEntry(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidAllocationTableOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidArgument(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidBitmapIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidBucketTreeEntryCount(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidBucketTreeEntryOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidBucketTreeEntrySetOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidBucketTreeNodeEntryCount(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidBucketTreeNodeIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidBucketTreeNodeOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidBucketTreeSignature(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidBucketTreeVirtualOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidCharacter(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidCommitNameCount(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidCommitOption(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidEnumValue(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidFatFileNumber(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidFatFormat(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidFatFormatBisCalibration(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidFatFormatBisSafe(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidFatFormatBisSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidFatFormatBisUser(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidFatFormatSd(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidFileSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidHandle(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidHierarchicalIntegrityVerificationLayerCount(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidHierarchicalSha256BlockSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidHierarchicalSha256LayerCount(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidHostHandle(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidIndirectEntryOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidIndirectEntryStorageIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidIndirectPhysicalOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidIndirectStorageBucketTreeSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidIndirectStorageIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidIndirectStorageSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidIndirectVirtualOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidIntegritySaveDataControlAreaSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidIntegritySaveDataHashSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidJournalIntegritySaveDataCommitState(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidJournalIntegritySaveDataControlAreaSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidJournalIntegritySaveDataHashSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidJournalStorageDataStorageSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidKeyValueListElementIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidKeyValueListEntryIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidLogBlockSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidLogOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidMapAlignment(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidMapEntryCount(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidMapOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidMappingTableEntryCount(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidMappingTablePhysicalIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidMappingTableVirtualIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidMapSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidMapStorageSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidMapStorageType(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidModeForDirectoryOpen(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidModeForFileOpen(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidMountName(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidMultiCommitContextState(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidMultiCommitContextVersion(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidNcaFileSystemType(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidNcaFsHeader(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidNcaFsHeaderEncryptionType(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidNcaFsHeaderHashType(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidNcaHeader(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidNcaHeader1SignatureKeyGeneration(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidNcaId(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidNcaKeyIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidNcaPatchInfoAesCtrExOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidNcaPatchInfoAesCtrExSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidNcaPatchInfoIndirectOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidNcaPatchInfoIndirectSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidNcaSignature(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidNspdVerificationData(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidOperationForOpenMode(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidPartitionEntryOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidPath(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidPathFormat(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidPathForOperation(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRamDiskAllocationTableBlock(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRamDiskAllocationTableBlockCount(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRamDiskAllocationTableChainEntry(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRamDiskAllocationTableOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRamDiskKeyValueListElementIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRamDiskKeyValueListEntryIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRamDiskSaveDataCoreDataStorageSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRamDiskSaveDataFileReadOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomAcid(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomAcidFileSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomAcidSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomAllocationTableBlock(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomHierarchicalIntegrityVerificationLayerCount(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomHierarchicalSha256BlockSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomHierarchicalSha256LayerCount(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomHostHandle(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomKeyValueListElementIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomNcaFileSystemType(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomNcaFsHeader(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomNcaFsHeaderEncryptionType(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomNcaFsHeaderHashType(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomNcaHeader(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomNcaId(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomNcaKeyIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomNcaPatchInfoAesCtrExOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomNcaPatchInfoAesCtrExSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomNcaPatchInfoIndirectOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomNcaPatchInfoIndirectSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomNcaSignature(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomPartitionEntryOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomSha256PartitionHashTarget(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomSha256PartitionMetaDataSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomStorageSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidRomZeroSignature(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataAllocationTableBlock(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataAllocationTableBlockCount(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataAllocationTableChainEntry(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataAllocationTableOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataBitmapIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataCoreDataStorageSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataEntryType(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataExtensionContextParameter(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataExtensionContextState(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataFileReadOffset(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataHostHandle(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataInternalStorageAllocationTableFreeBitmapSizeA(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataInternalStorageAllocationTableFreeBitmapSizeB(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataInternalStorageIntegritySeedSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataKeyValueListElementIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataKeyValueListEntryIndex(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataSpaceId(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataState(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSaveDataZeroHash(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSha256PartitionHashTarget(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSha256PartitionMetaDataSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def InvalidZeroHash(cls) -> Result.Base: ...
    @classmethod
    @property
    def JournalIntegritySaveDataControlAreaVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def JournalIntegritySaveDataMasterSignatureVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def JournalStorageAccessOutOfRange(cls) -> Result.Base: ...
    @classmethod
    @property
    def JournalStorageCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def LogNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def MapAddressAlreadyRegistered(cls) -> Result.Base: ...
    @classmethod
    @property
    def MapFull(cls) -> Result.Base: ...
    @classmethod
    @property
    def MappingFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def MappingTableCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def MappingTableFull(cls) -> Result.Base: ...
    @classmethod
    @property
    def MapStorageNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def MissingNspdVerificationData(cls) -> Result.Base: ...
    @classmethod
    @property
    def MmcAccessFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def MountNameAlreadyExists(cls) -> Result.Base: ...
    @classmethod
    @property
    def MultiCommitAlreadyInProgress(cls) -> Result.Base: ...
    @classmethod
    @property
    def MultiCommitContextCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def MultiCommitFileSystemLimit(cls) -> Result.Base: ...
    @classmethod
    @property
    def MultiCommitHasOverlappingTargets(cls) -> Result.Base: ...
    @classmethod
    @property
    def NcaBaseStorageOutOfRangeA(cls) -> Result.Base: ...
    @classmethod
    @property
    def NcaBaseStorageOutOfRangeB(cls) -> Result.Base: ...
    @classmethod
    @property
    def NcaBaseStorageOutOfRangeC(cls) -> Result.Base: ...
    @classmethod
    @property
    def NcaCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def NcaDigestInconsistent(cls) -> Result.Base: ...
    @classmethod
    @property
    def NcaExternalKeyInconsistent(cls) -> Result.Base: ...
    @classmethod
    @property
    def NcaExternalKeyUnregistered(cls) -> Result.Base: ...
    @classmethod
    @property
    def NcaFileSystemCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def NcaFsHeaderHashVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def NcaHeaderSignature1VerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def NcaHeaderSignature2VerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def NcaHierarchicalSha256StorageCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def NcaIndirectStorageOutOfRange(cls) -> Result.Base: ...
    @classmethod
    @property
    def NcaInvalidCompressionInfo(cls) -> Result.Base: ...
    @classmethod
    @property
    def NeedFlush(cls) -> Result.Base: ...
    @classmethod
    @property
    def NonRealDataVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def NotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def NotImplemented(cls) -> Result.Base: ...
    @classmethod
    @property
    def NotInitialized(cls) -> Result.Base: ...
    @classmethod
    @property
    def NotMounted(cls) -> Result.Base: ...
    @classmethod
    @property
    def NotNormalized(cls) -> Result.Base: ...
    @classmethod
    @property
    def NullptrArgument(cls) -> Result.Base: ...
    @classmethod
    @property
    def OpenCountLimit(cls) -> Result.Base: ...
    @classmethod
    @property
    def OutOfRange(cls) -> Result.Base: ...
    @classmethod
    @property
    def OutOfResource(cls) -> Result.Base: ...
    @classmethod
    @property
    def PartitionFileSystemCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def PartitionNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def PartitionSignatureVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def PathAlreadyExists(cls) -> Result.Base: ...
    @classmethod
    @property
    def PathNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def PermissionDenied(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortAcceptableCountLimited(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcAbortCommandIssued(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcAbortTransactionSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcAutoCommandResponseCrcError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcAutoCommandResponseEndBitError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcAutoCommandResponseIndexError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcAutoCommandResponseTimeoutError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcBusySwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcCommandCompleteSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcCommandInhibitCmdSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcCommandInhibitDatSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcCommunicationError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcCommunicationNotAttained(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDataCrcError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDataEndBitError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDataTimeoutError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceRemoved(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusAddressMisalign(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusAddressOutOfRange(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusBlockLenError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusCcError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusCidCsdOverwrite(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusComCrcError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusDeviceEccFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusEraseParam(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusEraseReset(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusEraseSeqError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusHasError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusIllegalCommand(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusLockUnlockFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusSwitchError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusWpEraseSkip(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcDeviceStatusWpViolation(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcHostControllerUnexpected(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcInternalClockStableSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcInternalError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcIssueTuningCommandSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcMmcEraseSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcMmcInitializationSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcMmcNotSupportExtendedCsd(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcNoDevice(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcNotActivated(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcNotAwakened(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcNotImplemented(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcNotSupported(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcNoWaitedInterrupt(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcResponseCrcError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcResponseEndBitError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcResponseIndexError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcResponseTimeoutError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdCardCannotSwitchedAccessMode(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdCardFailedSwitchedAccessMode(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdCardGetValidRcaSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdCardInitializationSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdCardNot4BitBusWidthAtUhsIMode(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdCardNotCompleteVoltageSwitch(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdCardNotReadyToVoltageSwitch(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdCardNotSupportAccessMode(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdCardNotSupportSdr104AndSdr50(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdCardNotSupportSwitchFunctionStatus(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdCardUnacceptableCurrentConsumption(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdCardValidationError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdHostStandardFailSwitchTo18V(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdHostStandardUnknownAutoCmdError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdHostStandardUnknownError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdmmcDllApplicationSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcSdmmcDllCalibrationSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcStorageDeviceInvalidated(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcTransferCompleteSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcTuningFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcUnexpected(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcUnexpectedDeviceCsdValue(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcUnexpectedDeviceState(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcUnexpectedMmcExtendedCsdValue(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcUnexpectedSdCardAcmdDisabled(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcUnexpectedSdCardSwitchFunctionStatus(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortMmcWaitInterruptSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardAbortCommandIssued(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardAbortTransactionSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardAutoCommandResponseCrcError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardAutoCommandResponseEndBitError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardAutoCommandResponseIndexError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardAutoCommandResponseTimeoutError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardBusySwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardCommandCompleteSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardCommandInhibitCmdSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardCommandInhibitDatSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardCommunicationError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardCommunicationNotAttained(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDataCrcError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDataEndBitError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDataTimeoutError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceRemoved(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusAddressMisalign(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusAddressOutOfRange(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusBlockLenError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusCcError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusCidCsdOverwrite(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusComCrcError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusDeviceEccFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusEraseParam(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusEraseReset(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusEraseSeqError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusHasError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusIllegalCommand(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusLockUnlockFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusSwitchError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusWpEraseSkip(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardDeviceStatusWpViolation(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardFileSystemInvalidatedByRemoved(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardHostControllerUnexpected(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardInternalClockStableSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardInternalError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardIssueTuningCommandSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardMmcEraseSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardMmcInitializationSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardMmcNotSupportExtendedCsd(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardNoDevice(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardNotActivated(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardNotAwakened(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardNotImplemented(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardNotSupported(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardNoWaitedInterrupt(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardResponseCrcError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardResponseEndBitError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardResponseIndexError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardResponseTimeoutError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdCardCannotSwitchedAccessMode(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdCardFailedSwitchedAccessMode(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdCardGetValidRcaSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdCardInitializationSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdCardNot4BitBusWidthAtUhsIMode(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdCardNotCompleteVoltageSwitch(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdCardNotReadyToVoltageSwitch(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdCardNotSupportAccessMode(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdCardNotSupportSdr104AndSdr50(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdCardNotSupportSwitchFunctionStatus(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdCardUnacceptableCurrentConsumption(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdCardValidationError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdHostStandardFailSwitchTo18V(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdHostStandardUnknownAutoCmdError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdHostStandardUnknownError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdmmcDllApplicationSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardSdmmcDllCalibrationSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardStorageDeviceInvalidated(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardTransferCompleteSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardTuningFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardUnexpected(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardUnexpectedDeviceCsdValue(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardUnexpectedDeviceState(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardUnexpectedMmcExtendedCsdValue(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardUnexpectedSdCardAcmdDisabled(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardUnexpectedSdCardSwitchFunctionStatus(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardWaitInterruptSwTimeout(cls) -> Result.Base: ...
    @classmethod
    @property
    def PortSdCardWriteVerifyError(cls) -> Result.Base: ...
    @classmethod
    @property
    def PreconditionViolation(cls) -> Result.Base: ...
    @classmethod
    @property
    def ProgramIndexNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def ProgramInfoNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def RamDiskCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RamDiskDatabaseCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RamDiskSaveDataCoreFileSystemCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RamDiskVerifiedStorageVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def ReadUnpermitted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RealDataVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def ReconstructibleSaveDataCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RenameToOtherFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomAcidVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomBuiltInStorageCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomDatabaseCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomGptHeaderSignatureVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomHierarchicalSha256BaseStorageTooLarge(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomHierarchicalSha256HashVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomHostEntryCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomHostFileCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomHostFileDataCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomHostFileSystemCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomIntegrityVerificationStorageCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomNcaCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomNcaFileSystemCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomNcaFsHeaderHashVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomNcaHeaderSignature1VerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomNcaHeaderSignature2VerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomNcaHierarchicalSha256StorageCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomNcaIndirectStorageOutOfRange(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomNcaInvalidCompressionInfo(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomNonRealDataVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomPartitionFileSystemCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomPartitionSignatureVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomRealDataVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomSha256PartitionHashVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomSha256PartitionSignatureVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def RomStorageCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataBuiltInStorageCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataChunkDecryptorGcmStreamVersionVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataCoreFileSystemCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataDatabaseCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataDivisionExporterChunkExportIncomplete(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataDivisionImporterChunkImportIncomplete(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataDuplexStorageCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataExtending(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataExtensionContextCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataFileSystemCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataGptHeaderSignatureVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataHostEntryCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataHostFileCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataHostFileDataCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataHostFileSystemCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataIntegrityVerificationStorageCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataLogCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataMapCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataNonRealDataVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataPorterInitialDataVersionVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataPorterInvalidated(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataPorterSaveDataModified(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataPorterVersionUnsupported(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataRealDataVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataRootPathUnavailable(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataToExpandIsProvisionallyCommitted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferDataCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferForRepairInitialDataMacVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferForSaveDataRepairInconsistentInitialData(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferForSaveDataRepairIncorrectInitialData(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferForSaveDataRepairInitialDataIncorrectUserId(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferForSaveDataRepairInitialDataMacVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferForSaveDataRepairKeyPackageChallengeVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferForSaveDataRepairKeyPackageMacVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferForSaveDataRepairKeyPackageSignatureVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferForSaveDataRepairUnsupportedKeyGeneration(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferImportMacVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferInitialDataMacVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferInitialDataVersionVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferTokenChallengeVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferTokenMacVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferTokenSignatureVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferV2ImportDataDecompressionFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferV2ImportDataVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferV2InitialDataGcmMacVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferV2InitialDataMacVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferV2KeySeedPackageChallengeVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferV2KeySeedPackageMacVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferV2KeySeedPackageSignatureVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferV2PortContextMacVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SaveDataTransferV2SecondarySaveCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SdCardAccessFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def Sha256PartitionHashVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def Sha256PartitionSignatureVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SignedSystemPartitionDataCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def SignedSystemPartitionHashVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SignedSystemPartitionInvalidAppendHashCount(cls) -> Result.Base: ...
    @classmethod
    @property
    def SignedSystemPartitionInvalidSize(cls) -> Result.Base: ...
    @classmethod
    @property
    def SignedSystemPartitionPackage2HashVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SignedSystemPartitionSignatureVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def SimulatedDeviceDataCorrupted(cls) -> Result.Base: ...
    @classmethod
    @property
    def StorageDeviceInvalidOperation(cls) -> Result.Base: ...
    @classmethod
    @property
    def StorageDeviceNotReady(cls) -> Result.Base: ...
    @classmethod
    @property
    def SystemPartitionNotReady(cls) -> Result.Base: ...
    @classmethod
    @property
    def TargetLocked(cls) -> Result.Base: ...
    @classmethod
    @property
    def TargetNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def ThumbnailHashVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def TooLongPath(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnclearedRealDataVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnclearedRomRealDataVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnclearedSaveDataRealDataVerificationFailed(cls) -> Result.Base: ...
    @classmethod
    @property
    def Unexpected(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedEndOfLog(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInAesCtrStorageA(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInAesXtsStorageA(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInBisWiperA(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInBisWiperB(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInCompressedStorageA(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInCompressedStorageB(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInCompressedStorageC(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInCompressedStorageD(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInJournalIntegritySaveDataFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInJournalIntegritySaveDataFileSystemB(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInJournalIntegritySaveDataFileSystemC(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInLocalFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInLocalFileSystemB(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInLocalFileSystemC(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInLocalFileSystemD(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInLocalFileSystemE(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInLocalFileSystemF(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInMountTableA(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInMountUtilityA(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInNcaFileSystemServiceImplA(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInPathA(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInPathOnExecutionDirectoryA(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInPathOnExecutionDirectoryB(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInPathOnExecutionDirectoryC(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInPathToolA(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInRamDiskFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInSaveDataInternalStorageFileSystemA(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnexpectedInSaveDataInternalStorageFileSystemB(cls) -> Result.Base: ...
    @classmethod
    @property
    def Unknown(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedCommitProvisionallyForApplicationTemporaryFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedCommitProvisionallyForDirectorySaveDataFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedCommitProvisionallyForPartitionFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedCommitProvisionallyForReadOnlyFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedCommitProvisionallyForRomFsFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedCommitProvisionallyForSaveDataFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedCommitTarget(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedGetSizeForJournalStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedGetSizeForRemapStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedGetTotalSpaceSizeForReadOnlyFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedGetTotalSpaceSizeForRomFsFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForAesCtrCounterExtendedStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForAesXtsFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForBlockCacheBufferedStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForCompressedStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForConcatenationFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForDuplexStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForFatFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForFileHandleStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForFileServiceObjectAdapter(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForFileStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForHierarchicalIntegrityVerificationStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForIndirectStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForIntegritySaveDataStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForIntegrityVerificationStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForInternalStorageConcatenationFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForJournalIntegritySaveDataStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForJournalStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForMemoryStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForPartitionFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForReadOnlyFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForReadOnlyGameCardStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForRegionSwitchStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForRemapStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForRomFsFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForSdmmcStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForStorageFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForStorageServiceObjectAdapter(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForSwitchStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForTmFileSystemFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForWritableBlockCacheBufferedStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperateRangeForWritableIntegrityVerificationStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedOperation(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedQueryEntryForConcatenationFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedReadForWriteOnlyGameCardStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedRollbackOnlyModifiedForApplicationTemporaryFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedRollbackOnlyModifiedForDirectorySaveDataFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedRomVersion(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSaveDataVersion(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSdkVersion(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForAesCtrCounterExtendedStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForAesCtrStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForAesCtrStorageExternal(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForAllocationTableStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForBlockCacheBufferedStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForDuplexStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForHierarchicalDuplexStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForHierarchicalIntegrityVerificationStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForHierarchicalSha256Storage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForIndirectStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForIntegrityRomFsStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForIntegritySaveDataStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForIntegrityVerificationStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForInternalStorageConcatenationFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForJournalIntegritySaveDataStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForJournalStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForMemoryStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForNotResizableSubStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForReadOnlyBlockCacheStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForReadOnlyGameCardStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForRemapStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForResizableSubStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForSdmmcStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForUnionStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForWriteOnlyGameCardStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForZeroBitmapFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForZeroBitmapHashStorageFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedSetSizeForZeroStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedVersion(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedWriteForAesCtrCounterExtendedStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedWriteForAesCtrStorageExternal(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedWriteForCompressedStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedWriteForIndirectStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedWriteForPartitionFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedWriteForPartitionFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedWriteForReadOnlyBlockCacheStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedWriteForReadOnlyFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedWriteForReadOnlyFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedWriteForReadOnlyGameCardStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedWriteForRomFsFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedWriteForRomFsFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedWriteForSaveDataInternalStorageFileSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedWriteForZeroBitmapHashStorageFile(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnsupportedWriteForZeroStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UsableSpaceNotEnough(cls) -> Result.Base: ...
    @classmethod
    @property
    def UsableSpaceNotEnoughForCacheStorage(cls) -> Result.Base: ...
    @classmethod
    @property
    def UsableSpaceNotEnoughForSaveData(cls) -> Result.Base: ...
    @classmethod
    @property
    def UsableSpaceNotEnoughForSaveDataEvenAssistanceSuccess(cls) -> Result.Base: ...
    @classmethod
    @property
    def UsableSpaceNotEnoughMmc(cls) -> Result.Base: ...
    @classmethod
    @property
    def UsableSpaceNotEnoughMmcCalibration(cls) -> Result.Base: ...
    @classmethod
    @property
    def UsableSpaceNotEnoughMmcSafe(cls) -> Result.Base: ...
    @classmethod
    @property
    def UsableSpaceNotEnoughMmcSystem(cls) -> Result.Base: ...
    @classmethod
    @property
    def UsableSpaceNotEnoughMmcUser(cls) -> Result.Base: ...
    @classmethod
    @property
    def UsableSpaceNotEnoughSdCard(cls) -> Result.Base: ...
    @classmethod
    @property
    def UserNotExist(cls) -> Result.Base: ...
    @classmethod
    @property
    def WriteModeFileNotClosed(cls) -> Result.Base: ...
    @classmethod
    @property
    def WriteUnpermitted(cls) -> Result.Base: ...
    @classmethod
    @property
    def ZeroBitmapFileCorrupted(cls) -> Result.Base: ...


class ResultHandler(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, fs: FileSystemClient, result: Result, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> AbortSpecifier: ...
    def Invoke(self, fs: FileSystemClient, result: Result) -> AbortSpecifier: ...


class ResultHandlingUtility(abc.ABC):
    @staticmethod
    def IsAbortNeeded(fs: FileSystemClientImpl, result: Result) -> bool: ...
    @staticmethod
    def LogResultErrorMessage(fs: FileSystemClientImpl, result: Result, functionName: str = ...) -> None: ...
    @staticmethod
    def SetResultHandledByApplication(fs: FileSystemClient, isHandledByApplication: bool) -> None: ...
    # Skipped LogErrorMessage due to it being static, abstract and generic.

    LogErrorMessage : LogErrorMessage_MethodGroup
    class LogErrorMessage_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, result: Result, message: str) -> None:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, result: Result, format: str, args: Array_1[typing.Any]) -> None:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, result: Result, format: str, arg0: typing.Any) -> None:...



class RightsId(IEquatable_1[RightsId]):
    def __init__(self, value: ReadOnlySpan_1[int]) -> None: ...
    Value : Array16_1[int]
    def DebugDisplay(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: RightsId, right: RightsId) -> bool: ...
    def __ne__(self, left: RightsId, right: RightsId) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: RightsId) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class RsaEncryptedKey:
    Value : Array256_1[int]


class SaveData(abc.ABC):
    SaveIndexerId : int
    @classmethod
    @property
    def AutoResolveCallerProgramId(cls) -> ProgramId: ...
    @classmethod
    @property
    def InvalidProgramId(cls) -> ProgramId: ...
    @classmethod
    @property
    def InvalidSystemSaveDataId(cls) -> int: ...
    @classmethod
    @property
    def InvalidUserId(cls) -> UserId: ...


class SaveDataAttribute(IComparable_1[SaveDataAttribute], IEquatable_1[SaveDataAttribute]):
    Index : int
    ProgramId : ProgramId
    Rank : SaveDataRank
    Reserved : Array24_1[int]
    StaticSaveDataId : int
    Type : SaveDataType
    UserId : UserId
    def CompareTo(self, other: SaveDataAttribute) -> int: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: SaveDataAttribute, right: SaveDataAttribute) -> bool: ...
    def __ne__(self, left: SaveDataAttribute, right: SaveDataAttribute) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: SaveDataAttribute) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...

    # Skipped Make due to it being static, abstract and generic.

    Make : Make_MethodGroup
    class Make_MethodGroup:
        @typing.overload
        def __call__(self, attribute: clr.Reference[SaveDataAttribute], programId: ProgramId, type: SaveDataType, userId: UserId, staticSaveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, attribute: clr.Reference[SaveDataAttribute], programId: ProgramId, type: SaveDataType, userId: UserId, staticSaveDataId: int, index: int) -> Result:...
        @typing.overload
        def __call__(self, attribute: clr.Reference[SaveDataAttribute], programId: ProgramId, type: SaveDataType, userId: UserId, staticSaveDataId: int, index: int, rank: SaveDataRank) -> Result:...



class SaveDataCreationInfo:
    BlockSize : int
    Flags : SaveDataFlags
    IsPseudoSaveData : bool
    JournalSize : int
    OwnerId : int
    Reserved : Array26_1[int]
    Size : int
    SpaceId : SaveDataSpaceId
    @staticmethod
    def Make(creationInfo: clr.Reference[SaveDataCreationInfo], size: int, journalSize: int, ownerId: int, flags: SaveDataFlags, spaceId: SaveDataSpaceId) -> Result: ...


class SaveDataCreationInfo2:
    Attribute : SaveDataAttribute
    BlockSize : int
    Flags : SaveDataFlags
    FormatType : SaveDataFormatType
    HashSalt : HashSalt
    IsHashSaltEnabled : bool
    JournalSize : int
    MetaSize : int
    MetaType : SaveDataMetaType
    OwnerId : int
    Reserved1 : Array2_1[int]
    Reserved2 : Array3_1[int]
    Reserved3 : Array3_1[int]
    Reserved4 : Array356_1[int]
    Size : int
    SpaceId : SaveDataSpaceId
    Version : int
    @staticmethod
    def Make(creationInfo: clr.Reference[SaveDataCreationInfo2], attribute: clr.Reference[SaveDataAttribute], size: int, journalSize: int, blockSize: int, ownerId: int, flags: SaveDataFlags, spaceId: SaveDataSpaceId, formatType: SaveDataFormatType) -> Result: ...


class SaveDataExtraData:
    Attribute : SaveDataAttribute
    CommitId : int
    DataSize : int
    Flags : SaveDataFlags
    FormatType : SaveDataFormatType
    JournalSize : int
    OwnerId : int
    Reserved : Array400_1[int]
    TimeStamp : int


class SaveDataFilter:
    Attribute : SaveDataAttribute
    FilterByIndex : bool
    FilterByProgramId : bool
    FilterBySaveDataId : bool
    FilterBySaveDataType : bool
    FilterByUserId : bool
    Rank : SaveDataRank
    # Skipped Make due to it being static, abstract and generic.

    Make : Make_MethodGroup
    class Make_MethodGroup:
        @typing.overload
        def __call__(self, programId: Optional_1[int], saveType: Optional_1[SaveDataType], userId: Optional_1[UserId], saveDataId: Optional_1[int], index: Optional_1[int]) -> SaveDataFilter:...
        @typing.overload
        def __call__(self, programId: Optional_1[int], saveType: Optional_1[SaveDataType], userId: Optional_1[UserId], saveDataId: Optional_1[int], index: Optional_1[int], rank: SaveDataRank) -> SaveDataFilter:...
        @typing.overload
        def __call__(self, filter: clr.Reference[SaveDataFilter], programId: Optional_1[int], saveType: Optional_1[SaveDataType], userId: Optional_1[UserId], saveDataId: Optional_1[int], index: Optional_1[int]) -> Result:...
        @typing.overload
        def __call__(self, filter: clr.Reference[SaveDataFilter], programId: Optional_1[int], saveType: Optional_1[SaveDataType], userId: Optional_1[UserId], saveDataId: Optional_1[int], index: Optional_1[int], rank: SaveDataRank) -> Result:...



class SaveDataFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : SaveDataFlags # 0
    KeepAfterResettingSystemSaveData : SaveDataFlags # 1
    KeepAfterRefurbishment : SaveDataFlags # 2
    KeepAfterResettingSystemSaveDataWithoutUserSaveData : SaveDataFlags # 4
    NeedsSecureDelete : SaveDataFlags # 8
    Restore : SaveDataFlags # 16


class SaveDataFormatType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Normal : SaveDataFormatType # 0
    NoJournal : SaveDataFormatType # 1


class SaveDataInfo:
    Index : int
    ProgramId : ProgramId
    Rank : SaveDataRank
    Reserved : Array36_1[int]
    SaveDataId : int
    Size : int
    SpaceId : SaveDataSpaceId
    State : SaveDataState
    StaticSaveDataId : int
    Type : SaveDataType
    UserId : UserId


class SaveDataIterator(IDisposable):
    def Dispose(self) -> None: ...
    def ReadSaveDataInfo(self, readCount: clr.Reference[int], buffer: Span_1[SaveDataInfo]) -> Result: ...


class SaveDataMetaInfo:
    Reserved : Array11_1[int]
    Size : int
    Type : SaveDataMetaType


class SaveDataMetaType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : SaveDataMetaType # 0
    Thumbnail : SaveDataMetaType # 1
    ExtensionContext : SaveDataMetaType # 2


class SaveDataRank(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Primary : SaveDataRank # 0
    Secondary : SaveDataRank # 1


class SaveDataSpaceId(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    System : SaveDataSpaceId # 0
    User : SaveDataSpaceId # 1
    SdSystem : SaveDataSpaceId # 2
    Temporary : SaveDataSpaceId # 3
    SdUser : SaveDataSpaceId # 4
    ProperSystem : SaveDataSpaceId # 100
    SafeMode : SaveDataSpaceId # 101


class SaveDataState(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Normal : SaveDataState # 0
    Processing : SaveDataState # 1
    State2 : SaveDataState # 2
    MarkedForDeletion : SaveDataState # 3
    Extending : SaveDataState # 4
    ImportSuspended : SaveDataState # 5


class SaveDataTransferManagerVersion2(IDisposable):
    def __init__(self, fs: FileSystemClient) -> None: ...
    def Dispose(self) -> None: ...
    def GetChallenge(self, outChallenge: clr.Reference[SaveDataTransferManagerVersion2.Challenge]) -> Result: ...
    @staticmethod
    def MakeDeviceSaveDataTag(applicationId: ApplicationId) -> SaveDataTransferManagerVersion2.SaveDataTag: ...
    @staticmethod
    def MakeUserAccountSaveDataTag(applicationId: ApplicationId, userId: clr.Reference[UserId]) -> SaveDataTransferManagerVersion2.SaveDataTag: ...
    def OpenSaveDataDiffExporter(self, outExporter: clr.Reference[UniqueRef_1[ISaveDataDivisionExporter]], initialData: clr.Reference[InitialDataVersion2], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def OpenSaveDataDiffImporter(self, outImporter: clr.Reference[UniqueRef_1[ISaveDataDivisionImporter]], initialData: clr.Reference[InitialDataVersion2], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def OpenSaveDataDuplicateDiffImporter(self, outImporter: clr.Reference[UniqueRef_1[ISaveDataDivisionImporter]], initialData: clr.Reference[InitialDataVersion2], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def OpenSaveDataExporterByContext(self, outExporter: clr.Reference[UniqueRef_1[ISaveDataDivisionExporter]], exportContext: ISaveDataDivisionExporter.ExportContext) -> Result: ...
    def OpenSaveDataFullExporter(self, outExporter: clr.Reference[UniqueRef_1[ISaveDataDivisionExporter]], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    def OpenSaveDataFullImporter(self, outImporter: clr.Reference[UniqueRef_1[ISaveDataDivisionImporter]], initialData: clr.Reference[InitialDataVersion2], userId: clr.Reference[UserId], spaceId: SaveDataSpaceId) -> Result: ...
    def OpenSaveDataImporter(self, outImporter: clr.Reference[UniqueRef_1[ISaveDataDivisionImporter]], initialData: clr.Reference[InitialDataVersion2], spaceId: SaveDataSpaceId, useSwap: bool) -> Result: ...
    def OpenSaveDataImporterByContext(self, outImporter: clr.Reference[UniqueRef_1[ISaveDataDivisionImporter]], importContext: clr.Reference[ISaveDataDivisionImporter.ImportContext]) -> Result: ...
    def OpenSaveDataImporterImpl(self, outImporter: clr.Reference[UniqueRef_1[ISaveDataDivisionImporter]], initialData: clr.Reference[InitialDataVersion2], userId: clr.Reference[UserId], spaceId: SaveDataSpaceId, useSwap: bool) -> Result: ...
    def SetKeySeedPackage(self, keySeedPackage: clr.Reference[SaveDataTransferManagerVersion2.KeySeedPackage]) -> Result: ...
    def SwapSecondary(self, tag: clr.Reference[SaveDataTransferManagerVersion2.SaveDataTag], primaryCommitId: Optional_1[int]) -> Result: ...
    # Skipped CancelSuspendingImport due to it being static, abstract and generic.

    CancelSuspendingImport : CancelSuspendingImport_MethodGroup
    class CancelSuspendingImport_MethodGroup:
        @typing.overload
        def __call__(self, tag: clr.Reference[SaveDataTransferManagerVersion2.SaveDataTag]) -> Result:...
        @typing.overload
        def __call__(self, applicationId: ApplicationId, userId: clr.Reference[UserId]) -> Result:...


    class Challenge:
        Value : Array16_1[int]


    class KeySeedPackage:
        Value : Array512_1[int]


    class SaveDataTag:
        Value : Array64_1[int]



class SaveDataTransferProhibiterForCloudBackUp(IDisposable):
    def __init__(self, prohibiter: clr.Reference[SharedRef_1[ISaveDataTransferProhibiter]]) -> None: ...
    def Dispose(self) -> None: ...


class SaveDataType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    System : SaveDataType # 0
    Account : SaveDataType # 1
    Bcat : SaveDataType # 2
    Device : SaveDataType # 3
    Temporary : SaveDataType # 4
    Cache : SaveDataType # 5
    SystemBcat : SaveDataType # 6


class ScopedAutoAbortDisabler:
    def __init__(self, fs: FileSystemClient) -> None: ...
    def Dispose(self) -> None: ...


class ScopedSetter_GenericClasses(abc.ABCMeta):
    Generic_ScopedSetter_GenericClasses_ScopedSetter_1_T = typing.TypeVar('Generic_ScopedSetter_GenericClasses_ScopedSetter_1_T')
    def __getitem__(self, types : typing.Type[Generic_ScopedSetter_GenericClasses_ScopedSetter_1_T]) -> typing.Type[ScopedSetter_1[Generic_ScopedSetter_GenericClasses_ScopedSetter_1_T]]: ...

ScopedSetter : ScopedSetter_GenericClasses

ScopedSetter_1_T = typing.TypeVar('ScopedSetter_1_T')
class ScopedSetter_1(typing.Generic[ScopedSetter_1_T]):
    def __init__(self, reference: clr.Reference[ScopedSetter_1_T], value: ScopedSetter_1_T) -> None: ...
    def Dispose(self) -> None: ...
    @staticmethod
    def MakeScopedSetter(reference: clr.Reference[ScopedSetter_1_T], value: ScopedSetter_1_T) -> ScopedSetter_1[ScopedSetter_1_T]: ...
    def Set(self, value: ScopedSetter_1_T) -> None: ...


class SdCardSpeedMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Identification : SdCardSpeedMode # 0
    DefaultSpeed : SdCardSpeedMode # 1
    HighSpeed : SdCardSpeedMode # 2
    Sdr12 : SdCardSpeedMode # 3
    Sdr25 : SdCardSpeedMode # 4
    Sdr50 : SdCardSpeedMode # 5
    Sdr104 : SdCardSpeedMode # 6
    Ddr50 : SdCardSpeedMode # 7
    Unknown : SdCardSpeedMode # 8


class SdmmcBusWidth(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : SdmmcBusWidth # 0
    Width1Bit : SdmmcBusWidth # 1
    Width4Bit : SdmmcBusWidth # 2
    Width8Bit : SdmmcBusWidth # 3


class SdmmcPort(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Mmc : SdmmcPort # 0
    SdCard : SdmmcPort # 1
    GcAsic : SdmmcPort # 2


class SdmmcSpeedMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : SdmmcSpeedMode # 0
    MmcIdentification : SdmmcSpeedMode # 1
    MmcLegacySpeed : SdmmcSpeedMode # 2
    MmcHighSpeed : SdmmcSpeedMode # 3
    MmcHs200 : SdmmcSpeedMode # 4
    MmcHs400 : SdmmcSpeedMode # 5
    SdCardIdentification : SdmmcSpeedMode # 6
    SdCardDefaultSpeed : SdmmcSpeedMode # 7
    SdCardHighSpeed : SdmmcSpeedMode # 8
    SdCardSdr12 : SdmmcSpeedMode # 9
    SdCardSdr25 : SdmmcSpeedMode # 10
    SdCardSdr50 : SdmmcSpeedMode # 11
    SdCardSdr104 : SdmmcSpeedMode # 12
    SdCardDdr50 : SdmmcSpeedMode # 13
    GcAsicFpgaSpeed : SdmmcSpeedMode # 14
    GcAsicSpeed : SdmmcSpeedMode # 15


class SimulatingDeviceAccessFailureEventType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : SimulatingDeviceAccessFailureEventType # 0
    AccessTimeoutFailure : SimulatingDeviceAccessFailureEventType # 1
    AccessFailure : SimulatingDeviceAccessFailureEventType # 2
    DataCorruption : SimulatingDeviceAccessFailureEventType # 3


class SimulatingDeviceDetectionMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoSimulation : SimulatingDeviceDetectionMode # 0
    DeviceAttached : SimulatingDeviceDetectionMode # 1
    DeviceRemoved : SimulatingDeviceDetectionMode # 2


class SimulatingDeviceTargetOperation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : SimulatingDeviceTargetOperation # 0
    Read : SimulatingDeviceTargetOperation # 1
    Write : SimulatingDeviceTargetOperation # 2


class SpeedEmulationMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : SpeedEmulationMode # 0
    Faster : SpeedEmulationMode # 1
    Slower : SpeedEmulationMode # 2
    Random : SpeedEmulationMode # 3


class StorageErrorInfo:
    NumActivationErrorCorrections : int
    NumActivationFailures : int
    NumReadWriteErrorCorrections : int
    NumReadWriteFailures : int


class SubStorage(IStorage):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, baseStorage: IStorage, offset: int, size: int) -> None: ...
    @typing.overload
    def __init__(self, baseStorage: clr.Reference[SharedRef_1[IStorage]], offset: int, size: int) -> None: ...
    @typing.overload
    def __init__(self, other: SubStorage) -> None: ...
    @typing.overload
    def __init__(self, other: SubStorage, offset: int, size: int) -> None: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> Result: ...
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    def OperateRange(self, outBuffer: Span_1[int], operationId: OperationId, offset: int, size: int, inBuffer: ReadOnlySpan_1[int]) -> Result: ...
    def Read(self, offset: int, destination: Span_1[int]) -> Result: ...
    def Set(self, other: SubStorage) -> None: ...
    def SetResizable(self, isResizable: bool) -> None: ...
    def SetSize(self, size: int) -> Result: ...
    def Write(self, offset: int, source: ReadOnlySpan_1[int]) -> Result: ...


class UnpreparedFileInformation:
    Path : Array769_1[int]


class UnpreparedRangeInfo:
    CompletionRate : int
    FileSize : int
    PreparedRangeSize : int
    Range : Range
    Reserved : Array20_1[int]
    TotalReadSize : int


class UserId(IComparable, IComparable_1[UserId], IEquatable_1[UserId]):
    @typing.overload
    def __init__(self, high: int, low: int) -> None: ...
    @typing.overload
    def __init__(self, uid: ReadOnlySpan_1[int]) -> None: ...
    Id : Id128
    @classmethod
    @property
    def InvalidId(cls) -> UserId: ...
    def AsBytes(self) -> ReadOnlySpan_1[int]: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: UserId, right: UserId) -> bool: ...
    def __gt__(self, left: UserId, right: UserId) -> bool: ...
    def __ge__(self, left: UserId, right: UserId) -> bool: ...
    def __ne__(self, left: UserId, right: UserId) -> bool: ...
    def __lt__(self, left: UserId, right: UserId) -> bool: ...
    def __le__(self, left: UserId, right: UserId) -> bool: ...
    def ToBytes(self, output: Span_1[int]) -> None: ...
    def ToString(self) -> str: ...
    # Skipped CompareTo due to it being static, abstract and generic.

    CompareTo : CompareTo_MethodGroup
    class CompareTo_MethodGroup:
        @typing.overload
        def __call__(self, other: UserId) -> int:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> int:...

    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: UserId) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class Utility(abc.ABC):
    @staticmethod
    def CheckUid(hos: HorizonClient, uid: Uid) -> Result: ...
    @staticmethod
    def ConvertAccountUidToFsUserId(uid: Uid) -> UserId: ...
    @staticmethod
    def DoContinuouslyUntilSaveDataListFetched(hos: HorizonClient, listGetter: Func_1[Result]) -> Result: ...


class ValueSubStorage(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, baseStorage: IStorage, offset: int, size: int) -> None: ...
    @typing.overload
    def __init__(self, baseStorage: clr.Reference[SharedRef_1[IStorage]], offset: int, size: int) -> None: ...
    @typing.overload
    def __init__(self, other: clr.Reference[ValueSubStorage]) -> None: ...
    @typing.overload
    def __init__(self, subStorage: clr.Reference[ValueSubStorage], offset: int, size: int) -> None: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> Result: ...
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    def GetSubStorage(self) -> SubStorage: ...
    def Read(self, offset: int, destination: Span_1[int]) -> Result: ...
    def Set(self, other: clr.Reference[ValueSubStorage]) -> None: ...
    def SetResizable(self, isResizable: bool) -> None: ...
    def SetSize(self, size: int) -> Result: ...
    def Write(self, offset: int, source: ReadOnlySpan_1[int]) -> Result: ...
    # Skipped OperateRange due to it being static, abstract and generic.

    OperateRange : OperateRange_MethodGroup
    class OperateRange_MethodGroup:
        @typing.overload
        def __call__(self, operationId: OperationId, offset: int, size: int) -> Result:...
        @typing.overload
        def __call__(self, outBuffer: Span_1[int], operationId: OperationId, offset: int, size: int, inBuffer: ReadOnlySpan_1[int]) -> Result:...



class WindowsPath(abc.ABC):
    @staticmethod
    def CheckCharacterCountForWindows(path: ReadOnlySpan_1[int], maxNameLength: int, maxPathLength: int) -> Result: ...
    @staticmethod
    def GetCodePointByteLength(firstCodeUnit: int) -> int: ...
    @staticmethod
    def GetDosDevicePathPrefixLength() -> int: ...
    @staticmethod
    def GetUncPathPrefixLength(path: ReadOnlySpan_1[int]) -> int: ...
    @staticmethod
    def GetUncPathPrefixLengthW(path: ReadOnlySpan_1[str]) -> int: ...
    @staticmethod
    def GetWindowsSkipLength(path: ReadOnlySpan_1[int]) -> int: ...
    @staticmethod
    def IsDosDelimiterW(c: str) -> bool: ...
    @staticmethod
    def IsDosDevicePath(path: ReadOnlySpan_1[int]) -> bool: ...
    @staticmethod
    def IsDosDevicePathW(path: ReadOnlySpan_1[str]) -> bool: ...
    @staticmethod
    def IsUncPathW(path: ReadOnlySpan_1[str]) -> bool: ...
    @staticmethod
    def IsWindowsDrive(path: ReadOnlySpan_1[int]) -> bool: ...
    @staticmethod
    def IsWindowsDriveW(path: ReadOnlySpan_1[str]) -> bool: ...
    @staticmethod
    def IsWindowsPath(path: ReadOnlySpan_1[int], allowForwardSlashForUnc: bool) -> bool: ...
    @staticmethod
    def IsWindowsPathW(path: ReadOnlySpan_1[str]) -> bool: ...
    # Skipped IsUncPath due to it being static, abstract and generic.

    IsUncPath : IsUncPath_MethodGroup
    class IsUncPath_MethodGroup:
        @typing.overload
        def __call__(self, path: ReadOnlySpan_1[int]) -> bool:...
        @typing.overload
        def __call__(self, path: ReadOnlySpan_1[int], checkForwardSlash: bool, checkBackSlash: bool) -> bool:...



class WriteOption:
    @typing.overload
    def __init__(self, flags: int) -> None: ...
    @typing.overload
    def __init__(self, flags: WriteOptionFlag) -> None: ...
    Flags : WriteOptionFlag
    @classmethod
    @property
    def Flush(cls) -> WriteOption: ...
    # Skipped property None since it is a reserved python word. Use reflection to access.
    def HasFlushFlag(self) -> bool: ...


class WriteOptionFlag(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : WriteOptionFlag # 0
    Flush : WriteOptionFlag # 1

