import typing, clr, abc
from LibHac import Result, ApplicationId
from LibHac.Fs import FileSystemClient, BaseFileSystemId, BisPartitionId, IStorage, CodeVerificationData, ContentType, ContentStorageId, CustomStorageId, FileSystemProxyErrorInfo, FileSystemClientImpl, FsStackUsageThreadType, GameCardPartition, GameCardSize, GameCardAttribute, GameCardCompatibilityType, GameCardErrorInfo, GameCardErrorReportInfo, GameCardUpdatePartitionInfo, GameCardPartitionRaw, SimulatingDeviceDetectionMode, SimulatingDeviceTargetOperation, SimulatingDeviceAccessFailureEventType, MountHostOption, ImageDirectoryId, MemoryReportInfo, MmcPartition, StorageErrorInfo, MmcSpeedMode, Priority, PriorityRaw, ProgramIndexMapInfo, RightsId, UserId, SaveDataSpaceId, SaveDataType, CacheStorageListHandle, SaveDataFlags, CacheStorageInfo, SaveDataInfo, SaveDataIterator, SaveDataAttribute, SaveDataCreationInfo, SaveDataMetaInfo, HashSalt, SaveDataFormatType, SaveDataFilter, SaveDataExtraData, SaveDataTransferProhibiterForCloudBackUp, SdCardSpeedMode, EncryptionSeed, SdmmcSpeedMode, SdmmcBusWidth, SdmmcPort, SpeedEmulationMode
from LibHac.Common import U8Span, UniqueRef_1, SharedRef_1
from LibHac.Ncm import ApplicationId, ProgramId, DataId, StorageId
from System import ReadOnlySpan_1, Memory_1, Span_1
from LibHac.FsSrv.Sf import IFileSystemProxyForLoader, IFileSystemProxy, IProgramRegistry
from LibHac.Gc import RmaInformation, GameCardIdSet
from LibHac.Os import ProcessId
from LibHac.Time import PosixTime
from LibHac.Spl import AccessKey
from LibHac.Fs.Fsa import IFileSystem

class Application(abc.ABC):
    @staticmethod
    def MountApplicationPackage(fs: FileSystemClient, mountName: U8Span, path: U8Span) -> Result: ...


class BaseFileSystem(abc.ABC):
    @staticmethod
    def FormatBaseFileSystem(fs: FileSystemClient, fileSystemId: BaseFileSystemId) -> Result: ...
    @staticmethod
    def MountBaseFileSystem(fs: FileSystemClient, mountName: U8Span, fileSystemId: BaseFileSystemId) -> Result: ...


class BcatSaveData(abc.ABC):
    @staticmethod
    def MountBcatSaveData(fs: FileSystemClient, mountName: U8Span, applicationId: ApplicationId) -> Result: ...


class Bis(abc.ABC):
    @staticmethod
    def GetBisMountName(partitionId: BisPartitionId) -> ReadOnlySpan_1[int]: ...
    @staticmethod
    def InvalidateBisCache(fs: FileSystemClient) -> Result: ...
    @staticmethod
    def OpenBisPartition(fs: FileSystemClient, outPartitionStorage: clr.Reference[UniqueRef_1[IStorage]], partitionId: BisPartitionId) -> Result: ...
    # Skipped MountBis due to it being static, abstract and generic.

    MountBis : MountBis_MethodGroup
    class MountBis_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, partitionId: BisPartitionId, rootPath: U8Span) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, partitionId: BisPartitionId) -> Result:...



class Code(abc.ABC):
    @staticmethod
    def MountCode(fs: FileSystemClient, verificationData: clr.Reference[CodeVerificationData], mountName: U8Span, path: U8Span, programId: ProgramId) -> Result: ...


class Content(abc.ABC):
    # Skipped MountContent due to it being static, abstract and generic.

    MountContent : MountContent_MethodGroup
    class MountContent_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, path: U8Span, contentType: ContentType) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, programId: ProgramId, contentType: ContentType) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, path: U8Span, dataId: DataId, contentType: ContentType) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, path: U8Span, programId: ProgramId, contentType: ContentType) -> Result:...



class ContentStorage(abc.ABC):
    @staticmethod
    def GetContentStorageMountName(storageId: ContentStorageId) -> ReadOnlySpan_1[int]: ...
    # Skipped MountContentStorage due to it being static, abstract and generic.

    MountContentStorage : MountContentStorage_MethodGroup
    class MountContentStorage_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, storageId: ContentStorageId) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, storageId: ContentStorageId) -> Result:...



class CustomStorage(abc.ABC):
    @staticmethod
    def GetCustomStorageDirectoryName(storageId: CustomStorageId) -> ReadOnlySpan_1[int]: ...
    @staticmethod
    def MountCustomStorage(fs: FileSystemClient, mountName: U8Span, storageId: CustomStorageId) -> Result: ...


class DebugOptionKey(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SaveDataEncryption : DebugOptionKey # 541410387
    SaveDataJournalMetaVerification : DebugOptionKey # 541410387
    SaveDataRemapMetaVerification : DebugOptionKey # 541410387
    SaveDataHashAlgorithm : DebugOptionKey # 541410387
    SaveDataHashSalt : DebugOptionKey # 541410387


class DebugShim(abc.ABC):
    @staticmethod
    def CreatePaddingFile(fs: FileSystemClient, size: int) -> Result: ...
    @staticmethod
    def DeleteAllPaddingFiles(fs: FileSystemClient) -> Result: ...
    @staticmethod
    def OverrideSaveDataTransferTokenSignVerificationKey(fs: FileSystemClient, keyBuffer: ReadOnlySpan_1[int]) -> Result: ...
    @staticmethod
    def SetDebugOption(fs: FileSystemClient, key: DebugOptionKey, value: int) -> Result: ...
    @staticmethod
    def UnsetDebugOption(fs: FileSystemClient, key: DebugOptionKey) -> Result: ...


class DeviceSaveData(abc.ABC):
    @staticmethod
    def IsDeviceSaveDataExisting(fs: FileSystemClient, applicationId: ApplicationId) -> bool: ...
    # Skipped MountDeviceSaveData due to it being static, abstract and generic.

    MountDeviceSaveData : MountDeviceSaveData_MethodGroup
    class MountDeviceSaveData_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, applicationId: ApplicationId) -> Result:...
        # Method MountDeviceSaveData(fs : FileSystemClient, mountName : U8Span, applicationId : ApplicationId) was skipped since it collides with above method



class ErrorInfo(abc.ABC):
    @staticmethod
    def GetAndClearFileSystemProxyErrorInfo(fs: FileSystemClient, outErrorInfo: clr.Reference[FileSystemProxyErrorInfo]) -> Result: ...


class FileDataCacheShim(abc.ABC):
    @staticmethod
    def DisableGlobalFileDataCache(fs: FileSystemClient) -> None: ...
    @staticmethod
    def EnableDefaultGlobalFileDataCache(fs: FileSystemClient, buffer: Memory_1[int]) -> None: ...
    @staticmethod
    def EnableGlobalFileDataCache(fs: FileSystemClient, buffer: Memory_1[int]) -> None: ...
    @staticmethod
    def IsDefaultGlobalFileDataCacheEnabled(fs: FileSystemClient) -> bool: ...


class FileSystemProxyServiceObject(abc.ABC):
    @staticmethod
    def GetFileSystemProxyForLoaderServiceObject(fs: FileSystemClientImpl) -> SharedRef_1[IFileSystemProxyForLoader]: ...
    @staticmethod
    def GetFileSystemProxyServiceObject(fs: FileSystemClientImpl) -> SharedRef_1[IFileSystemProxy]: ...
    @staticmethod
    def GetProgramRegistryServiceObject(fs: FileSystemClientImpl) -> SharedRef_1[IProgramRegistry]: ...
    @staticmethod
    def InitializeDfcFileSystemProxyServiceObject(fs: FileSystemClientImpl, serviceObject: clr.Reference[SharedRef_1[IFileSystemProxy]]) -> None: ...


class FsStackUsage(abc.ABC):
    @staticmethod
    def GetFsStackUsage(fs: FileSystemClient, threadType: FsStackUsageThreadType) -> int: ...


class GameCard(abc.ABC):
    @staticmethod
    def ChallengeCardExistence(fs: FileSystemClient, responseBuffer: Span_1[int], challengeSeedBuffer: ReadOnlySpan_1[int], challengeValueBuffer: ReadOnlySpan_1[int], handle: int) -> Result: ...
    @staticmethod
    def CheckGameCardPartitionAvailability(fs: FileSystemClient, handle: int, partitionId: GameCardPartition) -> Result: ...
    @staticmethod
    def ClearGameCardSimulationEvent(fs: FileSystemClient) -> Result: ...
    @staticmethod
    def EraseAndWriteParamDirectly(fs: FileSystemClient, devParamBuffer: ReadOnlySpan_1[int]) -> Result: ...
    @staticmethod
    def EraseGameCard(fs: FileSystemClient, cardSize: GameCardSize, romAreaStartPageAddress: int) -> Result: ...
    @staticmethod
    def FinalizeGameCardDriver(fs: FileSystemClient) -> None: ...
    @staticmethod
    def ForceEraseGameCard(fs: FileSystemClient) -> Result: ...
    @staticmethod
    def GetGameCardAsicInfo(fs: FileSystemClient, outRmaInfo: clr.Reference[RmaInformation], asicFirmwareBuffer: ReadOnlySpan_1[int]) -> Result: ...
    @staticmethod
    def GetGameCardAttribute(fs: FileSystemClient, outAttribute: clr.Reference[GameCardAttribute], handle: int) -> Result: ...
    @staticmethod
    def GetGameCardCid(fs: FileSystemClient, outCidBuffer: Span_1[int]) -> Result: ...
    @staticmethod
    def GetGameCardCompatibilityType(fs: FileSystemClient, outCompatibilityType: clr.Reference[GameCardCompatibilityType], handle: int) -> Result: ...
    @staticmethod
    def GetGameCardDeviceCertificate(fs: FileSystemClient, outBuffer: Span_1[int], handle: int) -> Result: ...
    @staticmethod
    def GetGameCardDeviceId(fs: FileSystemClient, outBuffer: Span_1[int]) -> Result: ...
    @staticmethod
    def GetGameCardDeviceIdForProdCard(fs: FileSystemClient, outIdBuffer: Span_1[int], devHeaderBuffer: ReadOnlySpan_1[int]) -> Result: ...
    @staticmethod
    def GetGameCardErrorInfo(fs: FileSystemClient, outErrorInfo: clr.Reference[GameCardErrorInfo]) -> Result: ...
    @staticmethod
    def GetGameCardErrorReportInfo(fs: FileSystemClient, outErrorInfo: clr.Reference[GameCardErrorReportInfo]) -> Result: ...
    @staticmethod
    def GetGameCardHandle(fs: FileSystemClient, outHandle: clr.Reference[int]) -> Result: ...
    @staticmethod
    def GetGameCardIdSet(fs: FileSystemClient, outGcIdSet: clr.Reference[GameCardIdSet]) -> Result: ...
    @staticmethod
    def GetGameCardImageHash(fs: FileSystemClient, outBuffer: Span_1[int], handle: int) -> Result: ...
    @staticmethod
    def GetGameCardUpdatePartitionInfo(fs: FileSystemClient, outPartitionInfo: clr.Reference[GameCardUpdatePartitionInfo], handle: int) -> Result: ...
    @staticmethod
    def IsGameCardInserted(fs: FileSystemClient) -> bool: ...
    @staticmethod
    def MountGameCardPartition(fs: FileSystemClient, mountName: U8Span, handle: int, partitionId: GameCardPartition) -> Result: ...
    @staticmethod
    def OpenGameCardPartition(fs: FileSystemClient, outStorage: clr.Reference[UniqueRef_1[IStorage]], handle: int, partitionType: GameCardPartitionRaw) -> Result: ...
    @staticmethod
    def ReadParamDirectly(fs: FileSystemClient, outBuffer: Span_1[int]) -> Result: ...
    @staticmethod
    def SetVerifyWriteEnableFlag(fs: FileSystemClient, isEnabled: bool) -> Result: ...
    @staticmethod
    def SimulateGameCardDetectionEvent(fs: FileSystemClient, mode: SimulatingDeviceDetectionMode, signalEvent: bool) -> Result: ...
    @staticmethod
    def WriteToGameCard(fs: FileSystemClient, offset: int, buffer: Span_1[int]) -> Result: ...
    # Skipped SetGameCardSimulationEvent due to it being static, abstract and generic.

    SetGameCardSimulationEvent : SetGameCardSimulationEvent_MethodGroup
    class SetGameCardSimulationEvent_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, simulatedOperationType: SimulatingDeviceTargetOperation, simulatedFailureType: SimulatingDeviceAccessFailureEventType) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, simulatedOperationType: SimulatingDeviceTargetOperation, simulatedFailureType: SimulatingDeviceAccessFailureEventType, autoClearEvent: bool) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, simulatedOperationType: SimulatingDeviceTargetOperation, failureResult: Result, autoClearEvent: bool) -> Result:...



class Host(abc.ABC):
    @staticmethod
    def UnmountHostRoot(fs: FileSystemClient) -> None: ...
    # Skipped MountHost due to it being static, abstract and generic.

    MountHost : MountHost_MethodGroup
    class MountHost_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, path: U8Span) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, path: U8Span, option: MountHostOption) -> Result:...

    # Skipped MountHostRoot due to it being static, abstract and generic.

    MountHostRoot : MountHostRoot_MethodGroup
    class MountHostRoot_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, option: MountHostOption) -> Result:...



class ImageDirectory(abc.ABC):
    @staticmethod
    def MountImageDirectory(fs: FileSystemClient, mountName: U8Span, directoryId: ImageDirectoryId) -> Result: ...


class LoaderApi(abc.ABC):
    @staticmethod
    def IsArchivedProgram(fs: FileSystemClient, isArchived: clr.Reference[bool], processId: ProcessId) -> Result: ...


class Logo(abc.ABC):
    @staticmethod
    def MountLogo(fs: FileSystemClient, mountName: U8Span, path: U8Span, programId: ProgramId) -> Result: ...


class MemoryReportInfoShim(abc.ABC):
    @staticmethod
    def GetAndClearMemoryReportInfo(fs: FileSystemClient, reportInfo: clr.Reference[MemoryReportInfo]) -> Result: ...


class Mmc(abc.ABC):
    @staticmethod
    def EraseMmc(fs: FileSystemClient, partition: MmcPartition) -> Result: ...
    @staticmethod
    def GetAndClearMmcErrorInfo(fs: FileSystemClient, outErrorInfo: clr.Reference[StorageErrorInfo], outLogSize: clr.Reference[int], logBuffer: Span_1[int]) -> Result: ...
    @staticmethod
    def GetMmcCid(fs: FileSystemClient, outCidBuffer: Span_1[int]) -> Result: ...
    @staticmethod
    def GetMmcExtendedCsd(fs: FileSystemClient, outBuffer: Span_1[int]) -> Result: ...
    @staticmethod
    def GetMmcPartitionSize(fs: FileSystemClient, outPartitionSize: clr.Reference[int], partition: MmcPartition) -> Result: ...
    @staticmethod
    def GetMmcPatrolCount(fs: FileSystemClient, outPatrolCount: clr.Reference[int]) -> Result: ...
    @staticmethod
    def GetMmcSpeedMode(fs: FileSystemClient, outSpeedMode: clr.Reference[MmcSpeedMode]) -> Result: ...
    @staticmethod
    def ResumeMmcPatrol(fs: FileSystemClient) -> Result: ...
    @staticmethod
    def SuspendMmcPatrol(fs: FileSystemClient) -> Result: ...


class PathBasedFileDataCacheShim(abc.ABC):
    @staticmethod
    def DisableIndividualFileDataCache(fs: FileSystemClient, path: U8Span) -> None: ...
    @staticmethod
    def EnableIndividualFileDataCache(fs: FileSystemClient, path: U8Span, buffer: Memory_1[int]) -> Result: ...


class PosixTimeShim(abc.ABC):
    @staticmethod
    def SetCurrentPosixTime(fs: FileSystemClient, currentPosixTime: PosixTime, timeDifferenceSeconds: int) -> Result: ...


class PriorityShim(abc.ABC):
    @staticmethod
    def GetPriorityOnCurrentThread(fs: FileSystemClient) -> Priority: ...
    @staticmethod
    def GetPriorityRawOnCurrentThread(fs: FileSystemClient) -> PriorityRaw: ...
    @staticmethod
    def GetPriorityRawOnCurrentThreadForInternalUse(fs: FileSystemClient) -> PriorityRaw: ...
    @staticmethod
    def SetPriorityOnCurrentThread(fs: FileSystemClient, priority: Priority) -> None: ...
    @staticmethod
    def SetPriorityRawOnCurrentThread(fs: FileSystemClient, priority: PriorityRaw) -> None: ...


class ProgramIndexMapInfoShim(abc.ABC):
    @staticmethod
    def RegisterProgramIndexMapInfo(fs: FileSystemClient, mapInfo: ReadOnlySpan_1[ProgramIndexMapInfo]) -> Result: ...


class ProgramRegistry(abc.ABC):
    @staticmethod
    def RegisterProgram(fs: FileSystemClient, processId: int, programId: ProgramId, storageId: StorageId, accessControlData: ReadOnlySpan_1[int], accessControlDescriptor: ReadOnlySpan_1[int]) -> Result: ...
    @staticmethod
    def UnregisterProgram(fs: FileSystemClient, processId: int) -> Result: ...


class RightsIdShim(abc.ABC):
    @staticmethod
    def RegisterExternalKey(fs: FileSystemClient, rightsId: clr.Reference[RightsId], key: clr.Reference[AccessKey]) -> Result: ...
    @staticmethod
    def UnregisterAllExternalKey(fs: FileSystemClient) -> Result: ...
    @staticmethod
    def UnregisterExternalKey(fs: FileSystemClient, rightsId: clr.Reference[RightsId]) -> Result: ...
    # Skipped GetRightsId due to it being static, abstract and generic.

    GetRightsId : GetRightsId_MethodGroup
    class GetRightsId_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, rightsId: clr.Reference[RightsId], path: U8Span) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, rightsId: clr.Reference[RightsId], programId: ProgramId, storageId: StorageId) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, rightsId: clr.Reference[RightsId], keyGeneration: clr.Reference[int], path: U8Span) -> Result:...



class SaveData(abc.ABC):
    @staticmethod
    def EnsureSaveDataImpl(fs: FileSystemClientImpl, userId: UserId, saveDataSize: int, saveDataJournalSize: int, extendIfNeeded: bool) -> Result: ...
    @staticmethod
    def MountSaveDataImpl(fs: FileSystemClientImpl, mountName: U8Span, userId: UserId) -> Result: ...
    @staticmethod
    def MountSaveDataInternalStorage(fs: FileSystemClient, mountName: U8Span, spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @staticmethod
    def MountSaveDataReadOnly(fs: FileSystemClient, mountName: U8Span, applicationId: ApplicationId, userId: UserId) -> Result: ...
    @staticmethod
    def MountTemporaryStorage(fs: FileSystemClient, mountName: U8Span) -> Result: ...
    @staticmethod
    def OpenSaveDataInternalStorageFileSystem(fs: FileSystemClient, outFileSystem: clr.Reference[UniqueRef_1[IFileSystem]], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    # Skipped IsSaveDataExisting due to it being static, abstract and generic.

    IsSaveDataExisting : IsSaveDataExisting_MethodGroup
    class IsSaveDataExisting_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, exists: clr.Reference[bool], userId: UserId) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, exists: clr.Reference[bool], applicationId: ApplicationId, userId: UserId) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, exists: clr.Reference[bool], applicationId: ApplicationId, type: SaveDataType, userId: UserId) -> Result:...

    # Skipped MountCacheStorage due to it being static, abstract and generic.

    MountCacheStorage : MountCacheStorage_MethodGroup
    class MountCacheStorage_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, index: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, applicationId: ApplicationId) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, applicationId: ApplicationId, index: int) -> Result:...

    # Skipped MountSaveData due to it being static, abstract and generic.

    MountSaveData : MountSaveData_MethodGroup
    class MountSaveData_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, userId: UserId) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, applicationId: ApplicationId, userId: UserId) -> Result:...



class SaveDataForDebug(abc.ABC):
    @staticmethod
    def EnsureSaveDataForDebug(fs: FileSystemClient, saveDataSize: int, saveDataJournalSize: int) -> Result: ...
    @staticmethod
    def MountSaveDataForDebug(fs: FileSystemClient, mountName: U8Span) -> Result: ...
    @staticmethod
    def SetSaveDataRootPath(fs: FileSystemClient, path: U8Span) -> None: ...
    @staticmethod
    def UnsetSaveDataRootPath(fs: FileSystemClient) -> None: ...


class SaveDataManagement(abc.ABC):
    @staticmethod
    def CloseCacheStorageList(fs: FileSystemClient, handle: CacheStorageListHandle) -> None: ...
    @staticmethod
    def DeleteCacheStorage(fs: FileSystemClient, index: int) -> Result: ...
    @staticmethod
    def DeleteDeviceSaveData(fs: FileSystemClient, applicationId: ApplicationId) -> Result: ...
    @staticmethod
    def DeleteSystemSaveData(fs: FileSystemClient, spaceId: SaveDataSpaceId, saveDataId: int, userId: UserId) -> Result: ...
    @staticmethod
    def DisableAutoSaveDataCreation(fs: FileSystemClient) -> None: ...
    @staticmethod
    def GetCacheStorageSize(fs: FileSystemClient, saveSize: clr.Reference[int], journalSize: clr.Reference[int], index: int) -> Result: ...
    @staticmethod
    def GetDeviceSaveDataSize(fs: FileSystemClient, saveSize: clr.Reference[int], journalSize: clr.Reference[int], applicationId: ApplicationId) -> Result: ...
    @staticmethod
    def GetSaveDataCommitId(fs: FileSystemClient, commitId: clr.Reference[int], spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    @staticmethod
    def GetSaveDataRestoreFlag(fs: FileSystemClient, isRestoreFlagSet: clr.Reference[bool], mountName: U8Span) -> Result: ...
    @staticmethod
    def GetSystemSaveDataFlags(fs: FileSystemClient, flags: clr.Reference[SaveDataFlags], spaceId: SaveDataSpaceId, saveDataId: int, userId: UserId) -> Result: ...
    @staticmethod
    def ListApplicationAccessibleSaveDataOwnerId(fs: FileSystemClient, readCount: clr.Reference[int], idBuffer: Span_1[ApplicationId], applicationId: ApplicationId, programIndex: int, startIndex: int) -> Result: ...
    @staticmethod
    def OpenCacheStorageList(fs: FileSystemClient, handle: clr.Reference[CacheStorageListHandle]) -> Result: ...
    @staticmethod
    def ReadCacheStorageList(fs: FileSystemClient, storageInfoReadCount: clr.Reference[int], storageInfoBuffer: Span_1[CacheStorageInfo], handle: CacheStorageListHandle) -> Result: ...
    @staticmethod
    def ReadSaveDataIteratorSaveDataInfo(fs: FileSystemClientImpl, readCount: clr.Reference[int], buffer: Span_1[SaveDataInfo], iterator: clr.Reference[SaveDataIterator]) -> Result: ...
    @staticmethod
    def RegisterSaveDataAtomicDeletion(fs: FileSystemClient, saveDataIdList: ReadOnlySpan_1[int]) -> Result: ...
    @staticmethod
    def SetSaveDataCommitId(fs: FileSystemClient, spaceId: SaveDataSpaceId, saveDataId: int, commitId: int) -> Result: ...
    @staticmethod
    def SetSaveDataTimeStamp(fs: FileSystemClient, spaceId: SaveDataSpaceId, saveDataId: int, timeStamp: PosixTime) -> Result: ...
    @staticmethod
    def SetSystemSaveDataFlags(fs: FileSystemClient, spaceId: SaveDataSpaceId, saveDataId: int, userId: UserId, flags: SaveDataFlags) -> Result: ...
    @staticmethod
    def UpdateSaveDataMacForDebug(fs: FileSystemClient, spaceId: SaveDataSpaceId, saveDataId: int) -> Result: ...
    # Skipped CorruptSaveDataForDebug due to it being static, abstract and generic.

    CorruptSaveDataForDebug : CorruptSaveDataForDebug_MethodGroup
    class CorruptSaveDataForDebug_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, spaceId: SaveDataSpaceId, saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, spaceId: SaveDataSpaceId, saveDataId: int, offset: int) -> Result:...

    # Skipped CreateBcatSaveData due to it being static, abstract and generic.

    CreateBcatSaveData : CreateBcatSaveData_MethodGroup
    class CreateBcatSaveData_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, applicationId: ApplicationId, size: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, applicationId: ApplicationId, size: int) -> Result:...

    # Skipped CreateCacheStorage due to it being static, abstract and generic.

    CreateCacheStorage : CreateCacheStorage_MethodGroup
    class CreateCacheStorage_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, applicationId: ApplicationId, ownerId: int, size: int, journalSize: int, flags: SaveDataFlags) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, applicationId: ApplicationId, spaceId: SaveDataSpaceId, ownerId: int, size: int, journalSize: int, flags: SaveDataFlags) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, applicationId: ApplicationId, spaceId: SaveDataSpaceId, ownerId: int, index: int, size: int, journalSize: int, flags: SaveDataFlags) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, applicationId: ApplicationId, spaceId: SaveDataSpaceId, ownerId: int, index: int, size: int, journalSize: int, flags: SaveDataFlags) -> Result:...

    # Skipped CreateDeviceSaveData due to it being static, abstract and generic.

    CreateDeviceSaveData : CreateDeviceSaveData_MethodGroup
    class CreateDeviceSaveData_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, applicationId: ApplicationId, ownerId: int, size: int, journalSize: int, flags: SaveDataFlags) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, applicationId: ApplicationId, ownerId: int, size: int, journalSize: int, flags: SaveDataFlags) -> Result:...

    # Skipped CreateSaveData due to it being static, abstract and generic.

    CreateSaveData : CreateSaveData_MethodGroup
    class CreateSaveData_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, attribute: clr.Reference[SaveDataAttribute], creationInfo: clr.Reference[SaveDataCreationInfo], metaInfo: clr.Reference[SaveDataMetaInfo], hashSalt: clr.Reference[HashSalt]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, applicationId: ApplicationId, userId: UserId, ownerId: int, size: int, journalSize: int, flags: SaveDataFlags) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, applicationId: ApplicationId, userId: UserId, ownerId: int, size: int, journalSize: int, flags: SaveDataFlags) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, applicationId: ApplicationId, userId: UserId, ownerId: int, size: int, journalSize: int, hashSalt: clr.Reference[HashSalt], flags: SaveDataFlags) -> Result:...

    # Skipped CreateSystemSaveData due to it being static, abstract and generic.

    CreateSystemSaveData : CreateSystemSaveData_MethodGroup
    class CreateSystemSaveData_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, saveDataId: int, size: int, journalSize: int, flags: SaveDataFlags) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, saveDataId: int, ownerId: int, size: int, journalSize: int, flags: SaveDataFlags) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, saveDataId: int, userId: UserId, size: int, journalSize: int, flags: SaveDataFlags) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, saveDataId: int, userId: UserId, ownerId: int, size: int, journalSize: int, flags: SaveDataFlags) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, spaceId: SaveDataSpaceId, saveDataId: int, ownerId: int, size: int, journalSize: int, flags: SaveDataFlags) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, spaceId: SaveDataSpaceId, saveDataId: int, ownerId: int, size: int, journalSize: int, flags: SaveDataFlags, formatType: SaveDataFormatType) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, spaceId: SaveDataSpaceId, saveDataId: int, userId: UserId, ownerId: int, size: int, journalSize: int, flags: SaveDataFlags) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, spaceId: SaveDataSpaceId, saveDataId: int, userId: UserId, ownerId: int, size: int, journalSize: int, flags: SaveDataFlags, formatType: SaveDataFormatType) -> Result:...

    # Skipped CreateTemporaryStorage due to it being static, abstract and generic.

    CreateTemporaryStorage : CreateTemporaryStorage_MethodGroup
    class CreateTemporaryStorage_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, applicationId: ApplicationId, ownerId: int, size: int, flags: SaveDataFlags) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, applicationId: ApplicationId, ownerId: int, size: int, flags: SaveDataFlags) -> Result:...

    # Skipped DeleteSaveData due to it being static, abstract and generic.

    DeleteSaveData : DeleteSaveData_MethodGroup
    class DeleteSaveData_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, spaceId: SaveDataSpaceId, saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, spaceId: SaveDataSpaceId, saveDataId: int) -> Result:...

    # Skipped ExtendSaveData due to it being static, abstract and generic.

    ExtendSaveData : ExtendSaveData_MethodGroup
    class ExtendSaveData_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, saveDataId: int, saveDataSize: int, journalSize: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, spaceId: SaveDataSpaceId, saveDataId: int, saveDataSize: int, journalSize: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, spaceId: SaveDataSpaceId, saveDataId: int, saveDataSize: int, journalSize: int) -> Result:...

    # Skipped FindSaveDataWithFilter due to it being static, abstract and generic.

    FindSaveDataWithFilter : FindSaveDataWithFilter_MethodGroup
    class FindSaveDataWithFilter_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, saveInfo: clr.Reference[SaveDataInfo], spaceId: SaveDataSpaceId, filter: clr.Reference[SaveDataFilter]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, info: clr.Reference[SaveDataInfo], spaceId: SaveDataSpaceId, filter: clr.Reference[SaveDataFilter]) -> Result:...

    # Skipped GetSaveDataAvailableSize due to it being static, abstract and generic.

    GetSaveDataAvailableSize : GetSaveDataAvailableSize_MethodGroup
    class GetSaveDataAvailableSize_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, availableSize: clr.Reference[int], saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, availableSize: clr.Reference[int], saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, availableSize: clr.Reference[int], spaceId: SaveDataSpaceId, saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, availableSize: clr.Reference[int], spaceId: SaveDataSpaceId, saveDataId: int) -> Result:...

    # Skipped GetSaveDataFlags due to it being static, abstract and generic.

    GetSaveDataFlags : GetSaveDataFlags_MethodGroup
    class GetSaveDataFlags_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, flags: clr.Reference[SaveDataFlags], saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, flags: clr.Reference[SaveDataFlags], spaceId: SaveDataSpaceId, saveDataId: int) -> Result:...

    # Skipped GetSaveDataJournalSize due to it being static, abstract and generic.

    GetSaveDataJournalSize : GetSaveDataJournalSize_MethodGroup
    class GetSaveDataJournalSize_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, journalSize: clr.Reference[int], saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, journalSize: clr.Reference[int], saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, journalSize: clr.Reference[int], spaceId: SaveDataSpaceId, saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, journalSize: clr.Reference[int], spaceId: SaveDataSpaceId, saveDataId: int) -> Result:...

    # Skipped GetSaveDataOwnerId due to it being static, abstract and generic.

    GetSaveDataOwnerId : GetSaveDataOwnerId_MethodGroup
    class GetSaveDataOwnerId_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, ownerId: clr.Reference[int], saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, ownerId: clr.Reference[int], spaceId: SaveDataSpaceId, saveDataId: int) -> Result:...

    # Skipped GetSaveDataTimeStamp due to it being static, abstract and generic.

    GetSaveDataTimeStamp : GetSaveDataTimeStamp_MethodGroup
    class GetSaveDataTimeStamp_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, timeStamp: clr.Reference[PosixTime], saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, timeStamp: clr.Reference[PosixTime], spaceId: SaveDataSpaceId, saveDataId: int) -> Result:...

    # Skipped OpenSaveDataIterator due to it being static, abstract and generic.

    OpenSaveDataIterator : OpenSaveDataIterator_MethodGroup
    class OpenSaveDataIterator_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, outIterator: clr.Reference[UniqueRef_1[SaveDataIterator]], spaceId: SaveDataSpaceId) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, outIterator: clr.Reference[UniqueRef_1[SaveDataIterator]], spaceId: SaveDataSpaceId) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, outIterator: clr.Reference[UniqueRef_1[SaveDataIterator]], spaceId: SaveDataSpaceId, filter: clr.Reference[SaveDataFilter]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, outIterator: clr.Reference[UniqueRef_1[SaveDataIterator]], spaceId: SaveDataSpaceId, filter: clr.Reference[SaveDataFilter]) -> Result:...

    # Skipped QuerySaveDataInternalStorageTotalSize due to it being static, abstract and generic.

    QuerySaveDataInternalStorageTotalSize : QuerySaveDataInternalStorageTotalSize_MethodGroup
    class QuerySaveDataInternalStorageTotalSize_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, size: clr.Reference[int], spaceId: SaveDataSpaceId, saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, size: clr.Reference[int], spaceId: SaveDataSpaceId, saveDataId: int) -> Result:...

    # Skipped QuerySaveDataTotalSize due to it being static, abstract and generic.

    QuerySaveDataTotalSize : QuerySaveDataTotalSize_MethodGroup
    class QuerySaveDataTotalSize_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, totalSize: clr.Reference[int], saveDataSize: int, saveDataJournalSize: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, totalSize: clr.Reference[int], saveDataSize: int, saveDataJournalSize: int) -> Result:...

    # Skipped ReadSaveDataFileSystemExtraData due to it being static, abstract and generic.

    ReadSaveDataFileSystemExtraData : ReadSaveDataFileSystemExtraData_MethodGroup
    class ReadSaveDataFileSystemExtraData_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, extraData: clr.Reference[SaveDataExtraData], saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, extraData: clr.Reference[SaveDataExtraData], spaceId: SaveDataSpaceId, saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, extraData: clr.Reference[SaveDataExtraData], spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, extraData: clr.Reference[SaveDataExtraData], spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute], extraDataMask: clr.Reference[SaveDataExtraData]) -> Result:...

    # Skipped SetSaveDataFlags due to it being static, abstract and generic.

    SetSaveDataFlags : SetSaveDataFlags_MethodGroup
    class SetSaveDataFlags_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, saveDataId: int, flags: SaveDataFlags) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, saveDataId: int, spaceId: SaveDataSpaceId, flags: SaveDataFlags) -> Result:...

    # Skipped VerifySaveData due to it being static, abstract and generic.

    VerifySaveData : VerifySaveData_MethodGroup
    class VerifySaveData_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, isValid: clr.Reference[bool], saveDataId: int, workBuffer: Span_1[int]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, isValid: clr.Reference[bool], spaceId: SaveDataSpaceId, saveDataId: int, workBuffer: Span_1[int]) -> Result:...

    # Skipped WriteSaveDataFileSystemExtraData due to it being static, abstract and generic.

    WriteSaveDataFileSystemExtraData : WriteSaveDataFileSystemExtraData_MethodGroup
    class WriteSaveDataFileSystemExtraData_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, spaceId: SaveDataSpaceId, saveDataId: int, extraData: clr.Reference[SaveDataExtraData]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, spaceId: SaveDataSpaceId, saveDataId: int, extraData: clr.Reference[SaveDataExtraData], extraDataMask: clr.Reference[SaveDataExtraData]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, spaceId: SaveDataSpaceId, attribute: clr.Reference[SaveDataAttribute], extraData: clr.Reference[SaveDataExtraData], extraDataMask: clr.Reference[SaveDataExtraData]) -> Result:...



class SaveDataTransferVersion2Shim(abc.ABC):
    @staticmethod
    def GetCountOfApplicationAccessibleSaveDataOwnerId(fs: FileSystemClient, outCount: clr.Reference[int], applicationId: ApplicationId, programIndex: int) -> Result: ...
    @staticmethod
    def GetOccupiedWorkSpaceSizeForCloudBackUp(fs: FileSystemClient, outSize: clr.Reference[int]) -> Result: ...
    # Skipped OpenSaveDataTransferProhibiterForCloudBackUp due to it being static, abstract and generic.

    OpenSaveDataTransferProhibiterForCloudBackUp : OpenSaveDataTransferProhibiterForCloudBackUp_MethodGroup
    class OpenSaveDataTransferProhibiterForCloudBackUp_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, outProhibiter: clr.Reference[UniqueRef_1[SaveDataTransferProhibiterForCloudBackUp]], applicationId: ApplicationId) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, outProhibiters: Span_1[UniqueRef_1[SaveDataTransferProhibiterForCloudBackUp]], applicationIds: ReadOnlySpan_1[ApplicationId]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, outProhibiter: clr.Reference[UniqueRef_1[SaveDataTransferProhibiterForCloudBackUp]], applicationId: ApplicationId) -> Result:...



class SdCard(abc.ABC):
    @staticmethod
    def ClearSdCardSimulationEvent(fs: FileSystemClient) -> Result: ...
    @staticmethod
    def FormatSdCard(fs: FileSystemClient) -> Result: ...
    @staticmethod
    def FormatSdCardDryRun(fs: FileSystemClient) -> Result: ...
    @staticmethod
    def GetAndClearMmcErrorInfo(fs: FileSystemClient, outErrorInfo: clr.Reference[StorageErrorInfo], outLogSize: clr.Reference[int], logBuffer: Span_1[int]) -> Result: ...
    @staticmethod
    def GetSdCardCid(fs: FileSystemClient, outCidBuffer: Span_1[int]) -> Result: ...
    @staticmethod
    def GetSdCardProtectedAreaSize(fs: FileSystemClient, outSize: clr.Reference[int]) -> Result: ...
    @staticmethod
    def GetSdCardSpeedMode(fs: FileSystemClient, outMode: clr.Reference[SdCardSpeedMode]) -> Result: ...
    @staticmethod
    def GetSdCardUserAreaSize(fs: FileSystemClient, outSize: clr.Reference[int]) -> Result: ...
    @staticmethod
    def IsExFatSupported(fs: FileSystemClient) -> bool: ...
    @staticmethod
    def IsSdCardAccessible(fs: FileSystemClient) -> bool: ...
    @staticmethod
    def IsSdCardInserted(fs: FileSystemClient) -> bool: ...
    @staticmethod
    def MountSdCard(fs: FileSystemClient, mountName: U8Span) -> Result: ...
    @staticmethod
    def MountSdCardForDebug(fs: FileSystemClient, mountName: U8Span) -> Result: ...
    @staticmethod
    def SetSdCardEncryptionSeed(fs: FileSystemClient, seed: clr.Reference[EncryptionSeed]) -> Result: ...
    @staticmethod
    def SimulateSdCardDetectionEvent(fs: FileSystemClient, mode: SimulatingDeviceDetectionMode, signalEvent: bool) -> Result: ...
    # Skipped SetSdCardAccessibility due to it being static, abstract and generic.

    SetSdCardAccessibility : SetSdCardAccessibility_MethodGroup
    class SetSdCardAccessibility_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, isAccessible: bool) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, isAccessible: bool) -> None:...

    # Skipped SetSdCardSimulationEvent due to it being static, abstract and generic.

    SetSdCardSimulationEvent : SetSdCardSimulationEvent_MethodGroup
    class SetSdCardSimulationEvent_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, simulatedOperationType: SimulatingDeviceTargetOperation, simulatedFailureType: SimulatingDeviceAccessFailureEventType) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, simulatedOperationType: SimulatingDeviceTargetOperation, simulatedFailureType: SimulatingDeviceAccessFailureEventType, autoClearEvent: bool) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, simulatedOperationType: SimulatingDeviceTargetOperation, failureResult: Result, autoClearEvent: bool) -> Result:...



class SdmmcControl(abc.ABC):
    @staticmethod
    def GetSdmmcConnectionStatus(fs: FileSystemClient, outSpeedMode: clr.Reference[SdmmcSpeedMode], outBusWidth: clr.Reference[SdmmcBusWidth], port: SdmmcPort) -> Result: ...
    @staticmethod
    def ResumeSdmmcControl(fs: FileSystemClient) -> Result: ...
    @staticmethod
    def SuspendSdmmcControl(fs: FileSystemClient) -> Result: ...


class SignedSystemPartition(abc.ABC):
    @staticmethod
    def IsValidSignedSystemPartitionOnSdCard(fs: FileSystemClient, path: U8Span) -> bool: ...


class SpeedEmulationShim(abc.ABC):
    @staticmethod
    def GetSpeedEmulationMode(fs: FileSystemClient, outMode: clr.Reference[SpeedEmulationMode]) -> Result: ...
    @staticmethod
    def SetSpeedEmulationMode(fs: FileSystemClient, mode: SpeedEmulationMode) -> Result: ...


class SystemSaveData(abc.ABC):
    # Skipped MountSystemSaveData due to it being static, abstract and generic.

    MountSystemSaveData : MountSystemSaveData_MethodGroup
    class MountSystemSaveData_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, saveDataId: int, userId: UserId) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, spaceId: SaveDataSpaceId, saveDataId: int) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, spaceId: SaveDataSpaceId, saveDataId: int, userId: UserId) -> Result:...


