import typing, clr, abc
import LibHac.FsSrv.Sf
from LibHac import Result
from LibHac.Fs import Path, NxFileAttributes, DirectoryEntry, WriteOption, OperationId, ReadOption, FileTimeStampRaw, DirectoryEntryType, OpenMode, SaveDataAttribute, FileSystemClientImpl, FileSystemClient, IStorage, DirectoryHandle, FileHandle, QueryRangeInfo, Range, UnpreparedRangeInfo, CommitOption, UnpreparedFileInformation
from System import IDisposable, Span_1, ReadOnlySpan_1
from LibHac.Common import UniqueRef_1, U8Span, SharedRef_1, U8SpanMutable, U8String

class CreateFileOptions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : CreateFileOptions # 0
    CreateConcatenationFile : CreateFileOptions # 1


class IAttributeFileSystem(IFileSystem):
    def CreateDirectory(self, path: clr.Reference[Path], archiveAttribute: NxFileAttributes) -> Result: ...
    def GetFileAttributes(self, attributes: clr.Reference[NxFileAttributes], path: clr.Reference[Path]) -> Result: ...
    def GetFileSize(self, fileSize: clr.Reference[int], path: clr.Reference[Path]) -> Result: ...
    def SetFileAttributes(self, path: clr.Reference[Path], attributes: NxFileAttributes) -> Result: ...


class ICommonMountNameGenerator(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def GenerateCommonMountName(self, nameBuffer: Span_1[int]) -> Result: ...


class IDirectory(IDisposable, abc.ABC):
    def Dispose(self) -> None: ...
    def GetEntryCount(self, entryCount: clr.Reference[int]) -> Result: ...
    def Read(self, entriesRead: clr.Reference[int], entryBuffer: Span_1[DirectoryEntry]) -> Result: ...


class IFile(IDisposable, abc.ABC):
    def Dispose(self) -> None: ...
    def Flush(self) -> Result: ...
    def GetSize(self, size: clr.Reference[int]) -> Result: ...
    def SetSize(self, size: int) -> Result: ...
    def Write(self, offset: int, source: ReadOnlySpan_1[int], option: clr.Reference[WriteOption]) -> Result: ...
    # Skipped OperateRange due to it being static, abstract and generic.

    OperateRange : OperateRange_MethodGroup
    class OperateRange_MethodGroup:
        @typing.overload
        def __call__(self, operationId: OperationId, offset: int, size: int) -> Result:...
        @typing.overload
        def __call__(self, outBuffer: Span_1[int], operationId: OperationId, offset: int, size: int, inBuffer: ReadOnlySpan_1[int]) -> Result:...

    # Skipped Read due to it being static, abstract and generic.

    Read : Read_MethodGroup
    class Read_MethodGroup:
        @typing.overload
        def __call__(self, bytesRead: clr.Reference[int], offset: int, destination: Span_1[int]) -> Result:...
        @typing.overload
        def __call__(self, bytesRead: clr.Reference[int], offset: int, destination: Span_1[int], option: clr.Reference[ReadOption]) -> Result:...



class IFileSystem(IDisposable, abc.ABC):
    def CleanDirectoryRecursively(self, path: clr.Reference[Path]) -> Result: ...
    def Commit(self) -> Result: ...
    def CommitProvisionally(self, counter: int) -> Result: ...
    def CreateDirectory(self, path: clr.Reference[Path]) -> Result: ...
    def DeleteDirectory(self, path: clr.Reference[Path]) -> Result: ...
    def DeleteDirectoryRecursively(self, path: clr.Reference[Path]) -> Result: ...
    def DeleteFile(self, path: clr.Reference[Path]) -> Result: ...
    def Dispose(self) -> None: ...
    def Flush(self) -> Result: ...
    def GetFileTimeStampRaw(self, timeStamp: clr.Reference[FileTimeStampRaw], path: clr.Reference[Path]) -> Result: ...
    def GetFreeSpaceSize(self, freeSpace: clr.Reference[int], path: clr.Reference[Path]) -> Result: ...
    def GetTotalSpaceSize(self, totalSpace: clr.Reference[int], path: clr.Reference[Path]) -> Result: ...
    def OpenDirectory(self, outDirectory: clr.Reference[UniqueRef_1[IDirectory]], path: clr.Reference[Path], mode: OpenDirectoryMode) -> Result: ...
    def QueryEntry(self, outBuffer: Span_1[int], inBuffer: ReadOnlySpan_1[int], queryId: QueryId, path: clr.Reference[Path]) -> Result: ...
    def RenameDirectory(self, currentPath: clr.Reference[Path], newPath: clr.Reference[Path]) -> Result: ...
    def RenameFile(self, currentPath: clr.Reference[Path], newPath: clr.Reference[Path]) -> Result: ...
    def Rollback(self) -> Result: ...
    # Skipped CreateFile due to it being static, abstract and generic.

    CreateFile : CreateFile_MethodGroup
    class CreateFile_MethodGroup:
        @typing.overload
        def __call__(self, path: clr.Reference[Path], size: int) -> Result:...
        @typing.overload
        def __call__(self, path: clr.Reference[Path], size: int, option: CreateFileOptions) -> Result:...

    # Skipped GetEntryType due to it being static, abstract and generic.

    GetEntryType : GetEntryType_MethodGroup
    class GetEntryType_MethodGroup:
        @typing.overload
        def __call__(self, entryType: clr.Reference[DirectoryEntryType], path: U8Span) -> Result:...
        @typing.overload
        def __call__(self, entryType: clr.Reference[DirectoryEntryType], path: clr.Reference[Path]) -> Result:...

    # Skipped OpenFile due to it being static, abstract and generic.

    OpenFile : OpenFile_MethodGroup
    class OpenFile_MethodGroup:
        @typing.overload
        def __call__(self, file: clr.Reference[UniqueRef_1[IFile]], path: U8Span, mode: OpenMode) -> Result:...
        @typing.overload
        def __call__(self, file: clr.Reference[UniqueRef_1[IFile]], path: clr.Reference[Path], mode: OpenMode) -> Result:...



class IMultiCommitTarget(typing.Protocol):
    @abc.abstractmethod
    def GetMultiCommitTarget(self) -> SharedRef_1[LibHac.FsSrv.Sf.IFileSystem]: ...


class ISaveDataAttributeGetter(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def GetSaveDataAttribute(self, attribute: clr.Reference[SaveDataAttribute]) -> Result: ...


class IUnmountHookInvoker(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def Invoke(self) -> None: ...


class MountUtility(abc.ABC):
    @staticmethod
    def CheckMountName(fs: FileSystemClientImpl, name: U8Span) -> Result: ...
    @staticmethod
    def CheckMountNameAcceptingReservedMountName(fs: FileSystemClientImpl, name: U8Span) -> Result: ...
    @staticmethod
    def ConvertToFsCommonPath(fs: FileSystemClient, commonPathBuffer: U8SpanMutable, path: U8Span) -> Result: ...
    @staticmethod
    def IsUsedReservedMountName(fs: FileSystemClientImpl, name: U8Span) -> bool: ...
    @staticmethod
    def IsValidMountName(fs: FileSystemClientImpl, name: U8Span) -> bool: ...
    # Skipped IsMounted due to it being static, abstract and generic.

    IsMounted : IsMounted_MethodGroup
    class IsMounted_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span) -> bool:...
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, isMounted: clr.Reference[bool], mountName: U8Span) -> Result:...

    # Skipped Unmount due to it being static, abstract and generic.

    Unmount : Unmount_MethodGroup
    class Unmount_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClientImpl, mountName: U8Span) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span) -> None:...



class OpenDirectoryMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Directory : OpenDirectoryMode # 1
    File : OpenDirectoryMode # 2
    All : OpenDirectoryMode # 3
    NoFileSize : OpenDirectoryMode # -2147483648


class QueryId(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SetConcatenationFileAttribute : QueryId # 0
    UpdateMac : QueryId # 1
    IsSignedSystemPartition : QueryId # 2
    QueryUnpreparedFileInformation : QueryId # 3


class Registrar(abc.ABC):
    @staticmethod
    def Unregister(fs: FileSystemClient, name: U8Span) -> None: ...
    # Skipped Register due to it being static, abstract and generic.

    Register : Register_MethodGroup
    class Register_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, name: U8Span, fileSystem: clr.Reference[UniqueRef_1[IFileSystem]]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, name: U8Span, fileSystem: clr.Reference[UniqueRef_1[IFileSystem]], mountNameGenerator: clr.Reference[UniqueRef_1[ICommonMountNameGenerator]]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, name: U8Span, multiCommitTarget: IMultiCommitTarget, fileSystem: clr.Reference[UniqueRef_1[IFileSystem]], mountNameGenerator: clr.Reference[UniqueRef_1[ICommonMountNameGenerator]], useDataCache: bool, storageForPurgeFileDataCache: IStorage, usePathCache: bool) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, name: U8Span, multiCommitTarget: IMultiCommitTarget, fileSystem: clr.Reference[UniqueRef_1[IFileSystem]], mountNameGenerator: clr.Reference[UniqueRef_1[ICommonMountNameGenerator]], useDataCache: bool, storageForPurgeFileDataCache: IStorage, usePathCache: bool, unmountHook: clr.Reference[UniqueRef_1[IUnmountHookInvoker]]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, name: U8Span, multiCommitTarget: IMultiCommitTarget, fileSystem: clr.Reference[UniqueRef_1[IFileSystem]], mountNameGenerator: clr.Reference[UniqueRef_1[ICommonMountNameGenerator]], saveAttributeGetter: clr.Reference[UniqueRef_1[ISaveDataAttributeGetter]], useDataCache: bool, storageForPurgeFileDataCache: IStorage, usePathCache: bool) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, name: U8Span, multiCommitTarget: IMultiCommitTarget, fileSystem: clr.Reference[UniqueRef_1[IFileSystem]], mountNameGenerator: clr.Reference[UniqueRef_1[ICommonMountNameGenerator]], saveAttributeGetter: clr.Reference[UniqueRef_1[ISaveDataAttributeGetter]], useDataCache: bool, storageForPurgeFileDataCache: IStorage, usePathCache: bool, unmountHook: clr.Reference[UniqueRef_1[IUnmountHookInvoker]]) -> Result:...



class UserDirectory(abc.ABC):
    @staticmethod
    def CloseDirectory(fs: FileSystemClient, handle: DirectoryHandle) -> None: ...
    @staticmethod
    def GetDirectoryEntryCount(fs: FileSystemClient, count: clr.Reference[int], handle: DirectoryHandle) -> Result: ...
    @staticmethod
    def ReadDirectory(fs: FileSystemClient, entriesRead: clr.Reference[int], entryBuffer: Span_1[DirectoryEntry], handle: DirectoryHandle) -> Result: ...


class UserFile(abc.ABC):
    @staticmethod
    def CloseFile(fs: FileSystemClient, handle: FileHandle) -> None: ...
    @staticmethod
    def FlushFile(fs: FileSystemClient, handle: FileHandle) -> Result: ...
    @staticmethod
    def GetFileOpenMode(fs: FileSystemClient, handle: FileHandle) -> OpenMode: ...
    @staticmethod
    def GetFileSize(fs: FileSystemClient, size: clr.Reference[int], handle: FileHandle) -> Result: ...
    @staticmethod
    def InvalidateCache(fs: FileSystemClient, handle: FileHandle) -> Result: ...
    @staticmethod
    def QueryLazyLoadCompletionRate(fs: FileSystemClient, completionRate: clr.Reference[int], handle: FileHandle, guideIndex: int) -> Result: ...
    @staticmethod
    def QueryRange(fs: FileSystemClient, rangeInfo: clr.Reference[QueryRangeInfo], handle: FileHandle, offset: int, size: int) -> Result: ...
    @staticmethod
    def QueryUnpreparedRange(fs: FileSystemClient, unpreparedRange: clr.Reference[Range], handle: FileHandle) -> Result: ...
    @staticmethod
    def QueryUnpreparedRangeDetail(fs: FileSystemClient, unpreparedRangeInfo: clr.Reference[UnpreparedRangeInfo], handle: FileHandle) -> Result: ...
    @staticmethod
    def ReadyLazyLoadFileForciblyForDebug(fs: FileSystemClient, handle: FileHandle, offset: int, size: int) -> Result: ...
    @staticmethod
    def SetFileSize(fs: FileSystemClient, handle: FileHandle, size: int) -> Result: ...
    @staticmethod
    def WriteFile(fs: FileSystemClient, handle: FileHandle, offset: int, source: ReadOnlySpan_1[int], option: clr.Reference[WriteOption]) -> Result: ...
    # Skipped ReadFile due to it being static, abstract and generic.

    ReadFile : ReadFile_MethodGroup
    class ReadFile_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, handle: FileHandle, offset: int, destination: Span_1[int]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, handle: FileHandle, offset: int, destination: Span_1[int], option: clr.Reference[ReadOption]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, bytesRead: clr.Reference[int], handle: FileHandle, offset: int, destination: Span_1[int]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, bytesRead: clr.Reference[int], handle: FileHandle, offset: int, destination: Span_1[int], option: clr.Reference[ReadOption]) -> Result:...



class UserFileSystem(abc.ABC):
    @staticmethod
    def CleanDirectoryRecursively(fs: FileSystemClient, path: U8Span) -> Result: ...
    @staticmethod
    def CommitSaveData(fs: FileSystemClient, mountName: U8Span) -> Result: ...
    @staticmethod
    def CreateDirectory(fs: FileSystemClient, path: U8Span) -> Result: ...
    @staticmethod
    def CreateFile(fs: FileSystemClient, path: U8Span, size: int) -> Result: ...
    @staticmethod
    def DeleteDirectory(fs: FileSystemClient, path: U8Span) -> Result: ...
    @staticmethod
    def DeleteDirectoryRecursively(fs: FileSystemClient, path: U8Span) -> Result: ...
    @staticmethod
    def DeleteFile(fs: FileSystemClient, path: U8Span) -> Result: ...
    @staticmethod
    def GetEntryType(fs: FileSystemClient, type: clr.Reference[DirectoryEntryType], path: U8Span) -> Result: ...
    @staticmethod
    def GetFreeSpaceSize(fs: FileSystemClient, freeSpace: clr.Reference[int], path: U8Span) -> Result: ...
    @staticmethod
    def OpenDirectory(fs: FileSystemClient, handle: clr.Reference[DirectoryHandle], path: U8Span, mode: OpenDirectoryMode) -> Result: ...
    @staticmethod
    def RenameDirectory(fs: FileSystemClient, currentPath: U8Span, newPath: U8Span) -> Result: ...
    @staticmethod
    def RenameFile(fs: FileSystemClient, currentPath: U8Span, newPath: U8Span) -> Result: ...
    # Skipped Commit due to it being static, abstract and generic.

    Commit : Commit_MethodGroup
    class Commit_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountNames: ReadOnlySpan_1[U8String]) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, mountName: U8Span, option: CommitOption) -> Result:...

    # Skipped OpenFile due to it being static, abstract and generic.

    OpenFile : OpenFile_MethodGroup
    class OpenFile_MethodGroup:
        @typing.overload
        def __call__(self, fs: FileSystemClient, handle: clr.Reference[FileHandle], path: U8Span, mode: OpenMode) -> Result:...
        @typing.overload
        def __call__(self, fs: FileSystemClient, handle: clr.Reference[FileHandle], file: clr.Reference[UniqueRef_1[IFile]], mode: OpenMode) -> Result:...



class UserFileSystemForDebug(abc.ABC):
    @staticmethod
    def GetFileTimeStampRawForDebug(fs: FileSystemClient, timeStamp: clr.Reference[FileTimeStampRaw], path: U8Span) -> Result: ...


class UserFileSystemPrivate(abc.ABC):
    @staticmethod
    def CreateFile(fs: FileSystemClient, path: U8Span, size: int, option: CreateFileOptions) -> Result: ...
    @staticmethod
    def GetTotalSpaceSize(fs: FileSystemClient, totalSpace: clr.Reference[int], path: U8Span) -> Result: ...
    @staticmethod
    def QueryUnpreparedFileInformation(fs: FileSystemClient, info: clr.Reference[UnpreparedFileInformation], path: U8Span) -> Result: ...
    @staticmethod
    def SetConcatenationFileAttribute(fs: FileSystemClient, path: U8Span) -> Result: ...

