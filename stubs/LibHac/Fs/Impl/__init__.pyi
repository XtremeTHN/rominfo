import typing, clr, abc
from LibHac.Fs import FileSystemClientImpl, Priority, PriorityRaw, ImageDirectoryId, ContentStorageId, GameCardPartition, SaveDataSpaceId, SaveDataFormatType, ContentType, BisPartitionId, DirectoryEntryType, GameCardCompatibilityType, MountHostOption, ISaveDataChunkExporter, FileSystemClient, ISaveDataChunkImporter, ISaveDataChunkIterator, ISaveDataDivisionExporter, ISaveDataDivisionImporter
from LibHac.Common import U8Span, SharedRef_1, UniqueRef_1
from System import ReadOnlySpan_1, Span_1, IDisposable
from LibHac.Common.FixedArrays import Array28_1, Array4_1, Array32_1, Array16_1
from LibHac.Gc.Impl import MemoryCapacity, SelSec, KekIndex, AccessControl1ClockRate, FwVersion
from LibHac.FsSrv.Sf import ISaveDataChunkExporter, ISaveDataChunkImporter, ISaveDataChunkIterator, ISaveDataDivisionExporter, ISaveDataDivisionImporter
from LibHac import Result
from LibHac.Time import PosixTime
from System.Threading import ReaderWriterLockSlim

class AccessLogImpl(abc.ABC):
    @staticmethod
    def EnableFileSystemAccessorAccessLog(fs: FileSystemClientImpl, mountName: U8Span) -> None: ...


class AccessLogTarget(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : AccessLogTarget # 0
    Application : AccessLogTarget # 1
    System : AccessLogTarget # 2
    All : AccessLogTarget # 3


class CommonMountNames(abc.ABC):
    ReservedMountNamePrefixCharacter : str
    @classmethod
    @property
    def BisCalibrationFilePartitionMountName(cls) -> ReadOnlySpan_1[int]: ...
    @classmethod
    @property
    def BisSafeModePartitionMountName(cls) -> ReadOnlySpan_1[int]: ...
    @classmethod
    @property
    def BisSystemPartitionMountName(cls) -> ReadOnlySpan_1[int]: ...
    @classmethod
    @property
    def BisUserPartitionMountName(cls) -> ReadOnlySpan_1[int]: ...
    @classmethod
    @property
    def ContentStorageSdCardMountName(cls) -> ReadOnlySpan_1[int]: ...
    @classmethod
    @property
    def ContentStorageSystemMountName(cls) -> ReadOnlySpan_1[int]: ...
    @classmethod
    @property
    def ContentStorageUserMountName(cls) -> ReadOnlySpan_1[int]: ...
    @classmethod
    @property
    def GameCardFileSystemMountName(cls) -> ReadOnlySpan_1[int]: ...
    @classmethod
    @property
    def GameCardFileSystemMountNameNormalSuffix(cls) -> ReadOnlySpan_1[int]: ...
    @classmethod
    @property
    def GameCardFileSystemMountNameSecureSuffix(cls) -> ReadOnlySpan_1[int]: ...
    @classmethod
    @property
    def GameCardFileSystemMountNameUpdateSuffix(cls) -> ReadOnlySpan_1[int]: ...
    @classmethod
    @property
    def HostRootFileSystemMountName(cls) -> ReadOnlySpan_1[int]: ...
    @classmethod
    @property
    def RegisteredUpdatePartitionMountName(cls) -> ReadOnlySpan_1[int]: ...
    @classmethod
    @property
    def SdCardFileSystemMountName(cls) -> ReadOnlySpan_1[int]: ...
    @classmethod
    @property
    def SdCardNintendoRootDirectoryName(cls) -> ReadOnlySpan_1[int]: ...


class ExportReportInfo:
    CompressionRate : int
    DiffChunkCount : int
    DoubleDivisionDiffChunkCount : int
    HalfDivisionDiffChunkCount : int
    Reserved : Array28_1[int]


class FilePathHash:
    Data : Array4_1[int]


class FileRegion:
    def __init__(self, offset: int, size: int) -> None: ...
    Offset : int
    Size : int
    def ExpandAndAlign(self, alignment: int) -> FileRegion: ...
    def GetEndOffset(self) -> int: ...
    def GetEndRegionWithSizeLimit(self, size: int) -> FileRegion: ...
    @staticmethod
    def GetInclusion(region1: FileRegion, region2: FileRegion) -> FileRegion: ...
    @staticmethod
    def HasIntersection(region1: FileRegion, region2: FileRegion) -> bool: ...
    def Includes(self, other: FileRegion) -> bool: ...
    def Intersects(self, other: FileRegion) -> bool: ...
    def ShrinkAndAlign(self, alignment: int) -> FileRegion: ...
    # Skipped GetIntersection due to it being static, abstract and generic.

    GetIntersection : GetIntersection_MethodGroup
    class GetIntersection_MethodGroup:
        @typing.overload
        def __call__(self, other: FileRegion) -> FileRegion:...
        @typing.overload
        def __call__(self, region1: FileRegion, region2: FileRegion) -> FileRegion:...



class IdString:
    # Skipped ToString due to it being static, abstract and generic.

    ToString : ToString_MethodGroup
    class ToString_MethodGroup:
        @typing.overload
        def __call__(self, value: Priority) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: PriorityRaw) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: ImageDirectoryId) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: ContentStorageId) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: GameCardPartition) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: SaveDataSpaceId) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: SaveDataFormatType) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: ContentType) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: BisPartitionId) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: DirectoryEntryType) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: MemoryCapacity) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: SelSec) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: KekIndex) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: AccessControl1ClockRate) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: FwVersion) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: GameCardCompatibilityType) -> ReadOnlySpan_1[int]:...
        @typing.overload
        def __call__(self, value: MountHostOption) -> ReadOnlySpan_1[int]:...



class ImportReportInfo:
    CompressionRate : int
    DiffChunkCount : int
    DoubleDivisionDiffChunkCount : int
    HalfDivisionDiffChunkCount : int
    Reserved : Array28_1[int]


class InitialDataAad:
    Value : Array32_1[int]


class InitialDataMac:
    Value : Array16_1[int]


class KeySeed:
    Value : Array16_1[int]


class SaveDataChunkExporter(ISaveDataChunkExporter):
    def __init__(self, fs: FileSystemClient, baseInterface: clr.Reference[SharedRef_1[ISaveDataChunkExporter]]) -> None: ...
    def Dispose(self) -> None: ...
    def GetRestRawDataSize(self) -> int: ...
    def Pull(self, outPulledSize: clr.Reference[int], destination: Span_1[int]) -> Result: ...


class SaveDataChunkImporter(ISaveDataChunkImporter):
    def __init__(self, fs: FileSystemClient, baseInterface: clr.Reference[SharedRef_1[ISaveDataChunkImporter]]) -> None: ...
    def Dispose(self) -> None: ...
    def Push(self, source: ReadOnlySpan_1[int]) -> Result: ...


class SaveDataChunkIterator(ISaveDataChunkIterator):
    def __init__(self, fs: FileSystemClient, baseInterface: clr.Reference[SharedRef_1[ISaveDataChunkIterator]]) -> None: ...
    def Dispose(self) -> None: ...
    def GetId(self) -> int: ...
    def IsEnd(self) -> bool: ...
    def Next(self) -> None: ...


class SaveDataExporterVersion2(ISaveDataDivisionExporter):
    def __init__(self, fs: FileSystemClient, baseInterface: clr.Reference[SharedRef_1[ISaveDataDivisionExporter]]) -> None: ...
    def CancelExport(self) -> Result: ...
    def Dispose(self) -> None: ...
    def FinalizeExport(self) -> Result: ...
    def GetImportInitialDataAad(self, outInitialDataAad: clr.Reference[InitialDataAad]) -> Result: ...
    def GetInitialDataMac(self, outInitialDataMac: clr.Reference[InitialDataMac]) -> Result: ...
    def GetInitialDataMacKeyGeneration(self, outKeyGeneration: clr.Reference[int]) -> Result: ...
    def GetKeySeed(self, outKeySeed: clr.Reference[KeySeed]) -> Result: ...
    def GetReportInfo(self, outReportInfo: clr.Reference[ExportReportInfo]) -> Result: ...
    def GetSaveDataCommitId(self, outCommitId: clr.Reference[int]) -> Result: ...
    def GetSaveDataTimeStamp(self, outTimeStamp: clr.Reference[PosixTime]) -> Result: ...
    def OpenSaveDataChunkExporter(self, outExporter: clr.Reference[UniqueRef_1[ISaveDataChunkExporter]], chunkId: int) -> Result: ...
    def OpenSaveDataDiffChunkIterator(self, outIterator: clr.Reference[UniqueRef_1[ISaveDataChunkIterator]]) -> Result: ...
    def SetDivisionCount(self, divisionCount: int) -> Result: ...
    def SetExportInitialDataAad(self, initialDataAad: clr.Reference[InitialDataAad]) -> Result: ...
    def SuspendExport(self, outContext: clr.Reference[ISaveDataDivisionExporter.ExportContext]) -> Result: ...


class SaveDataImporterVersion2(ISaveDataDivisionImporter):
    def __init__(self, fs: FileSystemClient, baseInterface: clr.Reference[SharedRef_1[ISaveDataDivisionImporter]]) -> None: ...
    def CancelImport(self) -> Result: ...
    def Dispose(self) -> None: ...
    def FinalizeImport(self) -> Result: ...
    def FinalizeImportWithoutSwap(self) -> Result: ...
    def GetImportContext(self, outContext: clr.Reference[ISaveDataDivisionImporter.ImportContext]) -> Result: ...
    def GetImportInitialDataAad(self, outInitialDataAad: clr.Reference[InitialDataAad]) -> Result: ...
    def GetReportInfo(self, outReportInfo: clr.Reference[ImportReportInfo]) -> Result: ...
    def GetSaveDataCommitId(self, outCommitId: clr.Reference[int]) -> Result: ...
    def GetSaveDataTimeStamp(self, outTimeStamp: clr.Reference[PosixTime]) -> Result: ...
    def InitializeImport(self, remaining: clr.Reference[int], sizeToProcess: int) -> Result: ...
    def OpenSaveDataChunkImporter(self, outImporter: clr.Reference[UniqueRef_1[ISaveDataChunkImporter]], chunkId: int) -> Result: ...
    def OpenSaveDataDiffChunkIterator(self, outIterator: clr.Reference[UniqueRef_1[ISaveDataChunkIterator]]) -> Result: ...
    def SuspendImport(self) -> Result: ...


class SharedLock(IDisposable):
    def __init__(self, readerWriterLock: ReaderWriterLockSlim) -> None: ...
    def Dispose(self) -> None: ...


class UniqueLock(IDisposable):
    def __init__(self, readerWriterLock: ReaderWriterLockSlim) -> None: ...
    def Dispose(self) -> None: ...

