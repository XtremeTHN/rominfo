import typing, clr, abc
from System import IDisposable, ReadOnlySpan_1
from LibHac.Common import SharedRef_1
from LibHac import Result, HorizonClient
from LibHac.Sf import InArray_1
from LibHac.Ncm import ApplicationId, DataId, StorageId, ProgramId
from LibHac.Common.FixedArrays import Array768_1

class AddOnContentLocationResolver(IDisposable):
    def __init__(self, baseInterface: clr.Reference[SharedRef_1[IAddOnContentLocationResolver]]) -> None: ...
    def Dispose(self) -> None: ...
    def RefreshApplicationAddOnContent(self, ids: InArray_1[ApplicationId]) -> Result: ...
    def RegisterAddOnContentStorage(self, id: DataId, applicationId: ApplicationId, storageId: StorageId) -> Result: ...
    def ResolveAddOnContentPath(self, path: clr.Reference[Path], id: DataId) -> Result: ...
    def UnregisterAllAddOnContentPath(self) -> Result: ...
    def UnregisterApplicationAddOnContent(self, id: ApplicationId) -> Result: ...


class IAddOnContentLocationResolver(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def RefreshApplicationAddOnContent(self, ids: InArray_1[ApplicationId]) -> Result: ...
    @abc.abstractmethod
    def RegisterAddOnContentStorage(self, id: DataId, applicationId: ApplicationId, storageId: StorageId) -> Result: ...
    @abc.abstractmethod
    def ResolveAddOnContentPath(self, path: clr.Reference[Path], id: DataId) -> Result: ...
    @abc.abstractmethod
    def UnregisterAllAddOnContentPath(self) -> Result: ...
    @abc.abstractmethod
    def UnregisterApplicationAddOnContent(self, id: ApplicationId) -> Result: ...


class ILocationResolver(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def ClearApplicationRedirection(self, excludingIds: InArray_1[ProgramId]) -> Result: ...
    @abc.abstractmethod
    def EraseApplicationControlRedirection(self, id: ProgramId) -> Result: ...
    @abc.abstractmethod
    def EraseApplicationHtmlDocumentRedirection(self, id: ProgramId) -> Result: ...
    @abc.abstractmethod
    def EraseApplicationLegalInformationRedirection(self, id: ProgramId) -> Result: ...
    @abc.abstractmethod
    def EraseProgramRedirection(self, id: ProgramId) -> Result: ...
    @abc.abstractmethod
    def EraseProgramRedirectionForDebug(self, id: ProgramId) -> Result: ...
    @abc.abstractmethod
    def RedirectApplicationControlPath(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    @abc.abstractmethod
    def RedirectApplicationHtmlDocumentPath(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    @abc.abstractmethod
    def RedirectApplicationLegalInformationPath(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    @abc.abstractmethod
    def RedirectApplicationProgramPath(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    @abc.abstractmethod
    def RedirectApplicationProgramPathForDebug(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    @abc.abstractmethod
    def RedirectProgramPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    @abc.abstractmethod
    def RedirectProgramPathForDebug(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    @abc.abstractmethod
    def Refresh(self) -> Result: ...
    @abc.abstractmethod
    def ResolveApplicationControlPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    @abc.abstractmethod
    def ResolveApplicationHtmlDocumentPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    @abc.abstractmethod
    def ResolveApplicationLegalInformationPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    @abc.abstractmethod
    def ResolveDataPath(self, path: clr.Reference[Path], id: DataId) -> Result: ...
    @abc.abstractmethod
    def ResolveProgramPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    @abc.abstractmethod
    def ResolveProgramPathForDebug(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...


class ILocationResolverManager(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def OpenAddOnContentLocationResolver(self, outResolver: clr.Reference[SharedRef_1[IAddOnContentLocationResolver]]) -> Result: ...
    @abc.abstractmethod
    def OpenLocationResolver(self, outResolver: clr.Reference[SharedRef_1[ILocationResolver]], storageId: StorageId) -> Result: ...
    @abc.abstractmethod
    def OpenRegisteredLocationResolver(self, outResolver: clr.Reference[SharedRef_1[IRegisteredLocationResolver]]) -> Result: ...
    @abc.abstractmethod
    def RefreshLocationResolver(self, storageId: StorageId) -> Result: ...


class IRegisteredLocationResolver(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def RedirectHtmlDocumentPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    @abc.abstractmethod
    def RedirectProgramPath(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    @abc.abstractmethod
    def Refresh(self) -> Result: ...
    @abc.abstractmethod
    def RefreshExcluding(self, ids: ReadOnlySpan_1[ProgramId]) -> Result: ...
    @abc.abstractmethod
    def RegisterHtmlDocumentPath(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    @abc.abstractmethod
    def RegisterProgramPath(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    @abc.abstractmethod
    def ResolveHtmlDocumentPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    @abc.abstractmethod
    def ResolveProgramPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    @abc.abstractmethod
    def UnregisterHtmlDocumentPath(self, id: ProgramId) -> Result: ...
    @abc.abstractmethod
    def UnregisterProgramPath(self, id: ProgramId) -> Result: ...


class LocationResolver(IDisposable):
    def __init__(self, baseInterface: clr.Reference[SharedRef_1[ILocationResolver]]) -> None: ...
    def ClearApplicationRedirection(self, excludingIds: InArray_1[ProgramId]) -> Result: ...
    def Dispose(self) -> None: ...
    def EraseApplicationControlRedirection(self, id: ProgramId) -> Result: ...
    def EraseApplicationHtmlDocumentRedirection(self, id: ProgramId) -> Result: ...
    def EraseApplicationLegalInformationRedirection(self, id: ProgramId) -> Result: ...
    def EraseProgramRedirection(self, id: ProgramId) -> Result: ...
    def EraseProgramRedirectionForDebug(self, id: ProgramId) -> Result: ...
    def RedirectApplicationControlPath(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    def RedirectApplicationHtmlDocumentPath(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    def RedirectApplicationLegalInformationPath(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    def RedirectApplicationProgramPath(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    def RedirectApplicationProgramPathForDebug(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    def RedirectProgramPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    def RedirectProgramPathForDebug(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    def Refresh(self) -> Result: ...
    def ResolveApplicationControlPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    def ResolveApplicationHtmlDocumentPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    def ResolveApplicationLegalInformationPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    def ResolveDataPath(self, path: clr.Reference[Path], id: DataId) -> Result: ...
    def ResolveProgramPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    def ResolveProgramPathForDebug(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...


class LrClient(IDisposable):
    def __init__(self, horizonClient: HorizonClient) -> None: ...
    def Dispose(self) -> None: ...


class LrService(abc.ABC):
    @staticmethod
    def Initialize(lr: LrClient) -> None: ...
    @staticmethod
    def OpenAddOnContentLocationResolver(lr: LrClient, outResolver: clr.Reference[AddOnContentLocationResolver]) -> Result: ...
    @staticmethod
    def OpenLocationResolver(lr: LrClient, outResolver: clr.Reference[LocationResolver], storageId: StorageId) -> Result: ...
    @staticmethod
    def OpenRegisteredLocationResolver(lr: LrClient, outResolver: clr.Reference[RegisteredLocationResolver]) -> Result: ...
    @staticmethod
    def RefreshLocationResolver(lr: LrClient, storageId: StorageId) -> Result: ...


class Path:
    Value : Array768_1[int]
    @staticmethod
    def InitEmpty(path: clr.Reference[Path]) -> None: ...
    # Operator not supported op_Implicit(value: Path&)
    def ToString(self) -> str: ...


class RegisteredLocationResolver(IDisposable):
    def __init__(self, baseInterface: clr.Reference[SharedRef_1[IRegisteredLocationResolver]]) -> None: ...
    def Dispose(self) -> None: ...
    def RedirectHtmlDocumentPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    def RedirectProgramPath(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    def Refresh(self) -> Result: ...
    def RefreshExcluding(self, ids: ReadOnlySpan_1[ProgramId]) -> Result: ...
    def RegisterHtmlDocumentPath(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    def RegisterProgramPath(self, path: clr.Reference[Path], id: ProgramId, ownerId: ProgramId) -> Result: ...
    def ResolveHtmlDocumentPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    def ResolveProgramPath(self, path: clr.Reference[Path], id: ProgramId) -> Result: ...
    def UnregisterHtmlDocumentPath(self, id: ProgramId) -> Result: ...
    def UnregisterProgramPath(self, id: ProgramId) -> Result: ...


class ResultLr(abc.ABC):
    ModuleLr : int
    @classmethod
    @property
    def AddOnContentNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def ApplicationNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def ControlNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def DataNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def DebugProgramNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def HtmlDocumentNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def LegalInformationNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def ProgramNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def ResolverNotFound(cls) -> Result.Base: ...
    @classmethod
    @property
    def TooManyRegisteredPaths(cls) -> Result.Base: ...
    @classmethod
    @property
    def UnknownResolver(cls) -> Result.Base: ...

